{"ast":null,"code":"import BusinessObject from \"./BusinessObject\";\nexport default class PersonBO extends BusinessObject {\n  /**\n   * Wir erstellen einen Konstruktor\n   */\n  constructor(vorname, nachname) {\n    super();\n    this.vorname = vorname;\n    this.nachname = nachname;\n  }\n\n  getVorname() {\n    return this.vorname;\n  }\n\n  setVorname(value) {\n    this.vorname = value;\n  }\n\n  getNachname() {\n    return this.nachname;\n  }\n\n  setNachname(value) {\n    this.nachname = value;\n  }\n  /**\n   * Wir nehmen die vom Server bekommene Json-Datei und fügen sie in eine Liste ein um im Frontend mit diesen Werten\n   * arbeiten zu können \n   */\n\n\n  static convertFromJson(personen) {\n    let result = [];\n    /** Prüfen ob der eingegebene Parameterwert eine Liste ist*/\n\n    if (Array.isArray(personen)) {\n      personen.forEach(x => {\n        Object.setPrototypeOf(x, PersonBO.prototype);\n        result.push(x);\n      });\n    } else {\n      // keine Liste -> einzelnes Objekt\n      let x = personen;\n      Object.setPrototypeOf(x, PersonBO.prototype);\n      result.push(x);\n    }\n\n    console.log();\n    return result;\n  }\n\n}","map":{"version":3,"sources":["/Users/macbookpro/Desktop/SoPra_Team12/codetests/frontend/src/api/PersonBO.js"],"names":["BusinessObject","PersonBO","constructor","vorname","nachname","getVorname","setVorname","value","getNachname","setNachname","convertFromJson","personen","result","Array","isArray","forEach","x","Object","setPrototypeOf","prototype","push","console","log"],"mappings":"AAAA,OAAOA,cAAP,MAA2B,kBAA3B;AAEA,eAAe,MAAMC,QAAN,SAAuBD,cAAvB,CAAsC;AACjD;AACJ;AACA;AACIE,EAAAA,WAAW,CAACC,OAAD,EAAUC,QAAV,EAAoB;AAC3B;AACA,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,QAAL,GAAgBA,QAAhB;AACH;;AAIDC,EAAAA,UAAU,GAAE;AACR,WAAO,KAAKF,OAAZ;AACH;;AAEDG,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,SAAKJ,OAAL,GAAeI,KAAf;AACH;;AAEDC,EAAAA,WAAW,GAAG;AACV,WAAO,KAAKJ,QAAZ;AACH;;AAEDK,EAAAA,WAAW,CAACF,KAAD,EAAQ;AACf,SAAKH,QAAL,GAAgBG,KAAhB;AACH;AAED;AACJ;AACA;AACA;;;AAC0B,SAAfG,eAAe,CAACC,QAAD,EAAW;AAC7B,QAAIC,MAAM,GAAG,EAAb;AACA;;AACA,QAAIC,KAAK,CAACC,OAAN,CAAcH,QAAd,CAAJ,EAA6B;AACzBA,MAAAA,QAAQ,CAACI,OAAT,CAAkBC,CAAD,IAAO;AACpBC,QAAAA,MAAM,CAACC,cAAP,CAAsBF,CAAtB,EAAyBf,QAAQ,CAACkB,SAAlC;AACAP,QAAAA,MAAM,CAACQ,IAAP,CAAYJ,CAAZ;AACH,OAHD;AAIH,KALD,MAKO;AACH;AACA,UAAIA,CAAC,GAAGL,QAAR;AACAM,MAAAA,MAAM,CAACC,cAAP,CAAsBF,CAAtB,EAAyBf,QAAQ,CAACkB,SAAlC;AACAP,MAAAA,MAAM,CAACQ,IAAP,CAAYJ,CAAZ;AACH;;AACDK,IAAAA,OAAO,CAACC,GAAR;AACA,WAAOV,MAAP;AACH;;AAhDgD","sourcesContent":["import BusinessObject from \"./BusinessObject\";\n\nexport default class PersonBO extends BusinessObject {\n    /**\n     * Wir erstellen einen Konstruktor\n     */\n    constructor(vorname, nachname) {\n        super();\n        this.vorname = vorname;\n        this.nachname = nachname;\n    }\n\n\n\n    getVorname(){\n        return this.vorname\n    }\n\n    setVorname(value) {\n        this.vorname = value\n    }\n\n    getNachname() {\n        return this.nachname\n    }\n\n    setNachname(value) {\n        this.nachname = value\n    }\n\n    /**\n     * Wir nehmen die vom Server bekommene Json-Datei und fügen sie in eine Liste ein um im Frontend mit diesen Werten\n     * arbeiten zu können \n     */\n    static convertFromJson(personen) {\n        let result = []\n        /** Prüfen ob der eingegebene Parameterwert eine Liste ist*/\n        if (Array.isArray(personen)) {\n            personen.forEach((x) => {\n                Object.setPrototypeOf(x, PersonBO.prototype)\n                result.push(x)\n            })\n        } else {\n            // keine Liste -> einzelnes Objekt\n            let x = personen;\n            Object.setPrototypeOf(x, PersonBO.prototype);\n            result.push(x)\n        }\n        console.log()\n        return result;\n    }\n\n\n\n\n\n}"]},"metadata":{},"sourceType":"module"}