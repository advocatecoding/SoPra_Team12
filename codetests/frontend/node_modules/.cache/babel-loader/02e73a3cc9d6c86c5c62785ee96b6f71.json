{"ast":null,"code":"import _classCallCheck from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import{withStyles,Button,ListItem,ListItemSecondaryAction,Link,Typography}from'@material-ui/core';import DeleteIcon from'@material-ui/icons/Delete';import SwapHoriz from'@material-ui/icons/SwapHoriz';import{Link as RouterLink}from'react-router-dom';import{BankAPI}from'../api';import ContextErrorMessage from'./dialogs/ContextErrorMessage';import LoadingProgress from'./dialogs/LoadingProgress';import MoneyTransferDialog from'./dialogs/MoneyTransferDialog';/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it. Links accounts \n * to a list of transactions. This is done by routing the link to /transactions and passing the CustomerBO and\n * the AccountBO as props to the AccountList component. It also shows a MoneyTransferDialog to transfer money.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * @see See Material-UIs [Link](https://material-ui.com/components/links/)\n * @see See Material-UIs React Router integration [Composition](https://material-ui.com/guides/composition/#link)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @see See [MoneyTransferDialog](#moneytransferdialog)\n * @see See [TransactionList](#transactionlist)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */import{jsxs as _jsxs}from\"react/jsx-runtime\";import{jsx as _jsx}from\"react/jsx-runtime\";var AccountListEntry=/*#__PURE__*/function(_Component){_inherits(AccountListEntry,_Component);var _super=_createSuper(AccountListEntry);function AccountListEntry(props){var _this;_classCallCheck(this,AccountListEntry);_this=_super.call(this,props);// Init an empty state\n_this.getBalance=function(){BankAPI.getAPI().getBalanceOfAccount(_this.props.account.getID()).then(function(balance){return _this.setState({balance:balance,loadingInProgress:false,// loading indicator \nloadingError:null});}).catch(function(e){return _this.setState({// Reset state with error from catch \nbalance:null,loadingInProgress:false,loadingError:e});});// set loading to true\n_this.setState({balance:'loading',loadingInProgress:true,loadingError:null});};_this.deleteAccount=function(){var account=_this.props.account;BankAPI.getAPI().deleteAccount(account.getID()).then(function(){_this.setState({// Set new state when AccountBOs have been fetched\ndeletingInProgress:false,// loading indicator \ndeletingError:null});// console.log(account);\n_this.props.onAccountDeleted(account);}).catch(function(e){return _this.setState({// Reset state with error from catch \ndeletingInProgress:false,deletingError:e});});// set loading to true\n_this.setState({deletingInProgress:true,deletingError:null});};_this.transferMoney=function(){_this.setState({showMoneyTransferDialog:true});};_this.moneyTransferDialogClosed=function(transaction){_this.setState({showMoneyTransferDialog:false});if(transaction){// Transaction is not null and therefore was performed\n_this.getBalance();}};_this.state={balance:'',loadingInProgress:false,deletingInProgress:false,loadingError:null,deletingError:null,showMoneyTransferDialog:false};return _this;}/** Lifecycle method, which is called when the component gets inserted into the browsers DOM */_createClass(AccountListEntry,[{key:\"componentDidMount\",value:function componentDidMount(){// load initial balance\nthis.getBalance();}/** Lifecycle method, which is called when the component was updated */},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){if(this.props.show&&this.props.show!==prevProps.show){this.getBalance();}}/** gets the balance for this account */},{key:\"render\",value:/** Renders the component */function render(){var _this$props=this.props,classes=_this$props.classes,customer=_this$props.customer,account=_this$props.account;var _this$state=this.state,loadingInProgress=_this$state.loadingInProgress,deletingInProgress=_this$state.deletingInProgress,loadingError=_this$state.loadingError,deletingError=_this$state.deletingError,balance=_this$state.balance,showMoneyTransferDialog=_this$state.showMoneyTransferDialog;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(Typography,{className:classes.accountEntry,children:/*#__PURE__*/_jsxs(Link,{component:RouterLink,to:{pathname:'/transactions',owner:{customer:customer,account:account}},children:[\"Account ID: \",account.getID()]})}),/*#__PURE__*/_jsxs(Typography,{color:\"textSecondary\",children:[\"Balance: \",!isNaN(balance)?BankAPI.getAPI().getCurrencyFormatter().format(balance):balance]}),/*#__PURE__*/_jsxs(ListItemSecondaryAction,{children:[/*#__PURE__*/_jsx(Button,{className:classes.buttonMargin,variant:\"outlined\",color:\"primary\",size:\"small\",startIcon:/*#__PURE__*/_jsx(SwapHoriz,{}),onClick:this.transferMoney,children:\"Transfer\"}),/*#__PURE__*/_jsx(Button,{color:\"secondary\",size:\"small\",startIcon:/*#__PURE__*/_jsx(DeleteIcon,{}),onClick:this.deleteAccount,children:\"Delete\"})]})]}),/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(LoadingProgress,{show:loadingInProgress||deletingInProgress}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:loadingError,contextErrorMsg:\"The balance of account \".concat(account.getID(),\" could not be loaded.\"),onReload:this.getBalance}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:deletingError,contextErrorMsg:\"The account \".concat(account.getID(),\" could not be deleted.\"),onReload:this.deleteAccount})]}),/*#__PURE__*/_jsx(MoneyTransferDialog,{show:showMoneyTransferDialog,customer:customer,account:account,onClose:this.moneyTransferDialogClosed})]});}}]);return AccountListEntry;}(Component);/** Component specific styles */var styles=function styles(theme){return{root:{width:'100%'},buttonMargin:{marginRight:theme.spacing(2)},accountEntry:{fontSize:theme.typography.pxToRem(15),flexBasis:'33.33%',flexShrink:0}};};/** PropTypes */export default withStyles(styles)(AccountListEntry);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/AccountListEntry.js"],"names":["React","Component","withStyles","Button","ListItem","ListItemSecondaryAction","Link","Typography","DeleteIcon","SwapHoriz","RouterLink","BankAPI","ContextErrorMessage","LoadingProgress","MoneyTransferDialog","AccountListEntry","props","getBalance","getAPI","getBalanceOfAccount","account","getID","then","balance","setState","loadingInProgress","loadingError","catch","e","deleteAccount","deletingInProgress","deletingError","onAccountDeleted","transferMoney","showMoneyTransferDialog","moneyTransferDialogClosed","transaction","state","prevProps","show","classes","customer","accountEntry","pathname","owner","isNaN","getCurrencyFormatter","format","buttonMargin","styles","theme","root","width","marginRight","spacing","fontSize","typography","pxToRem","flexBasis","flexShrink"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, ListItem, ListItemSecondaryAction, Link, Typography } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SwapHoriz from '@material-ui/icons/SwapHoriz';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport MoneyTransferDialog from './dialogs/MoneyTransferDialog';\n\n\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it. Links accounts \n * to a list of transactions. This is done by routing the link to /transactions and passing the CustomerBO and\n * the AccountBO as props to the AccountList component. It also shows a MoneyTransferDialog to transfer money.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * @see See Material-UIs [Link](https://material-ui.com/components/links/)\n * @see See Material-UIs React Router integration [Composition](https://material-ui.com/guides/composition/#link)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @see See [MoneyTransferDialog](#moneytransferdialog)\n * @see See [TransactionList](#transactionlist)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      balance: '',\n      loadingInProgress: false,\n      deletingInProgress: false,\n      loadingError: null,\n      deletingError: null,\n      showMoneyTransferDialog: false,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load initial balance\n    this.getBalance();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    if ((this.props.show) && (this.props.show !== prevProps.show)) {\n      this.getBalance();\n    }\n  }\n\n  /** gets the balance for this account */\n  getBalance = () => {\n    BankAPI.getAPI().getBalanceOfAccount(this.props.account.getID()).then(balance =>\n      this.setState({\n        balance: balance,\n        loadingInProgress: false, // loading indicator \n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          balance: null,\n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      balance: 'loading',\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Deletes this account */\n  deleteAccount = () => {\n    const { account } = this.props;\n    BankAPI.getAPI().deleteAccount(account.getID()).then(() => {\n      this.setState({  // Set new state when AccountBOs have been fetched\n        deletingInProgress: false, // loading indicator \n        deletingError: null\n      })\n      // console.log(account);\n      this.props.onAccountDeleted(account);\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        deletingInProgress: false,\n        deletingError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      deletingInProgress: true,\n      deletingError: null\n    });\n  }\n\n  /** Handles click events from the transfer money button */\n  transferMoney = () => {\n    this.setState({\n      showMoneyTransferDialog: true\n    });\n  }\n\n  /** Handles the onClose event from the transfer money dialog */\n  moneyTransferDialogClosed = (transaction) => {\n    this.setState({\n      showMoneyTransferDialog: false\n    });\n    if (transaction) {\n      // Transaction is not null and therefore was performed\n      this.getBalance();\n    }\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, account } = this.props;\n    const { loadingInProgress, deletingInProgress, loadingError, deletingError, balance, showMoneyTransferDialog } = this.state;\n\n    return (\n      <div>\n        <ListItem>\n          <Typography className={classes.accountEntry}>\n            <Link component={RouterLink} to={{\n              pathname: '/transactions',\n              owner: {\n                customer: customer,\n                account: account\n              }\n            }} >\n              Account ID: {account.getID()}\n            </Link>\n\n          </Typography>\n          <Typography color='textSecondary'>\n            Balance: {!isNaN(balance) ? BankAPI.getAPI().getCurrencyFormatter().format(balance) : balance}\n          </Typography>\n          <ListItemSecondaryAction>\n            <Button className={classes.buttonMargin} variant='outlined' color='primary' size='small' startIcon={<SwapHoriz />} onClick={this.transferMoney}>\n              Transfer\n            </Button>\n            <Button color='secondary' size='small' startIcon={<DeleteIcon />} onClick={this.deleteAccount}>\n              Delete\n            </Button>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <ListItem>\n          <LoadingProgress show={loadingInProgress || deletingInProgress} />\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The balance of account ${account.getID()} could not be loaded.`} onReload={this.getBalance} />\n          <ContextErrorMessage error={deletingError} contextErrorMsg={`The account ${account.getID()} could not be deleted.`} onReload={this.deleteAccount} />\n        </ListItem>\n        <MoneyTransferDialog show={showMoneyTransferDialog} customer={customer} account={account} onClose={this.moneyTransferDialogClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  }, \n  buttonMargin: {\n    marginRight: theme.spacing(2),\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  }\n});\n\n/** PropTypes */\nAccountListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO of this AccountListEntry */\n  customer: PropTypes.object.isRequired,\n  /** The AccountBO to be rendered */\n  account: PropTypes.object.isRequired,\n  /**  \n   * Event Handler function which is called after a sucessfull delete of this account. \n   * \n   * Signature: onAccountDeleted(AccountBO account); \n   */\n  onAccountDeleted: PropTypes.func.isRequired,\n  /** If true, balance is (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(AccountListEntry);\n"]},"metadata":{},"sourceType":"module"}