{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nimport CustomerBO from './CustomerBO';\nimport TransactionBO from './TransactionBO';\nimport AccountBO from './AccountBO';\n/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nvar _api = /*#__PURE__*/_classPrivateFieldLooseKey(\"api\");\n\nvar _bankServerBaseURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"bankServerBaseURL\");\n\nvar _currencyFormatter = /*#__PURE__*/_classPrivateFieldLooseKey(\"currencyFormatter\");\n\nvar _currency = /*#__PURE__*/_classPrivateFieldLooseKey(\"currency\");\n\nvar _getCustomersURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"getCustomersURL\");\n\nvar _addCustomerURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"addCustomerURL\");\n\nvar _getCustomerURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"getCustomerURL\");\n\nvar _updateCustomerURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"updateCustomerURL\");\n\nvar _deleteCustomerURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"deleteCustomerURL\");\n\nvar _searchCustomerURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"searchCustomerURL\");\n\nvar _getAllAccountsURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAllAccountsURL\");\n\nvar _getAccountsForCustomerURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"getAccountsForCustomerURL\");\n\nvar _addAccountsForCustomerURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"addAccountsForCustomerURL\");\n\nvar _getBalanceForAccountURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"getBalanceForAccountURL\");\n\nvar _deleteAccountIdURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"deleteAccountIdURL\");\n\nvar _getCreditsForAccountIdURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"getCreditsForAccountIdURL\");\n\nvar _getDebitsForAccountIdURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"getDebitsForAccountIdURL\");\n\nvar _addTransactionURL = /*#__PURE__*/_classPrivateFieldLooseKey(\"addTransactionURL\");\n\nvar _fetchAdvanced = /*#__PURE__*/_classPrivateFieldLooseKey(\"fetchAdvanced\");\n\nexport default class BankAPI {\n  constructor() {\n    Object.defineProperty(this, _bankServerBaseURL, {\n      writable: true,\n      value: '/api/bank'\n    });\n    Object.defineProperty(this, _currencyFormatter, {\n      writable: true,\n      value: new Intl.NumberFormat('de-DE', {\n        style: 'currency',\n        currency: 'EUR'\n      })\n    });\n    Object.defineProperty(this, _currency, {\n      writable: true,\n      value: '€'\n    });\n    Object.defineProperty(this, _getCustomersURL, {\n      writable: true,\n      value: () => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/customers`\n    });\n    Object.defineProperty(this, _addCustomerURL, {\n      writable: true,\n      value: () => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/customers`\n    });\n    Object.defineProperty(this, _getCustomerURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/customers/${id}`\n    });\n    Object.defineProperty(this, _updateCustomerURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/customers/${id}`\n    });\n    Object.defineProperty(this, _deleteCustomerURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/customers/${id}`\n    });\n    Object.defineProperty(this, _searchCustomerURL, {\n      writable: true,\n      value: customerName => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/customers-by-name/${customerName}`\n    });\n    Object.defineProperty(this, _getAllAccountsURL, {\n      writable: true,\n      value: () => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/accounts`\n    });\n    Object.defineProperty(this, _getAccountsForCustomerURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/customers/${id}/accounts`\n    });\n    Object.defineProperty(this, _addAccountsForCustomerURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/customers/${id}/accounts`\n    });\n    Object.defineProperty(this, _getBalanceForAccountURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/accounts/${id}/balance`\n    });\n    Object.defineProperty(this, _deleteAccountIdURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/accounts/${id}`\n    });\n    Object.defineProperty(this, _getCreditsForAccountIdURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/account/${id}/credits`\n    });\n    Object.defineProperty(this, _getDebitsForAccountIdURL, {\n      writable: true,\n      value: id => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/account/${id}/debits`\n    });\n    Object.defineProperty(this, _addTransactionURL, {\n      writable: true,\n      value: () => `${_classPrivateFieldLooseBase(this, _bankServerBaseURL)[_bankServerBaseURL]}/transactions`\n    });\n    Object.defineProperty(this, _fetchAdvanced, {\n      writable: true,\n      value: (url, init) => fetch(url, init).then(res => {\n        // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n        if (!res.ok) {\n          throw Error(`${res.status} ${res.statusText}`);\n        }\n\n        return res.json();\n      })\n    });\n  }\n\n  /** \n   * Get the Singelton instance \n   * \n   * @public\n   */\n  static getAPI() {\n    if (_classPrivateFieldLooseBase(this, _api)[_api] == null) {\n      _classPrivateFieldLooseBase(this, _api)[_api] = new BankAPI();\n    }\n\n    return _classPrivateFieldLooseBase(this, _api)[_api];\n  }\n  /**\n   *  Returns a Promise which resolves to a json object. \n   *  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n   *  fetchAdvanced throws an Error also an server status errors\n   */\n\n\n  /**\n   * Returns a formatter to format currencys of the transactions\n   * \n   * @public\n   */\n  getCurrencyFormatter() {\n    return _classPrivateFieldLooseBase(this, _currencyFormatter)[_currencyFormatter];\n  }\n  /**\n   * Returns the code for the currency\n   * \n   * @public \n   */\n\n\n  getCurrency() {\n    return _classPrivateFieldLooseBase(this, _currency)[_currency];\n  }\n  /**\n   * Returns a Promise, which resolves to an Array of CustomerBOs\n   * \n   * @public\n   */\n\n\n  getCustomers() {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](\"frontend/http-fake-backend/bank/accounts\").then(responseJSON => {\n      let customerBOs = CustomerBO.fromJSON(responseJSON); // console.info(customerBOs);\n\n      return new Promise(function (resolve) {\n        resolve(customerBOs);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to a CustomerBO\n   * \n   * @param {Number} customerID to be retrieved\n   * @public\n   */\n\n\n  getCustomer(customerID) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _getCustomerURL)[_getCustomerURL](customerID)).then(responseJSON => {\n      // We always get an array of CustomerBOs.fromJSON, but only need one object\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0]; // console.info(responseCustomerBO);\n\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      });\n    });\n  }\n  /**\n   * Adds a customer and returns a Promise, which resolves to a new CustomerBO object with the \n   * firstName and lastName of the parameter customerBO object.\n   * \n   * @param {CustomerBO} customerBO to be added. The ID of the new customer is set by the backend\n   * @public\n   */\n\n\n  addCustomer(customerBO) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _addCustomerURL)[_addCustomerURL](), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(customerBO)\n    }).then(responseJSON => {\n      // We always get an array of CustomerBOs.fromJSON, but only need one object\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0]; // console.info(accountBOs);\n\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      });\n    });\n  }\n  /**\n   * Updates a customer and returns a Promise, which resolves to a CustomerBO.\n   * \n   * @param {CustomerBO} customerBO to be updated\n   * @public\n   */\n\n\n  updateCustomer(customerBO) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _updateCustomerURL)[_updateCustomerURL](customerBO.getID()), {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(customerBO)\n    }).then(responseJSON => {\n      // We always get an array of CustomerBOs.fromJSON\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0]; // console.info(accountBOs);\n\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */\n\n\n  deleteCustomer(customerID) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _deleteCustomerURL)[_deleteCustomerURL](customerID), {\n      method: 'DELETE'\n    }).then(responseJSON => {\n      // We always get an array of CustomerBOs.fromJSON\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0]; // console.info(accountBOs);\n\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */\n\n\n  searchCustomer(customerName) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _searchCustomerURL)[_searchCustomerURL](customerName)).then(responseJSON => {\n      let customerBOs = CustomerBO.fromJSON(responseJSON); // console.info(customerBOs);\n\n      return new Promise(function (resolve) {\n        resolve(customerBOs);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */\n\n\n  getAllAccounts() {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _getAllAccountsURL)[_getAllAccountsURL]()).then(responseJSON => {\n      let accountBOs = AccountBO.fromJSON(responseJSON); // console.info(accountBOs);\n\n      return new Promise(function (resolve) {\n        resolve(accountBOs);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */\n\n\n  getAccountsForCustomer(customerID) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _getAccountsForCustomerURL)[_getAccountsForCustomerURL](customerID)).then(responseJSON => {\n      let accountBOs = AccountBO.fromJSON(responseJSON); // console.info(accountBOs);\n\n      return new Promise(function (resolve) {\n        resolve(accountBOs);\n      });\n    });\n  }\n  /**\n   * Deletes the given account and returns a Promise, which resolves to an AccountBO\n   * \n   * @param accountID to be deleted\n   * @public\n   */\n\n\n  deleteAccount(accountID) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _deleteAccountIdURL)[_deleteAccountIdURL](accountID), {\n      method: 'DELETE'\n    }).then(responseJSON => {\n      // We always get an array of AccountBO.fromJSON, but only need one object\n      let accountBOs = AccountBO.fromJSON(responseJSON)[0]; // console.info(accountBOs);\n\n      return new Promise(function (resolve) {\n        resolve(accountBOs);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to an AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be added to\n   * @public\n   */\n\n\n  addAccountForCustomer(customerID) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _addAccountsForCustomerURL)[_addAccountsForCustomerURL](customerID), {\n      method: 'POST'\n    }).then(responseJSON => {\n      // We always get an array of AccountBO.fromJSON, but only need one object\n      let accountBO = AccountBO.fromJSON(responseJSON)[0]; // console.info(accountBO);\n\n      return new Promise(function (resolve) {\n        // We expect only one new account\n        resolve(accountBO);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to a balance\n   * \n   * @param {Number} accountID for which the balance should be retrieved\n   * @public\n   */\n\n\n  getBalanceOfAccount(accountBO) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _getBalanceForAccountURL)[_getBalanceForAccountURL](accountBO)).then(responseJSON => {\n      // console.log(responseJSON)\n      return new Promise(function (resolve) {\n        resolve(responseJSON);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the credit transactions should be retrieved\n   * @public\n   */\n\n\n  getCreditsForAccount(accountID) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _getCreditsForAccountIdURL)[_getCreditsForAccountIdURL](accountID)).then(responseJSON => {\n      let transactionBOs = TransactionBO.fromJSON(responseJSON); // console.info(transactionBOs);\n\n      return new Promise(function (resolve) {\n        resolve(transactionBOs);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the debit transactions should be retrieved\n   * @public\n   */\n\n\n  getDebitsForAccount(accountID) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _getDebitsForAccountIdURL)[_getDebitsForAccountIdURL](accountID)).then(responseJSON => {\n      let transactionBOs = TransactionBO.fromJSON(responseJSON); // console.info(transactionBOs);\n\n      return new Promise(function (resolve) {\n        resolve(transactionBOs);\n      });\n    });\n  }\n  /**\n   * Returns a Promise, which resolves to the new TransactionBO\n   * \n   * @param {TransactionBO} transaction object \n   * @public\n   */\n\n\n  addTransaction(transaction) {\n    return _classPrivateFieldLooseBase(this, _fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this, _addTransactionURL)[_addTransactionURL](), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json'\n      },\n      body: JSON.stringify(transaction)\n    }).then(responseJSON => {\n      // We always get an array of TransactionBO.fromJSON, but only need one object\n      let tansactionBO = TransactionBO.fromJSON(responseJSON)[0]; // console.info(accountBO);\n\n      return new Promise(function (resolve) {\n        // We expect only one new account\n        resolve(tansactionBO);\n      });\n    });\n  }\n\n}\nObject.defineProperty(BankAPI, _api, {\n  writable: true,\n  value: null\n});","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/api/BankAPI.js"],"names":["CustomerBO","TransactionBO","AccountBO","BankAPI","Intl","NumberFormat","style","currency","id","customerName","url","init","fetch","then","res","ok","Error","status","statusText","json","getAPI","getCurrencyFormatter","getCurrency","getCustomers","responseJSON","customerBOs","fromJSON","Promise","resolve","getCustomer","customerID","responseCustomerBO","addCustomer","customerBO","method","headers","body","JSON","stringify","updateCustomer","getID","deleteCustomer","searchCustomer","getAllAccounts","accountBOs","getAccountsForCustomer","deleteAccount","accountID","addAccountForCustomer","accountBO","getBalanceOfAccount","getCreditsForAccount","transactionBOs","getDebitsForAccount","addTransaction","transaction","tansactionBO"],"mappings":"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","sourcesContent":["import CustomerBO from './CustomerBO';\nimport TransactionBO from './TransactionBO';\nimport AccountBO from './AccountBO';\n\n/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nexport default class BankAPI {\n\n  // Singelton instance\n  static #api = null;\n\n\n  // Local Python backend\n  //#bankServerBaseURL = '/bank';\n\n  // Local http-fake-backend \n  #bankServerBaseURL = '/api/bank';\n\n  #currencyFormatter = new Intl.NumberFormat('de-DE', {\n    style: 'currency',\n    currency: 'EUR'\n  });\n\n  #currency = '€';\n\n  // Customer related\n  #getCustomersURL = () => `${this.#bankServerBaseURL}/customers`;\n  #addCustomerURL = () => `${this.#bankServerBaseURL}/customers`;\n  #getCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #updateCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #deleteCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #searchCustomerURL = (customerName) => `${this.#bankServerBaseURL}/customers-by-name/${customerName}`;\n\n\n  // Account related\n  #getAllAccountsURL = () => `${this.#bankServerBaseURL}/accounts`;\n  #getAccountsForCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}/accounts`;\n  #addAccountsForCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}/accounts`;\n  #getBalanceForAccountURL = (id) => `${this.#bankServerBaseURL}/accounts/${id}/balance`;\n  #deleteAccountIdURL = (id) => `${this.#bankServerBaseURL}/accounts/${id}`;\n\n  // Transaction related\n  #getCreditsForAccountIdURL = (id) => `${this.#bankServerBaseURL}/account/${id}/credits`;\n  #getDebitsForAccountIdURL = (id) => `${this.#bankServerBaseURL}/account/${id}/debits`;\n  #addTransactionURL = () => `${this.#bankServerBaseURL}/transactions`;\n\n  /** \n   * Get the Singelton instance \n   * \n   * @public\n   */\n  static getAPI() {\n    if (this.#api == null) {\n      this.#api = new BankAPI();\n    }\n    return this.#api;\n  }\n\n  /**\n   *  Returns a Promise which resolves to a json object. \n   *  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n   *  fetchAdvanced throws an Error also an server status errors\n   */\n  #fetchAdvanced = (url, init) => fetch(url, init)\n    .then(res => {\n      // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n      if (!res.ok) {\n        throw Error(`${res.status} ${res.statusText}`);\n      }\n      return res.json();\n    }\n    )\n\n  /**\n   * Returns a formatter to format currencys of the transactions\n   * \n   * @public\n   */\n  getCurrencyFormatter() {\n    return this.#currencyFormatter;\n  }\n\n  /**\n   * Returns the code for the currency\n   * \n   * @public \n   */\n  getCurrency() {\n    return this.#currency;\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of CustomerBOs\n   * \n   * @public\n   */\n  getCustomers() {\n    return this.#fetchAdvanced(\"frontend/http-fake-backend/bank/accounts\").then((responseJSON) => {\n      let customerBOs = CustomerBO.fromJSON(responseJSON);\n      // console.info(customerBOs);\n      return new Promise(function (resolve) {\n        resolve(customerBOs);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to a CustomerBO\n   * \n   * @param {Number} customerID to be retrieved\n   * @public\n   */\n  getCustomer(customerID) {\n    return this.#fetchAdvanced(this.#getCustomerURL(customerID)).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON, but only need one object\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(responseCustomerBO);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Adds a customer and returns a Promise, which resolves to a new CustomerBO object with the \n   * firstName and lastName of the parameter customerBO object.\n   * \n   * @param {CustomerBO} customerBO to be added. The ID of the new customer is set by the backend\n   * @public\n   */\n  addCustomer(customerBO) {\n    return this.#fetchAdvanced(this.#addCustomerURL(), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(customerBO)\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON, but only need one object\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Updates a customer and returns a Promise, which resolves to a CustomerBO.\n   * \n   * @param {CustomerBO} customerBO to be updated\n   * @public\n   */\n  updateCustomer(customerBO) {\n    return this.#fetchAdvanced(this.#updateCustomerURL(customerBO.getID()), {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(customerBO)\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */\n  deleteCustomer(customerID) {\n    return this.#fetchAdvanced(this.#deleteCustomerURL(customerID), {\n      method: 'DELETE'\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */\n  searchCustomer(customerName) {\n    return this.#fetchAdvanced(this.#searchCustomerURL(customerName)).then((responseJSON) => {\n      let customerBOs = CustomerBO.fromJSON(responseJSON);\n      // console.info(customerBOs);\n      return new Promise(function (resolve) {\n        resolve(customerBOs);\n      })\n    })\n  }\n\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */\n  getAllAccounts() {\n    return this.#fetchAdvanced(this.#getAllAccountsURL())\n      .then((responseJSON) => {\n        let accountBOs = AccountBO.fromJSON(responseJSON);\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */\n  getAccountsForCustomer(customerID) {\n    return this.#fetchAdvanced(this.#getAccountsForCustomerURL(customerID))\n      .then((responseJSON) => {\n        let accountBOs = AccountBO.fromJSON(responseJSON);\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n  /**\n   * Deletes the given account and returns a Promise, which resolves to an AccountBO\n   * \n   * @param accountID to be deleted\n   * @public\n   */\n  deleteAccount(accountID) {\n    return this.#fetchAdvanced(this.#deleteAccountIdURL(accountID), {\n      method: 'DELETE'\n    })\n      .then((responseJSON) => {\n        // We always get an array of AccountBO.fromJSON, but only need one object\n        let accountBOs = AccountBO.fromJSON(responseJSON)[0];\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be added to\n   * @public\n   */\n  addAccountForCustomer(customerID) {\n    return this.#fetchAdvanced(this.#addAccountsForCustomerURL(customerID), {\n      method: 'POST'\n    })\n      .then((responseJSON) => {\n        // We always get an array of AccountBO.fromJSON, but only need one object\n        let accountBO = AccountBO.fromJSON(responseJSON)[0];\n        // console.info(accountBO);\n        return new Promise(function (resolve) {\n          // We expect only one new account\n          resolve(accountBO);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to a balance\n   * \n   * @param {Number} accountID for which the balance should be retrieved\n   * @public\n   */\n  getBalanceOfAccount(accountBO) {\n    return this.#fetchAdvanced(this.#getBalanceForAccountURL(accountBO))\n      .then(responseJSON => {\n        // console.log(responseJSON)\n        return new Promise(function (resolve) {\n          resolve(responseJSON);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the credit transactions should be retrieved\n   * @public\n   */\n  getCreditsForAccount(accountID) {\n    return this.#fetchAdvanced(this.#getCreditsForAccountIdURL(accountID))\n      .then(responseJSON => {\n        let transactionBOs = TransactionBO.fromJSON(responseJSON);\n        // console.info(transactionBOs);\n        return new Promise(function (resolve) {\n          resolve(transactionBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the debit transactions should be retrieved\n   * @public\n   */\n  getDebitsForAccount(accountID) {\n    return this.#fetchAdvanced(this.#getDebitsForAccountIdURL(accountID))\n      .then(responseJSON => {\n        let transactionBOs = TransactionBO.fromJSON(responseJSON);\n        // console.info(transactionBOs);\n        return new Promise(function (resolve) {\n          resolve(transactionBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to the new TransactionBO\n   * \n   * @param {TransactionBO} transaction object \n   * @public\n   */\n  addTransaction(transaction) {\n    return this.#fetchAdvanced(this.#addTransactionURL(), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(transaction)\n    }).then((responseJSON) => {\n      // We always get an array of TransactionBO.fromJSON, but only need one object\n      let tansactionBO = TransactionBO.fromJSON(responseJSON)[0];\n      // console.info(accountBO);\n      return new Promise(function (resolve) {\n        // We expect only one new account\n        resolve(tansactionBO);\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}