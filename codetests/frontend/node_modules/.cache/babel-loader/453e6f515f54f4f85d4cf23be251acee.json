{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/dialogs/CustomerForm.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI, CustomerBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CustomerForm extends Component {\n  constructor(props) {\n    super(props);\n\n    this.addCustomer = () => {\n      let newCustomer = new CustomerBO(this.state.firstName, this.state.lastName);\n      BankAPI.getAPI().addCustomer(newCustomer).then(customer => {\n        // Backend call sucessfull\n        // reinit the dialogs state for a new empty customer\n        this.setState(this.baseState);\n        this.props.onClose(customer); // call the parent with the customer object from backend\n      }).catch(e => this.setState({\n        updatingInProgress: false,\n        // disable loading indicator \n        updatingError: e // show error message\n\n      })); // set loading to true\n\n      this.setState({\n        updatingInProgress: true,\n        // show loading indicator\n        updatingError: null // disable error message\n\n      });\n    };\n\n    this.updateCustomer = () => {\n      // clone the original cutomer, in case the backend call fails\n      let updatedCustomer = Object.assign(new CustomerBO(), this.props.customer); // set the new attributes from our dialog\n\n      updatedCustomer.setFirstName(this.state.firstName);\n      updatedCustomer.setLastName(this.state.lastName);\n      BankAPI.getAPI().updateCustomer(updatedCustomer).then(customer => {\n        this.setState({\n          updatingInProgress: false,\n          // disable loading indicator  \n          updatingError: null // no error message\n\n        }); // keep the new state as base state\n\n        this.baseState.firstName = this.state.firstName;\n        this.baseState.lastName = this.state.lastName;\n        this.props.onClose(updatedCustomer); // call the parent with the new customer\n      }).catch(e => this.setState({\n        updatingInProgress: false,\n        // disable loading indicator \n        updatingError: e // show error message\n\n      })); // set loading to true\n\n      this.setState({\n        updatingInProgress: true,\n        // show loading indicator\n        updatingError: null // disable error message\n\n      });\n    };\n\n    this.textFieldValueChange = event => {\n      const value = event.target.value;\n      let error = false;\n\n      if (value.trim().length === 0) {\n        error = true;\n      }\n\n      this.setState({\n        [event.target.id]: event.target.value,\n        [event.target.id + 'ValidationFailed']: error,\n        [event.target.id + 'Edited']: true\n      });\n    };\n\n    this.handleClose = () => {\n      // Reset the state\n      this.setState(this.baseState);\n      this.props.onClose(null);\n    };\n\n    let fn = '',\n        ln = '';\n\n    if (props.customer) {\n      fn = props.customer.getFirstName();\n      ln = props.customer.getLastName();\n    } // Init the state\n\n\n    this.state = {\n      firstName: fn,\n      firstNameValidationFailed: false,\n      firstNameEdited: false,\n      lastName: ln,\n      lastNameValidationFailed: false,\n      lastNameEdited: false,\n      addingInProgress: false,\n      updatingInProgress: false,\n      addingError: null,\n      updatingError: null\n    }; // save this state for canceling\n\n    this.baseState = this.state;\n  }\n  /** Adds the customer */\n\n\n  /** Renders the component */\n  render() {\n    const {\n      classes,\n      customer,\n      show\n    } = this.props;\n    const {\n      firstName,\n      firstNameValidationFailed,\n      firstNameEdited,\n      lastName,\n      lastNameValidationFailed,\n      lastNameEdited,\n      addingInProgress,\n      addingError,\n      updatingInProgress,\n      updatingError\n    } = this.state;\n    let title = '';\n    let header = '';\n\n    if (customer) {\n      // customer defindet, so ist an edit dialog\n      title = 'Update a customer';\n      header = `Customer ID: ${customer.getID()}`;\n    } else {\n      title = 'Create a new customer';\n      header = 'Enter customer data';\n    }\n\n    return show ? /*#__PURE__*/_jsxDEV(Dialog, {\n      open: show,\n      onClose: this.handleClose,\n      maxWidth: \"xs\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: [title, /*#__PURE__*/_jsxDEV(IconButton, {\n          className: classes.closeButton,\n          onClick: this.handleClose,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: header\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          className: classes.root,\n          noValidate: true,\n          autoComplete: \"off\",\n          children: [/*#__PURE__*/_jsxDEV(TextField, {\n            autoFocus: true,\n            type: \"text\",\n            required: true,\n            fullWidth: true,\n            margin: \"normal\",\n            id: \"firstName\",\n            label: \"First name:\",\n            value: firstName,\n            onChange: this.textFieldValueChange,\n            error: firstNameValidationFailed,\n            helperText: firstNameValidationFailed ? 'The first name must contain at least one character' : ' '\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            type: \"text\",\n            required: true,\n            fullWidth: true,\n            margin: \"normal\",\n            id: \"lastName\",\n            label: \"Last name:\",\n            value: lastName,\n            onChange: this.textFieldValueChange,\n            error: lastNameValidationFailed,\n            helperText: lastNameValidationFailed ? 'The last name must contain at least one character' : ' '\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LoadingProgress, {\n          show: addingInProgress || updatingInProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 13\n        }, this), // Show error message in dependency of customer prop\n        customer ? /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n          error: updatingError,\n          contextErrorMsg: `The customer ${customer.getID()} could not be updated.`,\n          onReload: this.updateCustomer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n          error: addingError,\n          contextErrorMsg: `The customer could not be added.`,\n          onReload: this.addCustomer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 170,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.handleClose,\n          color: \"secondary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 13\n        }, this), // If a customer is given, show an update button, else an add button\n        customer ? /*#__PURE__*/_jsxDEV(Button, {\n          disabled: firstNameValidationFailed || lastNameValidationFailed,\n          variant: \"contained\",\n          onClick: this.updateCustomer,\n          color: \"primary\",\n          children: \"Update\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Button, {\n          disabled: firstNameValidationFailed || !firstNameEdited || lastNameValidationFailed || !lastNameEdited,\n          variant: \"contained\",\n          onClick: this.addCustomer,\n          color: \"primary\",\n          children: \"Add\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 19\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 9\n    }, this) : null;\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n/** PropTypes */\n\n\nCustomerForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** The CustomerBO to be edited */\n  customer: PropTypes.object,\n\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(CustomerForm);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/dialogs/CustomerForm.js"],"names":["React","Component","PropTypes","withStyles","Button","IconButton","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","TextField","CloseIcon","BankAPI","CustomerBO","ContextErrorMessage","LoadingProgress","CustomerForm","constructor","props","addCustomer","newCustomer","state","firstName","lastName","getAPI","then","customer","setState","baseState","onClose","catch","e","updatingInProgress","updatingError","updateCustomer","updatedCustomer","Object","assign","setFirstName","setLastName","textFieldValueChange","event","value","target","error","trim","length","id","handleClose","fn","ln","getFirstName","getLastName","firstNameValidationFailed","firstNameEdited","lastNameValidationFailed","lastNameEdited","addingInProgress","addingError","render","classes","show","title","header","getID","closeButton","root","styles","theme","width","position","right","spacing","top","color","palette","grey","propTypes","object","isRequired","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI, CustomerBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    let fn = '', ln = '';\n    if (props.customer) {\n      fn = props.customer.getFirstName();\n      ln = props.customer.getLastName();\n    }\n\n    // Init the state\n    this.state = {\n      firstName: fn,\n      firstNameValidationFailed: false,\n      firstNameEdited: false,\n      lastName: ln,\n      lastNameValidationFailed: false,\n      lastNameEdited: false,\n      addingInProgress: false,\n      updatingInProgress: false,\n      addingError: null,\n      updatingError: null\n    };\n    // save this state for canceling\n    this.baseState = this.state;\n  }\n\n  /** Adds the customer */\n  addCustomer = () => {\n    let newCustomer = new CustomerBO(this.state.firstName, this.state.lastName);\n    BankAPI.getAPI().addCustomer(newCustomer).then(customer => {\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState(this.baseState);\n      this.props.onClose(customer); // call the parent with the customer object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator \n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Updates the customer */\n  updateCustomer = () => {\n    // clone the original cutomer, in case the backend call fails\n    let updatedCustomer = Object.assign(new CustomerBO(), this.props.customer);\n    // set the new attributes from our dialog\n    updatedCustomer.setFirstName(this.state.firstName);\n    updatedCustomer.setLastName(this.state.lastName);\n    BankAPI.getAPI().updateCustomer(updatedCustomer).then(customer => {\n      this.setState({\n        updatingInProgress: false,              // disable loading indicator  \n        updatingError: null                     // no error message\n      });\n      // keep the new state as base state\n      this.baseState.firstName = this.state.firstName;\n      this.baseState.lastName = this.state.lastName;\n      this.props.onClose(updatedCustomer);      // call the parent with the new customer\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,              // disable loading indicator \n        updatingError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,                 // show loading indicator\n      updatingError: null                       // disable error message\n    });\n  }\n\n  /** Handles value changes of the forms textfields and validates them */\n  textFieldValueChange = (event) => {\n    const value = event.target.value;\n\n    let error = false;\n    if (value.trim().length === 0) {\n      error = true;\n    }\n\n    this.setState({\n      [event.target.id]: event.target.value,\n      [event.target.id + 'ValidationFailed']: error,\n      [event.target.id + 'Edited']: true\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // Reset the state\n    this.setState(this.baseState);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, show } = this.props;\n    const { firstName, firstNameValidationFailed, firstNameEdited, lastName, lastNameValidationFailed, lastNameEdited, addingInProgress,\n      addingError, updatingInProgress, updatingError } = this.state;\n\n    let title = '';\n    let header = '';\n\n    if (customer) {\n      // customer defindet, so ist an edit dialog\n      title = 'Update a customer';\n      header = `Customer ID: ${customer.getID()}`;\n    } else {\n      title = 'Create a new customer';\n      header = 'Enter customer data';\n    }\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\n          <DialogTitle id='form-dialog-title'>{title}\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              {header}\n            </DialogContentText>\n            <form className={classes.root} noValidate autoComplete='off'>\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='firstName' label='First name:' value={firstName} \n                onChange={this.textFieldValueChange} error={firstNameValidationFailed} \n                helperText={firstNameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n              <TextField type='text' required fullWidth margin='normal' id='lastName' label='Last name:' value={lastName}\n                onChange={this.textFieldValueChange} error={lastNameValidationFailed}\n                helperText={lastNameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n            </form>\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\n            {\n              // Show error message in dependency of customer prop\n              customer ?\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The customer ${customer.getID()} could not be updated.`} onReload={this.updateCustomer} />\n                :\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The customer could not be added.`} onReload={this.addCustomer} />\n            }\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            {\n              // If a customer is given, show an update button, else an add button\n              customer ?\n                <Button disabled={firstNameValidationFailed || lastNameValidationFailed} variant='contained' onClick={this.updateCustomer} color='primary'>\n                  Update\n              </Button>\n                : <Button disabled={firstNameValidationFailed || !firstNameEdited || lastNameValidationFailed || !lastNameEdited} variant='contained' onClick={this.addCustomer} color='primary'>\n                  Add\n             </Button>\n            }\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\n/** PropTypes */\nCustomerForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be edited */\n  customer: PropTypes.object,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(CustomerForm);\n"]},"metadata":{},"sourceType":"module"}