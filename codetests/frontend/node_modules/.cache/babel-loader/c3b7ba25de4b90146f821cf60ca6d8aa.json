{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/AccountList.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, ListItem } from '@material-ui/core';\nimport { Button, List } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountListEntry from './AccountListEntry';\n/**\n * Renders a list of AccountListEntry objects.\n * \n * @see See [AccountListEntry](#accountlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AccountList extends Component {\n  constructor(props) {\n    super(props); // Init the state\n\n    this.getAccounts = () => {\n      BankAPI.getAPI().getAccountsForCustomer(this.props.customer.getID()).then(accountBOs => this.setState({\n        // Set new state when AccountBOs have been fetched\n        accounts: accountBOs,\n        loadingInProgress: false,\n        // loading indicator \n        loadingAccountError: null\n      })).catch(e => this.setState({\n        // Reset state with error from catch \n        accounts: [],\n        loadingInProgress: false,\n        loadingAccountError: e\n      })); // set loading to true\n\n      this.setState({\n        loadingInProgress: true,\n        loadingAccountError: null\n      });\n    };\n\n    this.addAccount = () => {\n      BankAPI.getAPI().addAccountForCustomer(this.props.customer.getID()).then(accountBO => {\n        // console.log(accountBO)\n        this.setState({\n          // Set new state when AccountBOs have been fetched\n          accounts: [...this.state.accounts, accountBO],\n          loadingInProgress: false,\n          // loading indicator \n          addingAccountError: null\n        });\n      }).catch(e => this.setState({\n        // Reset state with error from catch \n        accounts: [],\n        loadingInProgress: false,\n        addingAccountError: e\n      })); // set loading to true\n\n      this.setState({\n        loadingInProgress: true,\n        addingAccountError: null\n      });\n    };\n\n    this.deleteAccountHandler = deletedAccount => {\n      // console.log(deletedAccount.getID());\n      this.setState({\n        accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\n      });\n    };\n\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingAccountError: null,\n      addingAccountError: null\n    };\n  }\n  /** Fetches AccountBOs for the current customer */\n\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getAccounts();\n  }\n  /** Lifecycle method, which is called when the component was updated */\n\n\n  componentDidUpdate(prevProps) {// reload accounts if shown state changed. Occures if the CustomerListEntrys ExpansionPanel was expanded\n    // if ((this.props.show !== prevProps.show)) {\n    //   this.getAccounts();\n    // }\n  }\n  /** Adds an account for the current customer */\n\n\n  /** Renders the component */\n  render() {\n    const {\n      classes,\n      customer\n    } = this.props; // Use the states customer\n\n    const {\n      accounts,\n      loadingInProgress,\n      loadingAccountError,\n      addingAccountError\n    } = this.state; // console.log(this.props);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(List, {\n        className: classes.accountList,\n        children: [accounts.map(account => /*#__PURE__*/_jsxDEV(AccountListEntry, {\n          customer: customer,\n          account: account,\n          onAccountDeleted: this.deleteAccountHandler,\n          show: this.props.show\n        }, account.getID(), false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 37\n        }, this)), /*#__PURE__*/_jsxDEV(ListItem, {\n          children: [/*#__PURE__*/_jsxDEV(LoadingProgress, {\n            show: loadingInProgress\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 114,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n            error: loadingAccountError,\n            contextErrorMsg: `List of accounts for customer ${customer.getID()} could not be loaded.`,\n            onReload: this.getAccounts\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n            error: addingAccountError,\n            contextErrorMsg: `Account for customer ${customer.getID()} could not be added.`,\n            onReload: this.addAccount\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 113,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        className: classes.addAccountButton,\n        variant: \"contained\",\n        color: \"primary\",\n        startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 119,\n          columnNumber: 101\n        }, this),\n        onClick: this.addAccount,\n        children: \"Add Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  },\n  accountList: {\n    marginBottom: theme.spacing(2)\n  },\n  addAccountButton: {\n    position: 'absolute',\n    right: theme.spacing(3),\n    bottom: theme.spacing(1)\n  }\n});\n/** PropTypes */\n\n\nAccountList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** The CustomerBO of this AccountList */\n  customer: PropTypes.object.isRequired,\n\n  /** If true, accounts are (re)loaded */\n  show: PropTypes.bool.isRequired\n};\nexport default withStyles(styles)(AccountList);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/AccountList.js"],"names":["React","Component","PropTypes","withStyles","ListItem","Button","List","AddIcon","BankAPI","ContextErrorMessage","LoadingProgress","AccountListEntry","AccountList","constructor","props","getAccounts","getAPI","getAccountsForCustomer","customer","getID","then","accountBOs","setState","accounts","loadingInProgress","loadingAccountError","catch","e","addAccount","addAccountForCustomer","accountBO","state","addingAccountError","deleteAccountHandler","deletedAccount","filter","account","componentDidMount","componentDidUpdate","prevProps","render","classes","root","accountList","map","show","addAccountButton","styles","theme","width","marginBottom","spacing","position","right","bottom","propTypes","object","isRequired","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, ListItem } from '@material-ui/core';\nimport { Button, List } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountListEntry from './AccountListEntry';\n\n/**\n * Renders a list of AccountListEntry objects.\n * \n * @see See [AccountListEntry](#accountlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingAccountError: null,\n      addingAccountError: null,\n    };\n  }\n\n  /** Fetches AccountBOs for the current customer */\n  getAccounts = () => {\n    BankAPI.getAPI().getAccountsForCustomer(this.props.customer.getID()).then(accountBOs =>\n      this.setState({  // Set new state when AccountBOs have been fetched\n        accounts: accountBOs,\n        loadingInProgress: false, // loading indicator \n        loadingAccountError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          accounts: [],\n          loadingInProgress: false,\n          loadingAccountError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingAccountError: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getAccounts();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    // reload accounts if shown state changed. Occures if the CustomerListEntrys ExpansionPanel was expanded\n    // if ((this.props.show !== prevProps.show)) {\n    //   this.getAccounts();\n    // }\n  }\n\n  /** Adds an account for the current customer */\n  addAccount = () => {\n    BankAPI.getAPI().addAccountForCustomer(this.props.customer.getID()).then(accountBO => {\n      // console.log(accountBO)\n      this.setState({  // Set new state when AccountBOs have been fetched\n        accounts: [...this.state.accounts, accountBO],\n        loadingInProgress: false, // loading indicator \n        addingAccountError: null\n      })\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        accounts: [],\n        loadingInProgress: false,\n        addingAccountError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      addingAccountError: null\n    });\n  }\n\n  /** Handles onAccountDelete events from an AccountListEntry  */\n  deleteAccountHandler = (deletedAccount) => {\n    // console.log(deletedAccount.getID());\n    this.setState({\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\n    })\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer } = this.props;\n    // Use the states customer\n    const { accounts, loadingInProgress, loadingAccountError, addingAccountError } = this.state;\n\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n        <List className={classes.accountList}>\n          {\n            accounts.map(account => <AccountListEntry key={account.getID()} customer={customer} account={account} onAccountDeleted={this.deleteAccountHandler}\n              show={this.props.show} />)\n          }\n          <ListItem>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={loadingAccountError} contextErrorMsg={`List of accounts for customer ${customer.getID()} could not be loaded.`} onReload={this.getAccounts} />\n            <ContextErrorMessage error={addingAccountError} contextErrorMsg={`Account for customer ${customer.getID()} could not be added.`} onReload={this.addAccount} />\n          </ListItem>\n        </List>\n        <Button className={classes.addAccountButton} variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addAccount}>\n          Add Account\n        </Button>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  accountList: {\n    marginBottom: theme.spacing(2),\n  },\n  addAccountButton: {\n    position: 'absolute',\n    right: theme.spacing(3),\n    bottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nAccountList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO of this AccountList */\n  customer: PropTypes.object.isRequired,\n  /** If true, accounts are (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(AccountList);\n"]},"metadata":{},"sourceType":"module"}