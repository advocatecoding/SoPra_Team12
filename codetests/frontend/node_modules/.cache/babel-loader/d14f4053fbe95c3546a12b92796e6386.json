{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/AccountListEntry.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, ListItem, ListItemSecondaryAction, Link, Typography } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SwapHoriz from '@material-ui/icons/SwapHoriz';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport MoneyTransferDialog from './dialogs/MoneyTransferDialog';\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it. Links accounts \n * to a list of transactions. This is done by routing the link to /transactions and passing the CustomerBO and\n * the AccountBO as props to the AccountList component. It also shows a MoneyTransferDialog to transfer money.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * @see See Material-UIs [Link](https://material-ui.com/components/links/)\n * @see See Material-UIs React Router integration [Composition](https://material-ui.com/guides/composition/#link)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @see See [MoneyTransferDialog](#moneytransferdialog)\n * @see See [TransactionList](#transactionlist)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AccountListEntry extends Component {\n  constructor(props) {\n    super(props); // Init an empty state\n\n    this.getBalance = () => {\n      BankAPI.getAPI().getBalanceOfAccount(this.props.account.getID()).then(balance => this.setState({\n        balance: balance,\n        loadingInProgress: false,\n        // loading indicator \n        loadingError: null\n      })).catch(e => this.setState({\n        // Reset state with error from catch \n        balance: null,\n        loadingInProgress: false,\n        loadingError: e\n      })); // set loading to true\n\n      this.setState({\n        balance: 'loading',\n        loadingInProgress: true,\n        loadingError: null\n      });\n    };\n\n    this.deleteAccount = () => {\n      const {\n        account\n      } = this.props;\n      BankAPI.getAPI().deleteAccount(account.getID()).then(() => {\n        this.setState({\n          // Set new state when AccountBOs have been fetched\n          deletingInProgress: false,\n          // loading indicator \n          deletingError: null\n        }); // console.log(account);\n\n        this.props.onAccountDeleted(account);\n      }).catch(e => this.setState({\n        // Reset state with error from catch \n        deletingInProgress: false,\n        deletingError: e\n      })); // set loading to true\n\n      this.setState({\n        deletingInProgress: true,\n        deletingError: null\n      });\n    };\n\n    this.transferMoney = () => {\n      this.setState({\n        showMoneyTransferDialog: true\n      });\n    };\n\n    this.moneyTransferDialogClosed = transaction => {\n      this.setState({\n        showMoneyTransferDialog: false\n      });\n\n      if (transaction) {\n        // Transaction is not null and therefore was performed\n        this.getBalance();\n      }\n    };\n\n    this.state = {\n      balance: '',\n      loadingInProgress: false,\n      deletingInProgress: false,\n      loadingError: null,\n      deletingError: null,\n      showMoneyTransferDialog: false\n    };\n  }\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n\n\n  componentDidMount() {\n    // load initial balance\n    this.getBalance();\n  }\n  /** Lifecycle method, which is called when the component was updated */\n\n\n  componentDidUpdate(prevProps) {\n    if (this.props.show && this.props.show !== prevProps.show) {\n      this.getBalance();\n    }\n  }\n  /** gets the balance for this account */\n\n\n  /** Renders the component */\n  render() {\n    const {\n      classes,\n      customer,\n      account\n    } = this.props;\n    const {\n      loadingInProgress,\n      deletingInProgress,\n      loadingError,\n      deletingError,\n      balance,\n      showMoneyTransferDialog\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.accountEntry,\n          children: /*#__PURE__*/_jsxDEV(Link, {\n            component: RouterLink,\n            to: {\n              pathname: '/transactions',\n              owner: {\n                customer: customer,\n                account: account\n              }\n            },\n            children: [\"Account ID: \", account.getID()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          color: \"textSecondary\",\n          children: [\"Balance: \", !isNaN(balance) ? BankAPI.getAPI().getCurrencyFormatter().format(balance) : balance]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ListItemSecondaryAction, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            className: classes.buttonMargin,\n            variant: \"outlined\",\n            color: \"primary\",\n            size: \"small\",\n            startIcon: /*#__PURE__*/_jsxDEV(SwapHoriz, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 113\n            }, this),\n            onClick: this.transferMoney,\n            children: \"Transfer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            color: \"secondary\",\n            size: \"small\",\n            startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 63\n            }, this),\n            onClick: this.deleteAccount,\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 151,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ListItem, {\n        children: [/*#__PURE__*/_jsxDEV(LoadingProgress, {\n          show: loadingInProgress || deletingInProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n          error: loadingError,\n          contextErrorMsg: `The balance of account ${account.getID()} could not be loaded.`,\n          onReload: this.getBalance\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 158,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n          error: deletingError,\n          contextErrorMsg: `The account ${account.getID()} could not be deleted.`,\n          onReload: this.deleteAccount\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 159,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MoneyTransferDialog, {\n        show: showMoneyTransferDialog,\n        customer: customer,\n        account: account,\n        onClose: this.moneyTransferDialogClosed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 161,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  },\n  buttonMargin: {\n    marginRight: theme.spacing(2)\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0\n  }\n});\n/** PropTypes */\n\n\nAccountListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** The CustomerBO of this AccountListEntry */\n  customer: PropTypes.object.isRequired,\n\n  /** The AccountBO to be rendered */\n  account: PropTypes.object.isRequired,\n\n  /**  \n   * Event Handler function which is called after a sucessfull delete of this account. \n   * \n   * Signature: onAccountDeleted(AccountBO account); \n   */\n  onAccountDeleted: PropTypes.func.isRequired,\n\n  /** If true, balance is (re)loaded */\n  show: PropTypes.bool.isRequired\n};\nexport default withStyles(styles)(AccountListEntry);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/AccountListEntry.js"],"names":["React","Component","PropTypes","withStyles","Button","ListItem","ListItemSecondaryAction","Link","Typography","DeleteIcon","SwapHoriz","RouterLink","BankAPI","ContextErrorMessage","LoadingProgress","MoneyTransferDialog","AccountListEntry","constructor","props","getBalance","getAPI","getBalanceOfAccount","account","getID","then","balance","setState","loadingInProgress","loadingError","catch","e","deleteAccount","deletingInProgress","deletingError","onAccountDeleted","transferMoney","showMoneyTransferDialog","moneyTransferDialogClosed","transaction","state","componentDidMount","componentDidUpdate","prevProps","show","render","classes","customer","accountEntry","pathname","owner","isNaN","getCurrencyFormatter","format","buttonMargin","styles","theme","root","width","marginRight","spacing","fontSize","typography","pxToRem","flexBasis","flexShrink","propTypes","object","isRequired","func","bool"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, ListItem, ListItemSecondaryAction, Link, Typography } from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SwapHoriz from '@material-ui/icons/SwapHoriz';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport MoneyTransferDialog from './dialogs/MoneyTransferDialog';\n\n\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it. Links accounts \n * to a list of transactions. This is done by routing the link to /transactions and passing the CustomerBO and\n * the AccountBO as props to the AccountList component. It also shows a MoneyTransferDialog to transfer money.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * @see See Material-UIs [Link](https://material-ui.com/components/links/)\n * @see See Material-UIs React Router integration [Composition](https://material-ui.com/guides/composition/#link)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @see See [MoneyTransferDialog](#moneytransferdialog)\n * @see See [TransactionList](#transactionlist)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountListEntry extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      balance: '',\n      loadingInProgress: false,\n      deletingInProgress: false,\n      loadingError: null,\n      deletingError: null,\n      showMoneyTransferDialog: false,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load initial balance\n    this.getBalance();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    if ((this.props.show) && (this.props.show !== prevProps.show)) {\n      this.getBalance();\n    }\n  }\n\n  /** gets the balance for this account */\n  getBalance = () => {\n    BankAPI.getAPI().getBalanceOfAccount(this.props.account.getID()).then(balance =>\n      this.setState({\n        balance: balance,\n        loadingInProgress: false, // loading indicator \n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          balance: null,\n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      balance: 'loading',\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Deletes this account */\n  deleteAccount = () => {\n    const { account } = this.props;\n    BankAPI.getAPI().deleteAccount(account.getID()).then(() => {\n      this.setState({  // Set new state when AccountBOs have been fetched\n        deletingInProgress: false, // loading indicator \n        deletingError: null\n      })\n      // console.log(account);\n      this.props.onAccountDeleted(account);\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        deletingInProgress: false,\n        deletingError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      deletingInProgress: true,\n      deletingError: null\n    });\n  }\n\n  /** Handles click events from the transfer money button */\n  transferMoney = () => {\n    this.setState({\n      showMoneyTransferDialog: true\n    });\n  }\n\n  /** Handles the onClose event from the transfer money dialog */\n  moneyTransferDialogClosed = (transaction) => {\n    this.setState({\n      showMoneyTransferDialog: false\n    });\n    if (transaction) {\n      // Transaction is not null and therefore was performed\n      this.getBalance();\n    }\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, account } = this.props;\n    const { loadingInProgress, deletingInProgress, loadingError, deletingError, balance, showMoneyTransferDialog } = this.state;\n\n    return (\n      <div>\n        <ListItem>\n          <Typography className={classes.accountEntry}>\n            <Link component={RouterLink} to={{\n              pathname: '/transactions',\n              owner: {\n                customer: customer,\n                account: account\n              }\n            }} >\n              Account ID: {account.getID()}\n            </Link>\n\n          </Typography>\n          <Typography color='textSecondary'>\n            Balance: {!isNaN(balance) ? BankAPI.getAPI().getCurrencyFormatter().format(balance) : balance}\n          </Typography>\n          <ListItemSecondaryAction>\n            <Button className={classes.buttonMargin} variant='outlined' color='primary' size='small' startIcon={<SwapHoriz />} onClick={this.transferMoney}>\n              Transfer\n            </Button>\n            <Button color='secondary' size='small' startIcon={<DeleteIcon />} onClick={this.deleteAccount}>\n              Delete\n            </Button>\n          </ListItemSecondaryAction>\n        </ListItem>\n        <ListItem>\n          <LoadingProgress show={loadingInProgress || deletingInProgress} />\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The balance of account ${account.getID()} could not be loaded.`} onReload={this.getBalance} />\n          <ContextErrorMessage error={deletingError} contextErrorMsg={`The account ${account.getID()} could not be deleted.`} onReload={this.deleteAccount} />\n        </ListItem>\n        <MoneyTransferDialog show={showMoneyTransferDialog} customer={customer} account={account} onClose={this.moneyTransferDialogClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  }, \n  buttonMargin: {\n    marginRight: theme.spacing(2),\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  }\n});\n\n/** PropTypes */\nAccountListEntry.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO of this AccountListEntry */\n  customer: PropTypes.object.isRequired,\n  /** The AccountBO to be rendered */\n  account: PropTypes.object.isRequired,\n  /**  \n   * Event Handler function which is called after a sucessfull delete of this account. \n   * \n   * Signature: onAccountDeleted(AccountBO account); \n   */\n  onAccountDeleted: PropTypes.func.isRequired,\n  /** If true, balance is (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(AccountListEntry);\n"]},"metadata":{},"sourceType":"module"}