{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/dialogs/MoneyTransferDialog.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogContent, DialogTitle, TextField, Typography, InputAdornment, MenuItem, DialogActions, Grid } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { BankAPI, TransactionBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass MoneyTransferDialog extends Component {\n  constructor(props) {\n    super(props); // Init the state\n\n    this.initialState = {\n      // TextField values\n      customerName: '',\n      transferAmount: '',\n      // search state is null\n      targetCustomers: [],\n      // The selected CustomerBO\n      selectedCustomer: null,\n      // Selected accountBO in the accounts array\n      selectedAccount: null,\n      // TextField validation errors\n      transferAmountValidationFailed: false,\n      transferAmountFieldEdited: false,\n      // Network states\n      loadingInProgress: false,\n      customerSearchError: null,\n      transactionError: null\n    };\n\n    this.searchCustomer = async () => {\n      const {\n        customerName\n      } = this.state;\n\n      if (customerName.length > 0) {\n        try {\n          // set loading to true\n          this.setState({\n            targetCustomers: [],\n            // Set empty array\n            selectedCustomer: null,\n            // the initial customer\n            loadingInProgress: true,\n            // show loading indicator\n            customerSearchError: null // disable error message\n\n          }); // Load customers first\n\n          const customers = await BankAPI.getAPI().searchCustomer(customerName); // load accounts of each customers step by step and inject the acounts into the CustomerBO\n\n          for (const customer of customers) {\n            // Load account for each found customer\n            let accounts = await BankAPI.getAPI().getAccountsForCustomer(customer.getID()); // Call sucessfull \n\n            customer.accounts = accounts;\n          } // Init the selections \n\n\n          let selectedCustomer = null;\n          let selectedAccount = null;\n\n          if (customers.length > 0) {\n            selectedCustomer = customers[0];\n          }\n\n          if (selectedCustomer.accounts.length > 0) {\n            selectedAccount = selectedCustomer.accounts[0];\n          } // Set the final state\n\n\n          this.setState({\n            targetCustomers: customers,\n            selectedCustomer: selectedCustomer,\n            // the initially selected customer\n            selectedAccount: selectedAccount,\n            // the initially selected account\n            loadingInProgress: false,\n            // disable loading indicator \n            customerSearchError: null // no error message\n\n          });\n        } catch (e) {\n          this.setState({\n            targetCustomers: [],\n            // Set empty array\n            selectedCustomer: null,\n            loadingInProgress: false,\n            // disable loading indicator \n            customerSearchError: e // show error message\n\n          });\n        }\n      } else {\n        this.setState({\n          customerNotFound: true\n        });\n      }\n    };\n\n    this.transferMoney = () => {\n      const {\n        account\n      } = this.props;\n      const {\n        selectedAccount,\n        transferAmount\n      } = this.state;\n      let amount = transferAmount.replace(/,/g, '.');\n      const transaction = new TransactionBO(account.getID(), selectedAccount.getID(), amount);\n      BankAPI.getAPI().addTransaction(transaction).then(transaction => {\n        this.setState({\n          loadingInProgress: false,\n          // disable loading indicator \n          transactionError: null // show error message\n\n        });\n        this.handleClose(transaction);\n      }).catch(e => {\n        this.setState({\n          loadingInProgress: false,\n          // disable loading indicator \n          transactionError: e // show error message\n\n        });\n      });\n      this.setState({\n        loadingInProgress: true,\n        // disable loading indicator \n        transactionError: null // show error message\n\n      });\n    };\n\n    this.handleClose = transaction => {\n      // Reset the state\n      this.setState(this.initialState);\n      this.props.onClose(transaction);\n    };\n\n    this.textFieldValueChange = event => {\n      const val = event.target.value; // Validate the amount field\n\n      if (event.target.id === 'transferAmount') {\n        let result = false;\n        let amount = val.replace(/,/g, '.');\n\n        if (amount.length === 0) {\n          // length must not be 0\n          result = true;\n        }\n\n        if (isNaN(amount)) {\n          // Its not a numer in the text field\n          result = true;\n        }\n\n        this.setState({\n          transferAmountValidationFailed: result,\n          transferAmountFieldEdited: true\n        });\n      }\n\n      this.setState({\n        [event.target.id]: val\n      });\n    };\n\n    this.customerSelectionChange = event => {\n      let customer = event.target.value;\n      let selectedAccount = null;\n\n      if (customer.accounts.length > 0) {\n        selectedAccount = customer.accounts[0];\n      }\n\n      this.setState({\n        selectedCustomer: customer,\n        selectedAccount: selectedAccount\n      });\n    };\n\n    this.accountSelectionChange = event => {\n      let selectedAccount = event.target.value;\n      this.setState({\n        selectedAccount: selectedAccount\n      });\n    };\n\n    this.state = this.initialState;\n  }\n  /** Searches for customers with a customerName and loads the corresponding accounts */\n\n\n  /** Renders the component */\n  render() {\n    const {\n      classes,\n      show,\n      customer,\n      account\n    } = this.props;\n    const {\n      customerName,\n      targetCustomers,\n      selectedCustomer,\n      customerNotFound,\n      selectedAccount,\n      loadingInProgress,\n      transferAmountValidationFailed,\n      transferAmountFieldEdited,\n      customerSearchError,\n      transactionError\n    } = this.state;\n    return show ? /*#__PURE__*/_jsxDEV(Dialog, {\n      open: show,\n      onClose: this.handleClose,\n      maxWidth: \"md\",\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"form-dialog-title\",\n        children: [\"Transfer money\", /*#__PURE__*/_jsxDEV(IconButton, {\n          className: classes.closeButton,\n          onClick: this.handleClose,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          spacing: 1,\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: [\"From customer: \", customer.getLastName(), \", \", customer.getFirstName()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 209,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Grid, {\n            item: true,\n            xs: 6,\n            children: /*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"body1\",\n              children: [\"Account: \", account.getID()]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 17\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 213,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body1\",\n          children: [/*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 220,\n            columnNumber: 15\n          }, this), \"to customer:\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 219,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          noValidate: true,\n          autoComplete: \"off\",\n          children: [// show a search text field if there are no searchedCustomer yet\n          targetCustomers.length === 0 ? /*#__PURE__*/_jsxDEV(TextField, {\n            autoFocus: true,\n            fullWidth: true,\n            margin: \"normal\",\n            type: \"text\",\n            required: true,\n            id: \"customerName\",\n            label: \"Customer name:\",\n            onChange: this.textFieldValueChange,\n            onBlur: this.searchCustomer,\n            error: customerNotFound,\n            helperText: customerNotFound ? 'No customers with the given name have been found' : ' ',\n            InputProps: {\n              endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: this.searchCustomer,\n                  children: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 236,\n                    columnNumber: 27\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 235,\n                  columnNumber: 25\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 234,\n                columnNumber: 37\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 228,\n            columnNumber: 19\n          }, this) :\n          /*#__PURE__*/\n          // Show a selection of targetCustomers, if there are any. Provide no search button. \n          _jsxDEV(TextField, {\n            select: true,\n            autoFocus: true,\n            fullWidth: true,\n            margin: \"normal\",\n            type: \"text\",\n            required: true,\n            id: \"customerName\",\n            label: \"Customer name:\",\n            value: selectedCustomer,\n            onChange: this.customerSelectionChange,\n            children: this.state.targetCustomers.map(customer => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: customer,\n              children: [customer.getLastName(), \", \", customer.getFirstName()]\n            }, customer.getID(), true, {\n              fileName: _jsxFileName,\n              lineNumber: 247,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 19\n          }, this), // Render the account select field\n          selectedAccount ? /*#__PURE__*/_jsxDEV(TextField, {\n            select: true,\n            fullWidth: true,\n            margin: \"normal\",\n            type: \"text\",\n            required: true,\n            id: \"account\",\n            label: \"Target account:\",\n            value: selectedAccount,\n            onChange: this.accountSelectionChange,\n            children: selectedCustomer.accounts.map(account => /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: account,\n              children: account.getID()\n            }, account.getID(), false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 25\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 19\n          }, this) : /*#__PURE__*/_jsxDEV(TextField, {\n            select: true,\n            fullWidth: true,\n            margin: \"normal\",\n            type: \"text\",\n            required: true,\n            id: \"account\",\n            label: \"Target account:\",\n            value: 0,\n            onChange: this.accountSelectionChange,\n            children: /*#__PURE__*/_jsxDEV(MenuItem, {\n              value: 0,\n              children: \"No accounts found\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 272,\n              columnNumber: 21\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 19\n          }, this), /*#__PURE__*/_jsxDEV(TextField, {\n            fullWidth: true,\n            margin: \"normal\",\n            type: \"text\",\n            required: true,\n            id: \"transferAmount\",\n            label: \"Amount:\",\n            onChange: this.textFieldValueChange,\n            error: transferAmountValidationFailed,\n            helperText: transferAmountValidationFailed ? 'The amount must be a number' : ' ',\n            InputProps: {\n              startAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"start\",\n                children: BankAPI.getAPI().getCurrency()\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 283,\n                columnNumber: 35\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 278,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LoadingProgress, {\n          show: loadingInProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 288,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n          error: customerSearchError,\n          contextErrorMsg: `Customer ${customerName} could not be searched.`,\n          onReload: this.searchCustomer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 289,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n          error: transactionError,\n          contextErrorMsg: `Transaction could not be executed.`,\n          onReload: this.transferMoney\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.handleClose,\n          color: \"secondary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          disabled: !selectedCustomer || !selectedAccount || !transferAmountFieldEdited || transferAmountValidationFailed,\n          variant: \"contained\",\n          color: \"primary\",\n          onClick: this.transferMoney,\n          children: \"Transfer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 297,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this) : null;\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n/** PropTypes */\n\n\nMoneyTransferDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** The CustomerBO for whom to transfer */\n  customer: PropTypes.object.isRequired,\n\n  /** The AccountBO from which to transfer */\n  account: PropTypes.object.isRequired,\n\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the performed TransactionBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(TransactionBO transaction);\n   */\n  onClose: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(MoneyTransferDialog);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/dialogs/MoneyTransferDialog.js"],"names":["React","Component","PropTypes","withStyles","Button","IconButton","Dialog","DialogContent","DialogTitle","TextField","Typography","InputAdornment","MenuItem","DialogActions","Grid","CloseIcon","SearchIcon","BankAPI","TransactionBO","ContextErrorMessage","LoadingProgress","MoneyTransferDialog","constructor","props","initialState","customerName","transferAmount","targetCustomers","selectedCustomer","selectedAccount","transferAmountValidationFailed","transferAmountFieldEdited","loadingInProgress","customerSearchError","transactionError","searchCustomer","state","length","setState","customers","getAPI","customer","accounts","getAccountsForCustomer","getID","e","customerNotFound","transferMoney","account","amount","replace","transaction","addTransaction","then","handleClose","catch","onClose","textFieldValueChange","event","val","target","value","id","result","isNaN","customerSelectionChange","accountSelectionChange","render","classes","show","closeButton","getLastName","getFirstName","endAdornment","map","startAdornment","getCurrency","styles","theme","position","right","spacing","top","color","palette","grey","propTypes","object","isRequired","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogContent, DialogTitle, TextField, Typography, InputAdornment, MenuItem, DialogActions, Grid } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { BankAPI, TransactionBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass MoneyTransferDialog extends Component {\n\n  initialState = {\n    // TextField values\n    customerName: '',\n    transferAmount: '',\n    // search state is null\n    targetCustomers: [],\n    // The selected CustomerBO\n    selectedCustomer: null,\n    // Selected accountBO in the accounts array\n    selectedAccount: null,\n    // TextField validation errors\n    transferAmountValidationFailed: false,\n    transferAmountFieldEdited: false,\n    // Network states\n    loadingInProgress: false,\n    customerSearchError: null,\n    transactionError: null\n  };\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = this.initialState;\n  }\n\n  /** Searches for customers with a customerName and loads the corresponding accounts */\n  searchCustomer = async () => {\n    const { customerName } = this.state;\n    if (customerName.length > 0) {\n      try {\n        // set loading to true\n        this.setState({\n          targetCustomers: [],              // Set empty array\n          selectedCustomer: null,               // the initial customer\n          loadingInProgress: true,              // show loading indicator\n          customerSearchError: null             // disable error message\n        });\n\n        // Load customers first\n        const customers = await BankAPI.getAPI().searchCustomer(customerName);\n\n        // load accounts of each customers step by step and inject the acounts into the CustomerBO\n        for (const customer of customers) {\n          // Load account for each found customer\n          let accounts = await BankAPI.getAPI().getAccountsForCustomer(customer.getID());\n          // Call sucessfull \n          customer.accounts = accounts;\n        }\n\n        // Init the selections \n        let selectedCustomer = null;\n        let selectedAccount = null;\n\n        if (customers.length > 0) {\n          selectedCustomer = customers[0];\n        }\n\n        if (selectedCustomer.accounts.length > 0) {\n          selectedAccount = selectedCustomer.accounts[0];\n        }\n\n        // Set the final state\n        this.setState({\n          targetCustomers: customers,\n          selectedCustomer: selectedCustomer, // the initially selected customer\n          selectedAccount: selectedAccount,   // the initially selected account\n          loadingInProgress: false,           // disable loading indicator \n          customerSearchError: null           // no error message\n        });\n      } catch (e) {\n        this.setState({\n          targetCustomers: [],              // Set empty array\n          selectedCustomer: null,\n          loadingInProgress: false,           // disable loading indicator \n          customerSearchError: e              // show error message\n        });\n      }\n    } else {\n      this.setState({\n        customerNotFound: true\n      });\n    }\n  }\n\n  /** Executes the requested transfer transaction */\n  transferMoney = () => {\n    const { account } = this.props;\n    const { selectedAccount, transferAmount } = this.state;\n    let amount = transferAmount.replace(/,/g, '.');\n\n    const transaction = new TransactionBO(account.getID(), selectedAccount.getID(), amount);\n\n    BankAPI.getAPI().addTransaction(transaction).then(transaction => {\n      this.setState({\n        loadingInProgress: false,        // disable loading indicator \n        transactionError: null             // show error message\n      });\n      this.handleClose(transaction);\n    }).catch(e => {\n      this.setState({\n        loadingInProgress: false,        // disable loading indicator \n        transactionError: e              // show error message\n      });\n    });\n    this.setState({\n      loadingInProgress: true,        // disable loading indicator \n      transactionError: null          // show error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = (transaction) => {\n    // Reset the state\n    this.setState(this.initialState);\n    this.props.onClose(transaction);\n  }\n\n  /** Handles value changes of the forms textfields and validates the transferAmout field */\n  textFieldValueChange = (event) => {\n    const val = event.target.value;\n    // Validate the amount field\n    if (event.target.id === 'transferAmount') {\n      let result = false;\n      let amount = val.replace(/,/g, '.');\n      if (amount.length === 0) {\n        // length must not be 0\n        result = true;\n      }\n      if (isNaN(amount)) {\n        // Its not a numer in the text field\n        result = true;\n      }\n      this.setState({\n        transferAmountValidationFailed: result,\n        transferAmountFieldEdited: true\n      });\n    }\n    this.setState({\n      [event.target.id]: val\n    });\n  }\n\n  /** Handles value changes of the customer select textfield */\n  customerSelectionChange = (event) => {\n    let customer = event.target.value;\n    let selectedAccount = null;\n\n    if (customer.accounts.length > 0) {\n      selectedAccount = customer.accounts[0]\n    }\n\n    this.setState({\n      selectedCustomer: customer,\n      selectedAccount: selectedAccount,\n    });\n  }\n\n  /** Handles value changes of the customer select textfield */\n  accountSelectionChange = (event) => {\n    let selectedAccount = event.target.value;\n    this.setState({\n      selectedAccount: selectedAccount\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, show, customer, account } = this.props;\n    const { customerName, targetCustomers, selectedCustomer, customerNotFound, selectedAccount, loadingInProgress,\n      transferAmountValidationFailed, transferAmountFieldEdited, customerSearchError, transactionError } = this.state;\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='md'>\n          <DialogTitle id='form-dialog-title'>Transfer money\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={1}>\n              <Grid item xs={6}>\n                <Typography variant='body1'>\n                  From customer: {customer.getLastName()}, {customer.getFirstName()}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant='body1'>\n                  Account: {account.getID()}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Typography variant='body1'>\n              <br/>\n              to customer:\n            </Typography>\n\n            <form noValidate autoComplete='off'>\n              {\n                // show a search text field if there are no searchedCustomer yet\n                (targetCustomers.length === 0) ?\n                  <TextField autoFocus fullWidth margin='normal' type='text' required id='customerName' label='Customer name:'\n                    onChange={this.textFieldValueChange}\n                    onBlur={this.searchCustomer}\n                    error={customerNotFound}\n                    helperText={customerNotFound ? 'No customers with the given name have been found' : ' '}\n                    InputProps={{\n                      endAdornment: <InputAdornment position='end'>\n                        <IconButton onClick={this.searchCustomer}>\n                          <SearchIcon />\n                        </IconButton>\n                      </InputAdornment>,\n                    }} />\n                  :\n                  // Show a selection of targetCustomers, if there are any. Provide no search button. \n                  <TextField select autoFocus fullWidth margin='normal' type='text' required id='customerName' label='Customer name:'\n                    value={selectedCustomer}\n                    onChange={this.customerSelectionChange}>\n                    {\n                      this.state.targetCustomers.map((customer) => (\n                        <MenuItem key={customer.getID()} value={customer}>\n                          {customer.getLastName()}, {customer.getFirstName()}\n                        </MenuItem>\n                      ))\n                    }\n                  </TextField>\n              }\n              {\n                // Render the account select field\n                selectedAccount ?\n                  <TextField select fullWidth margin='normal' type='text' required id='account' label='Target account:'\n                    value={selectedAccount}\n                    onChange={this.accountSelectionChange}>\n                    {\n                      selectedCustomer.accounts.map((account) => (\n                        <MenuItem key={account.getID()} value={account}>\n                          {account.getID()}\n                        </MenuItem>\n                      ))\n                    }\n                  </TextField>\n                  :\n                  <TextField select fullWidth margin='normal' type='text' required id='account' label='Target account:'\n                    value={0}\n                    onChange={this.accountSelectionChange}>\n                    <MenuItem value={0}>\n                      No accounts found\n                  </MenuItem>\n                  </TextField>\n              }\n\n              <TextField fullWidth margin='normal' type='text' required id='transferAmount' label='Amount:'\n                onChange={this.textFieldValueChange}\n                error={transferAmountValidationFailed}\n                helperText={transferAmountValidationFailed ? 'The amount must be a number' : ' '}\n                InputProps={{\n                  startAdornment: <InputAdornment position='start'>{BankAPI.getAPI().getCurrency()}\n                  </InputAdornment>,\n                }}\n              />\n            </form>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={customerSearchError} contextErrorMsg={`Customer ${customerName} could not be searched.`} onReload={this.searchCustomer} />\n            <ContextErrorMessage error={transactionError} contextErrorMsg={`Transaction could not be executed.`} onReload={this.transferMoney} />\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            <Button disabled={!selectedCustomer || !selectedAccount || !transferAmountFieldEdited || transferAmountValidationFailed} variant='contained' color='primary' onClick={this.transferMoney}>\n              Transfer\n            </Button>\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nMoneyTransferDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO for whom to transfer */\n  customer: PropTypes.object.isRequired,\n  /** The AccountBO from which to transfer */\n  account: PropTypes.object.isRequired,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the performed TransactionBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(TransactionBO transaction);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(MoneyTransferDialog);\n\n"]},"metadata":{},"sourceType":"module"}