{"ast":null,"code":"import _defineProperty from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _classCallCheck from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import{withStyles,Button,IconButton,Dialog,DialogTitle,DialogContent,DialogContentText,DialogActions,TextField}from'@material-ui/core';import CloseIcon from'@material-ui/icons/Close';import{BankAPI,CustomerBO}from'../../api';import ContextErrorMessage from'./ContextErrorMessage';import LoadingProgress from'./LoadingProgress';/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CustomerForm=/*#__PURE__*/function(_Component){_inherits(CustomerForm,_Component);var _super=_createSuper(CustomerForm);function CustomerForm(props){var _this;_classCallCheck(this,CustomerForm);_this=_super.call(this,props);_this.addCustomer=function(){var newCustomer=new CustomerBO(_this.state.firstName,_this.state.lastName);BankAPI.getAPI().addCustomer(newCustomer).then(function(customer){// Backend call sucessfull\n// reinit the dialogs state for a new empty customer\n_this.setState(_this.baseState);_this.props.onClose(customer);// call the parent with the customer object from backend\n}).catch(function(e){return _this.setState({updatingInProgress:false,// disable loading indicator \nupdatingError:e// show error message\n});});// set loading to true\n_this.setState({updatingInProgress:true,// show loading indicator\nupdatingError:null// disable error message\n});};_this.updateCustomer=function(){// clone the original cutomer, in case the backend call fails\nvar updatedCustomer=Object.assign(new CustomerBO(),_this.props.customer);// set the new attributes from our dialog\nupdatedCustomer.setFirstName(_this.state.firstName);updatedCustomer.setLastName(_this.state.lastName);BankAPI.getAPI().updateCustomer(updatedCustomer).then(function(customer){_this.setState({updatingInProgress:false,// disable loading indicator  \nupdatingError:null// no error message\n});// keep the new state as base state\n_this.baseState.firstName=_this.state.firstName;_this.baseState.lastName=_this.state.lastName;_this.props.onClose(updatedCustomer);// call the parent with the new customer\n}).catch(function(e){return _this.setState({updatingInProgress:false,// disable loading indicator \nupdatingError:e// show error message\n});});// set loading to true\n_this.setState({updatingInProgress:true,// show loading indicator\nupdatingError:null// disable error message\n});};_this.textFieldValueChange=function(event){var _this$setState;var value=event.target.value;var error=false;if(value.trim().length===0){error=true;}_this.setState((_this$setState={},_defineProperty(_this$setState,event.target.id,event.target.value),_defineProperty(_this$setState,event.target.id+'ValidationFailed',error),_defineProperty(_this$setState,event.target.id+'Edited',true),_this$setState));};_this.handleClose=function(){// Reset the state\n_this.setState(_this.baseState);_this.props.onClose(null);};var fn='',ln='';if(props.customer){fn=props.customer.getFirstName();ln=props.customer.getLastName();}// Init the state\n_this.state={firstName:fn,firstNameValidationFailed:false,firstNameEdited:false,lastName:ln,lastNameValidationFailed:false,lastNameEdited:false,addingInProgress:false,updatingInProgress:false,addingError:null,updatingError:null};// save this state for canceling\n_this.baseState=_this.state;return _this;}/** Adds the customer */_createClass(CustomerForm,[{key:\"render\",value:/** Renders the component */function render(){var _this$props=this.props,classes=_this$props.classes,customer=_this$props.customer,show=_this$props.show;var _this$state=this.state,firstName=_this$state.firstName,firstNameValidationFailed=_this$state.firstNameValidationFailed,firstNameEdited=_this$state.firstNameEdited,lastName=_this$state.lastName,lastNameValidationFailed=_this$state.lastNameValidationFailed,lastNameEdited=_this$state.lastNameEdited,addingInProgress=_this$state.addingInProgress,addingError=_this$state.addingError,updatingInProgress=_this$state.updatingInProgress,updatingError=_this$state.updatingError;var title='';var header='';if(customer){// customer defindet, so ist an edit dialog\ntitle='Update a customer';header=\"Customer ID: \".concat(customer.getID());}else{title='Create a new customer';header='Enter customer data';}return show?/*#__PURE__*/_jsxs(Dialog,{open:show,onClose:this.handleClose,maxWidth:\"xs\",children:[/*#__PURE__*/_jsxs(DialogTitle,{id:\"form-dialog-title\",children:[title,/*#__PURE__*/_jsx(IconButton,{className:classes.closeButton,onClick:this.handleClose,children:/*#__PURE__*/_jsx(CloseIcon,{})})]}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsx(DialogContentText,{children:header}),/*#__PURE__*/_jsxs(\"form\",{className:classes.root,noValidate:true,autoComplete:\"off\",children:[/*#__PURE__*/_jsx(TextField,{autoFocus:true,type:\"text\",required:true,fullWidth:true,margin:\"normal\",id:\"firstName\",label:\"First name:\",value:firstName,onChange:this.textFieldValueChange,error:firstNameValidationFailed,helperText:firstNameValidationFailed?'The first name must contain at least one character':' '}),/*#__PURE__*/_jsx(TextField,{type:\"text\",required:true,fullWidth:true,margin:\"normal\",id:\"lastName\",label:\"Last name:\",value:lastName,onChange:this.textFieldValueChange,error:lastNameValidationFailed,helperText:lastNameValidationFailed?'The last name must contain at least one character':' '})]}),/*#__PURE__*/_jsx(LoadingProgress,{show:addingInProgress||updatingInProgress}),// Show error message in dependency of customer prop\ncustomer?/*#__PURE__*/_jsx(ContextErrorMessage,{error:updatingError,contextErrorMsg:\"The customer \".concat(customer.getID(),\" could not be updated.\"),onReload:this.updateCustomer}):/*#__PURE__*/_jsx(ContextErrorMessage,{error:addingError,contextErrorMsg:\"The customer could not be added.\",onReload:this.addCustomer})]}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:this.handleClose,color:\"secondary\",children:\"Cancel\"}),// If a customer is given, show an update button, else an add button\ncustomer?/*#__PURE__*/_jsx(Button,{disabled:firstNameValidationFailed||lastNameValidationFailed,variant:\"contained\",onClick:this.updateCustomer,color:\"primary\",children:\"Update\"}):/*#__PURE__*/_jsx(Button,{disabled:firstNameValidationFailed||!firstNameEdited||lastNameValidationFailed||!lastNameEdited,variant:\"contained\",onClick:this.addCustomer,color:\"primary\",children:\"Add\"})]})]}):null;}}]);return CustomerForm;}(Component);/** Component specific styles */var styles=function styles(theme){return{root:{width:'100%'},closeButton:{position:'absolute',right:theme.spacing(1),top:theme.spacing(1),color:theme.palette.grey[500]}};};/** PropTypes */export default withStyles(styles)(CustomerForm);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/dialogs/CustomerForm.js"],"names":["React","Component","withStyles","Button","IconButton","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","TextField","CloseIcon","BankAPI","CustomerBO","ContextErrorMessage","LoadingProgress","CustomerForm","props","addCustomer","newCustomer","state","firstName","lastName","getAPI","then","customer","setState","baseState","onClose","catch","e","updatingInProgress","updatingError","updateCustomer","updatedCustomer","Object","assign","setFirstName","setLastName","textFieldValueChange","event","value","target","error","trim","length","id","handleClose","fn","ln","getFirstName","getLastName","firstNameValidationFailed","firstNameEdited","lastNameValidationFailed","lastNameEdited","addingInProgress","addingError","classes","show","title","header","getID","closeButton","root","styles","theme","width","position","right","spacing","top","color","palette","grey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI, CustomerBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerForm extends Component {\n\n  constructor(props) {\n    super(props);\n\n    let fn = '', ln = '';\n    if (props.customer) {\n      fn = props.customer.getFirstName();\n      ln = props.customer.getLastName();\n    }\n\n    // Init the state\n    this.state = {\n      firstName: fn,\n      firstNameValidationFailed: false,\n      firstNameEdited: false,\n      lastName: ln,\n      lastNameValidationFailed: false,\n      lastNameEdited: false,\n      addingInProgress: false,\n      updatingInProgress: false,\n      addingError: null,\n      updatingError: null\n    };\n    // save this state for canceling\n    this.baseState = this.state;\n  }\n\n  /** Adds the customer */\n  addCustomer = () => {\n    let newCustomer = new CustomerBO(this.state.firstName, this.state.lastName);\n    BankAPI.getAPI().addCustomer(newCustomer).then(customer => {\n      // Backend call sucessfull\n      // reinit the dialogs state for a new empty customer\n      this.setState(this.baseState);\n      this.props.onClose(customer); // call the parent with the customer object from backend\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,    // disable loading indicator \n        updatingError: e              // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,       // show loading indicator\n      updatingError: null             // disable error message\n    });\n  }\n\n  /** Updates the customer */\n  updateCustomer = () => {\n    // clone the original cutomer, in case the backend call fails\n    let updatedCustomer = Object.assign(new CustomerBO(), this.props.customer);\n    // set the new attributes from our dialog\n    updatedCustomer.setFirstName(this.state.firstName);\n    updatedCustomer.setLastName(this.state.lastName);\n    BankAPI.getAPI().updateCustomer(updatedCustomer).then(customer => {\n      this.setState({\n        updatingInProgress: false,              // disable loading indicator  \n        updatingError: null                     // no error message\n      });\n      // keep the new state as base state\n      this.baseState.firstName = this.state.firstName;\n      this.baseState.lastName = this.state.lastName;\n      this.props.onClose(updatedCustomer);      // call the parent with the new customer\n    }).catch(e =>\n      this.setState({\n        updatingInProgress: false,              // disable loading indicator \n        updatingError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      updatingInProgress: true,                 // show loading indicator\n      updatingError: null                       // disable error message\n    });\n  }\n\n  /** Handles value changes of the forms textfields and validates them */\n  textFieldValueChange = (event) => {\n    const value = event.target.value;\n\n    let error = false;\n    if (value.trim().length === 0) {\n      error = true;\n    }\n\n    this.setState({\n      [event.target.id]: event.target.value,\n      [event.target.id + 'ValidationFailed']: error,\n      [event.target.id + 'Edited']: true\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // Reset the state\n    this.setState(this.baseState);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, show } = this.props;\n    const { firstName, firstNameValidationFailed, firstNameEdited, lastName, lastNameValidationFailed, lastNameEdited, addingInProgress,\n      addingError, updatingInProgress, updatingError } = this.state;\n\n    let title = '';\n    let header = '';\n\n    if (customer) {\n      // customer defindet, so ist an edit dialog\n      title = 'Update a customer';\n      header = `Customer ID: ${customer.getID()}`;\n    } else {\n      title = 'Create a new customer';\n      header = 'Enter customer data';\n    }\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='xs'>\n          <DialogTitle id='form-dialog-title'>{title}\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              {header}\n            </DialogContentText>\n            <form className={classes.root} noValidate autoComplete='off'>\n              <TextField autoFocus type='text' required fullWidth margin='normal' id='firstName' label='First name:' value={firstName} \n                onChange={this.textFieldValueChange} error={firstNameValidationFailed} \n                helperText={firstNameValidationFailed ? 'The first name must contain at least one character' : ' '} />\n              <TextField type='text' required fullWidth margin='normal' id='lastName' label='Last name:' value={lastName}\n                onChange={this.textFieldValueChange} error={lastNameValidationFailed}\n                helperText={lastNameValidationFailed ? 'The last name must contain at least one character' : ' '} />\n            </form>\n            <LoadingProgress show={addingInProgress || updatingInProgress} />\n            {\n              // Show error message in dependency of customer prop\n              customer ?\n                <ContextErrorMessage error={updatingError} contextErrorMsg={`The customer ${customer.getID()} could not be updated.`} onReload={this.updateCustomer} />\n                :\n                <ContextErrorMessage error={addingError} contextErrorMsg={`The customer could not be added.`} onReload={this.addCustomer} />\n            }\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            {\n              // If a customer is given, show an update button, else an add button\n              customer ?\n                <Button disabled={firstNameValidationFailed || lastNameValidationFailed} variant='contained' onClick={this.updateCustomer} color='primary'>\n                  Update\n              </Button>\n                : <Button disabled={firstNameValidationFailed || !firstNameEdited || lastNameValidationFailed || !lastNameEdited} variant='contained' onClick={this.addCustomer} color='primary'>\n                  Add\n             </Button>\n            }\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  },\n});\n\n/** PropTypes */\nCustomerForm.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be edited */\n  customer: PropTypes.object,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the edited or created CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(CustomerForm);\n"]},"metadata":{},"sourceType":"module"}