{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/AllAccountList.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountDetail from './AccountDetail';\n/**\n * Shows all accounts of the bank.\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AllAccountList extends Component {\n  constructor(props) {\n    super(props); // Init an empty state\n\n    this.loadAccounts = () => {\n      var bankApi = new BankAPI();\n      BankAPI.getAPI().getAllAccounts().then(accounts => this.setState({\n        accounts: accounts,\n        loadingInProgress: false,\n        // loading indicator \n        loadingError: null\n      })).catch(e => this.setState({\n        // Reset state with error from catch \n        loadingInProgress: false,\n        loadingError: e\n      })); // set loading to true\n\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    };\n\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingError: null\n    };\n  }\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n\n\n  componentDidMount() {\n    this.loadAccounts();\n  }\n  /** gets the account list for this account */\n\n\n  /** Renders the component */\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      accounts,\n      loadingInProgress,\n      loadingError\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [accounts.map(account => /*#__PURE__*/_jsxDEV(AccountDetail, {\n        customerID: account.getOwner().toString(),\n        accountID: account.getID().toString()\n      }, account.getID(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 37\n      }, this)), /*#__PURE__*/_jsxDEV(LoadingProgress, {\n        show: loadingInProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n        error: loadingError,\n        contextErrorMsg: `The list of all accounts of the bank could not be loaded.`,\n        onReload: this.loadAccounts\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  }\n});\n/** PropTypes */\n\n\nAllAccountList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(AllAccountList);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/AllAccountList.js"],"names":["React","Component","PropTypes","withStyles","BankAPI","ContextErrorMessage","LoadingProgress","AccountDetail","AllAccountList","constructor","props","loadAccounts","bankApi","getAPI","getAllAccounts","then","accounts","setState","loadingInProgress","loadingError","catch","e","state","componentDidMount","render","classes","root","map","account","getOwner","toString","getID","styles","theme","width","propTypes","object","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,mBAA3B;AACA,SAASC,OAAT,QAAwB,QAAxB;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,eAAP,MAA4B,2BAA5B;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA;AACA;AACA;AACA;AACA;;;;AACA,MAAMC,cAAN,SAA6BP,SAA7B,CAAuC;AAErCQ,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN,EADiB,CAGjB;;AAHiB,SAiBnBC,YAjBmB,GAiBJ,MAAM;AACnB,UAAIC,OAAO,GAAG,IAAIR,OAAJ,EAAd;AACAA,MAAAA,OAAO,CAACS,MAAR,GAAiBC,cAAjB,GAAkCC,IAAlC,CAAuCC,QAAQ,IAC7C,KAAKC,QAAL,CAAc;AACZD,QAAAA,QAAQ,EAAEA,QADE;AAEZE,QAAAA,iBAAiB,EAAE,KAFP;AAEc;AAC1BC,QAAAA,YAAY,EAAE;AAHF,OAAd,CADF,EAKMC,KALN,CAKYC,CAAC,IACT,KAAKJ,QAAL,CAAc;AAAE;AACdC,QAAAA,iBAAiB,EAAE,KADP;AAEZC,QAAAA,YAAY,EAAEE;AAFF,OAAd,CANJ,EAFmB,CAcnB;;AACA,WAAKJ,QAAL,CAAc;AACZC,QAAAA,iBAAiB,EAAE,IADP;AAEZC,QAAAA,YAAY,EAAE;AAFF,OAAd;AAID,KApCkB;;AAIjB,SAAKG,KAAL,GAAa;AACXN,MAAAA,QAAQ,EAAE,EADC;AAEXE,MAAAA,iBAAiB,EAAE,KAFR;AAGXC,MAAAA,YAAY,EAAE;AAHH,KAAb;AAKD;AAED;;;AACAI,EAAAA,iBAAiB,GAAG;AAClB,SAAKZ,YAAL;AACD;AAED;;;AAsBA;AACAa,EAAAA,MAAM,GAAG;AACP,UAAM;AAAEC,MAAAA;AAAF,QAAc,KAAKf,KAAzB;AACA,UAAM;AAAEM,MAAAA,QAAF;AAAYE,MAAAA,iBAAZ;AAA+BC,MAAAA;AAA/B,QAAgD,KAAKG,KAA3D;AAEA,wBACE;AAAK,MAAA,SAAS,EAAEG,OAAO,CAACC,IAAxB;AAAA,iBAEMV,QAAQ,CAACW,GAAT,CAAaC,OAAO,iBAAI,QAAC,aAAD;AACxB,QAAA,UAAU,EAAEA,OAAO,CAACC,QAAR,GAAmBC,QAAnB,EADY;AACmB,QAAA,SAAS,EAAEF,OAAO,CAACG,KAAR,GAAgBD,QAAhB;AAD9B,SAAoBF,OAAO,CAACG,KAAR,EAApB;AAAA;AAAA;AAAA;AAAA,cAAxB,CAFN,eAKI,QAAC,eAAD;AAAiB,QAAA,IAAI,EAAEb;AAAvB;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI,QAAC,mBAAD;AAAqB,QAAA,KAAK,EAAEC,YAA5B;AAA0C,QAAA,eAAe,EAAG,2DAA5D;AAAwH,QAAA,QAAQ,EAAE,KAAKR;AAAvI;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AAvDoC;AA0DvC;;;AACA,MAAMqB,MAAM,GAAGC,KAAK,KAAK;AACvBP,EAAAA,IAAI,EAAE;AACJQ,IAAAA,KAAK,EAAE;AADH;AADiB,CAAL,CAApB;AAMA;;;AACA1B,cAAc,CAAC2B,SAAf,GAA2B;AACzB;AACAV,EAAAA,OAAO,EAAEvB,SAAS,CAACkC,MAAV,CAAiBC;AAFD,CAA3B;AAKA,eAAelC,UAAU,CAAC6B,MAAD,CAAV,CAAmBxB,cAAnB,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountDetail from './AccountDetail';\n\n/**\n * Shows all accounts of the bank.\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AllAccountList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init an empty state\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingError: null,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.loadAccounts();\n  }\n\n  /** gets the account list for this account */\n  loadAccounts = () => {\n    var bankApi = new BankAPI\n    BankAPI.getAPI().getAllAccounts().then(accounts =>\n      this.setState({\n        accounts: accounts,\n        loadingInProgress: false, // loading indicator \n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const { accounts, loadingInProgress, loadingError } = this.state;\n\n    return (\n      <div className={classes.root}>\n          {\n            accounts.map(account => <AccountDetail key={account.getID()} \n            customerID={account.getOwner().toString()} accountID={account.getID().toString()} />)\n          }\n          <LoadingProgress show={loadingInProgress} />\n          <ContextErrorMessage error={loadingError} contextErrorMsg={`The list of all accounts of the bank could not be loaded.`} onReload={this.loadAccounts} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  }\n});\n\n/** PropTypes */\nAllAccountList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n}\n\nexport default withStyles(styles)(AllAccountList);\n"]},"metadata":{},"sourceType":"module"}