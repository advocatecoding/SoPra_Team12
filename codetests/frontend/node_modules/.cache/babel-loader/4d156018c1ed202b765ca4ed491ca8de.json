{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/Users/macbookpro/Desktop/SoPra_Team12/codetests/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/Users/macbookpro/Desktop/SoPra_Team12/codetests/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _jsxFileName = \"/Users/macbookpro/Desktop/SoPra_Team12/codetests/frontend/src/App.js\";\nimport React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Container } from '@material-ui/core';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport SignIn from './SignIn';\nimport Start from './Start';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar _firebaseConfig = /*#__PURE__*/_classPrivateFieldLooseKey(\"firebaseConfig\");\n\nclass App extends React.Component {\n  /** Constructor of the app, which initializes firebase  */\n  constructor(props) {\n    super(props); // Init an empty state\n\n    Object.defineProperty(this, _firebaseConfig, {\n      writable: true,\n      value: {\n        apiKey: \"AIzaSyDYY1X2Mtxg5xeSHsuFWNK8vuw_qwAfgM4\",\n        authDomain: \"bankbeispiel-426c2.firebaseapp.com\",\n        projectId: \"bankbeispiel-426c2\",\n        storageBucket: \"bankbeispiel-426c2.appspot.com\",\n        messagingSenderId: \"54183409381\",\n        appId: \"1:54183409381:web:0a9e41063984f7d3fb860c\"\n      }\n    });\n\n    this.handleAuthStateChange = user => {\n      if (user) {\n        this.setState({\n          authLoading: true\n        }); // The user is signed in\n\n        user.getIdToken().then(token => {\n          // Add the token to the browser's cookies. The server will then be\n          // able to verify the token against the API.\n          // SECURITY NOTE: As cookies can easily be modified, only put the\n          // token (which is verified server-side) in a cookie; do not add other\n          // user information.\n          document.cookie = `token=${token};path=/`; // Set the user not before the token arrived \n\n          this.setState({\n            currentUser: user,\n            authError: null,\n            authLoading: false\n          });\n        }).catch(e => {\n          this.setState({\n            authError: e,\n            authLoading: false\n          });\n        });\n      } else {\n        // User has logged out, so clear the id token\n        document.cookie = 'token=;path=/'; // Set the logged out user to null\n\n        this.setState({\n          currentUser: null,\n          authLoading: false\n        });\n      }\n    };\n\n    this.handleSignIn = () => {\n      this.setState({\n        authLoading: true\n      });\n      const provider = new firebase.auth.GoogleAuthProvider();\n      firebase.auth().signInWithRedirect(provider);\n    };\n\n    this.state = {\n      currentUser: null,\n      appError: null,\n      authError: null,\n      authLoading: false\n    };\n  }\n  /** \n   * Create an error boundary for this app and recieve all errors from below the component tree.\n  \t */\n\n\n  static getDerivedStateFromError(error) {\n    // Update state so the next render will show the fallback UI.\n    return {\n      appError: error\n    };\n  }\n  /** Handles firebase users logged in state changes  */\n\n\n  /**\n   * Lifecycle method, which is called when the component gets inserted into the browsers DOM.\n   * Initializes the firebase SDK.\n   */\n  componentDidMount() {\n    firebase.initializeApp(_classPrivateFieldLooseBase(this, _firebaseConfig)[_firebaseConfig]);\n    firebase.auth().languageCode = 'en';\n    firebase.auth().onAuthStateChanged(this.handleAuthStateChange);\n  }\n  /** Renders the whole app */\n\n\n  render() {\n    const {\n      currentUser\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Router, {\n      basename: process.env.PUBLIC_URL,\n      children: /*#__PURE__*/_jsxDEV(Container, {\n        maxWidth: \"md\",\n        children: // Is a user signed in?\n        currentUser ? /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(Start, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 10\n          }, this)\n        }, void 0, false) :\n        /*#__PURE__*/\n        // else show the sign in page\n        _jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(SignIn, {\n            onSignIn: this.handleSignIn\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 117,\n            columnNumber: 10\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 6\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/macbookpro/Desktop/SoPra_Team12/codetests/frontend/src/App.js"],"names":["React","BrowserRouter","Router","Container","firebase","SignIn","Start","App","Component","constructor","props","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","handleAuthStateChange","user","setState","authLoading","getIdToken","then","token","document","cookie","currentUser","authError","catch","e","handleSignIn","provider","auth","GoogleAuthProvider","signInWithRedirect","state","appError","getDerivedStateFromError","error","componentDidMount","initializeApp","languageCode","onAuthStateChanged","render","process","env","PUBLIC_URL"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Container } from '@material-ui/core';\nimport firebase from 'firebase/compat/app';\nimport 'firebase/compat/auth';\nimport SignIn from './SignIn';\nimport Start from './Start';\n\n\nclass App extends React.Component {\n\n\t#firebaseConfig = {\n\t\tapiKey: \"AIzaSyDYY1X2Mtxg5xeSHsuFWNK8vuw_qwAfgM4\",\n\t\tauthDomain: \"bankbeispiel-426c2.firebaseapp.com\",\n\t\tprojectId: \"bankbeispiel-426c2\",\n\t\tstorageBucket: \"bankbeispiel-426c2.appspot.com\",\n\t\tmessagingSenderId: \"54183409381\",\n\t\tappId: \"1:54183409381:web:0a9e41063984f7d3fb860c\"\n\t  };\n\n\t/** Constructor of the app, which initializes firebase  */\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\t// Init an empty state\n\t\tthis.state = {\n\t\t\tcurrentUser: null,\n\t\t\tappError: null,\n\t\t\tauthError: null,\n\t\t\tauthLoading: false\n\t\t};\n\t}\n\n\t/** \n\t * Create an error boundary for this app and recieve all errors from below the component tree.\n \t */\n\tstatic getDerivedStateFromError(error) {\n\t\t// Update state so the next render will show the fallback UI.\n\t\treturn { appError: error };\n\t}\n\n\t/** Handles firebase users logged in state changes  */\n\thandleAuthStateChange = user => {\n\t\tif (user) {\n\t\t\tthis.setState({\n\t\t\t\tauthLoading: true\n\t\t\t});\n\t\t\t// The user is signed in\n\t\t\tuser.getIdToken().then(token => {\n\t\t\t\t// Add the token to the browser's cookies. The server will then be\n\t\t\t\t// able to verify the token against the API.\n\t\t\t\t// SECURITY NOTE: As cookies can easily be modified, only put the\n\t\t\t\t// token (which is verified server-side) in a cookie; do not add other\n\t\t\t\t// user information.\n\t\t\t\tdocument.cookie = `token=${token};path=/`;\n\n\t\t\t\t// Set the user not before the token arrived \n\t\t\t\tthis.setState({\n\t\t\t\t\tcurrentUser: user,\n\t\t\t\t\tauthError: null,\n\t\t\t\t\tauthLoading: false\n\t\t\t\t});\n\t\t\t}).catch(e => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tauthError: e,\n\t\t\t\t\tauthLoading: false\n\t\t\t\t});\n\t\t\t});\n\t\t} else {\n\t\t\t// User has logged out, so clear the id token\n\t\t\tdocument.cookie = 'token=;path=/';\n\n\t\t\t// Set the logged out user to null\n\t\t\tthis.setState({\n\t\t\t\tcurrentUser: null,\n\t\t\t\tauthLoading: false\n\t\t\t});\n\t\t}\n\t}\n\n  /** \n   * Handles the sign in request of the SignIn component uses the firebase.auth() component to sign in.\n\t */\n\thandleSignIn = () => {\n\t\tthis.setState({\n\t\t\tauthLoading: true\n\t\t});\n\t\tconst provider = new firebase.auth.GoogleAuthProvider();\n\t\tfirebase.auth().signInWithRedirect(provider);\n\t}\n\n\t/**\n\t * Lifecycle method, which is called when the component gets inserted into the browsers DOM.\n\t * Initializes the firebase SDK.\n\t */\n\tcomponentDidMount() {\n\t\tfirebase.initializeApp(this.#firebaseConfig);\n\t\tfirebase.auth().languageCode = 'en';\n\t\tfirebase.auth().onAuthStateChanged(this.handleAuthStateChange);\n\t}\n\n\t/** Renders the whole app */\n\trender() {\n\t\tconst { currentUser } = this.state;\n\t\treturn (\n          <Router basename={process.env.PUBLIC_URL}>\n\t\t\t\t\t<Container maxWidth='md'>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Is a user signed in?\n\t\t\t\t\t\t\tcurrentUser ?\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<Start></Start>\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t\t\t:\n\t\t\t\t\t\t\t\t// else show the sign in page\n\t\t\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t\t\t<SignIn onSignIn={this.handleSignIn} />\n\t\t\t\t\t\t\t\t</>\n\t\t\t\t\t\t}\n\t\t\t\t\t</Container>\n\t\t\t\t</Router>\n\t\t);\n\t}\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}