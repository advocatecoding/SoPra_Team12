{"ast":null,"code":"import _toConsumableArray from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _classCallCheck from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import{withStyles,ListItem}from'@material-ui/core';import{Button,List}from'@material-ui/core';import AddIcon from'@material-ui/icons/Add';import{BankAPI}from'../api';import ContextErrorMessage from'./dialogs/ContextErrorMessage';import LoadingProgress from'./dialogs/LoadingProgress';import AccountListEntry from'./AccountListEntry';/**\n * Renders a list of AccountListEntry objects.\n * \n * @see See [AccountListEntry](#accountlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AccountList=/*#__PURE__*/function(_Component){_inherits(AccountList,_Component);var _super=_createSuper(AccountList);function AccountList(props){var _this;_classCallCheck(this,AccountList);_this=_super.call(this,props);// Init the state\n_this.getAccounts=function(){BankAPI.getAPI().getAccountsForCustomer(_this.props.customer.getID()).then(function(accountBOs){return _this.setState({// Set new state when AccountBOs have been fetched\naccounts:accountBOs,loadingInProgress:false,// loading indicator \nloadingAccountError:null});}).catch(function(e){return _this.setState({// Reset state with error from catch \naccounts:[],loadingInProgress:false,loadingAccountError:e});});// set loading to true\n_this.setState({loadingInProgress:true,loadingAccountError:null});};_this.addAccount=function(){BankAPI.getAPI().addAccountForCustomer(_this.props.customer.getID()).then(function(accountBO){// console.log(accountBO)\n_this.setState({// Set new state when AccountBOs have been fetched\naccounts:[].concat(_toConsumableArray(_this.state.accounts),[accountBO]),loadingInProgress:false,// loading indicator \naddingAccountError:null});}).catch(function(e){return _this.setState({// Reset state with error from catch \naccounts:[],loadingInProgress:false,addingAccountError:e});});// set loading to true\n_this.setState({loadingInProgress:true,addingAccountError:null});};_this.deleteAccountHandler=function(deletedAccount){// console.log(deletedAccount.getID());\n_this.setState({accounts:_this.state.accounts.filter(function(account){return account.getID()!==deletedAccount.getID();})});};_this.state={accounts:[],loadingInProgress:false,loadingAccountError:null,addingAccountError:null};return _this;}/** Fetches AccountBOs for the current customer */_createClass(AccountList,[{key:\"componentDidMount\",value:/** Lifecycle method, which is called when the component gets inserted into the browsers DOM */function componentDidMount(){this.getAccounts();}/** Lifecycle method, which is called when the component was updated */},{key:\"componentDidUpdate\",value:function componentDidUpdate(prevProps){// reload accounts if shown state changed. Occures if the CustomerListEntrys ExpansionPanel was expanded\n// if ((this.props.show !== prevProps.show)) {\n//   this.getAccounts();\n// }\n}/** Adds an account for the current customer */},{key:\"render\",value:/** Renders the component */function render(){var _this2=this;var _this$props=this.props,classes=_this$props.classes,customer=_this$props.customer;// Use the states customer\nvar _this$state=this.state,accounts=_this$state.accounts,loadingInProgress=_this$state.loadingInProgress,loadingAccountError=_this$state.loadingAccountError,addingAccountError=_this$state.addingAccountError;// console.log(this.props);\nreturn/*#__PURE__*/_jsxs(\"div\",{className:classes.root,children:[/*#__PURE__*/_jsxs(List,{className:classes.accountList,children:[accounts.map(function(account){return/*#__PURE__*/_jsx(AccountListEntry,{customer:customer,account:account,onAccountDeleted:_this2.deleteAccountHandler,show:_this2.props.show},account.getID());}),/*#__PURE__*/_jsxs(ListItem,{children:[/*#__PURE__*/_jsx(LoadingProgress,{show:loadingInProgress}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:loadingAccountError,contextErrorMsg:\"List of accounts for customer \".concat(customer.getID(),\" could not be loaded.\"),onReload:this.getAccounts}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:addingAccountError,contextErrorMsg:\"Account for customer \".concat(customer.getID(),\" could not be added.\"),onReload:this.addAccount})]})]}),/*#__PURE__*/_jsx(Button,{className:classes.addAccountButton,variant:\"contained\",color:\"primary\",startIcon:/*#__PURE__*/_jsx(AddIcon,{}),onClick:this.addAccount,children:\"Add Account\"})]});}}]);return AccountList;}(Component);/** Component specific styles */var styles=function styles(theme){return{root:{width:'100%'},accountList:{marginBottom:theme.spacing(2)},addAccountButton:{position:'absolute',right:theme.spacing(3),bottom:theme.spacing(1)}};};/** PropTypes */export default withStyles(styles)(AccountList);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/AccountList.js"],"names":["React","Component","withStyles","ListItem","Button","List","AddIcon","BankAPI","ContextErrorMessage","LoadingProgress","AccountListEntry","AccountList","props","getAccounts","getAPI","getAccountsForCustomer","customer","getID","then","accountBOs","setState","accounts","loadingInProgress","loadingAccountError","catch","e","addAccount","addAccountForCustomer","accountBO","state","addingAccountError","deleteAccountHandler","deletedAccount","filter","account","prevProps","classes","root","accountList","map","show","addAccountButton","styles","theme","width","marginBottom","spacing","position","right","bottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, ListItem } from '@material-ui/core';\nimport { Button, List } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport AccountListEntry from './AccountListEntry';\n\n/**\n * Renders a list of AccountListEntry objects.\n * \n * @see See [AccountListEntry](#accountlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      accounts: [],\n      loadingInProgress: false,\n      loadingAccountError: null,\n      addingAccountError: null,\n    };\n  }\n\n  /** Fetches AccountBOs for the current customer */\n  getAccounts = () => {\n    BankAPI.getAPI().getAccountsForCustomer(this.props.customer.getID()).then(accountBOs =>\n      this.setState({  // Set new state when AccountBOs have been fetched\n        accounts: accountBOs,\n        loadingInProgress: false, // loading indicator \n        loadingAccountError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          accounts: [],\n          loadingInProgress: false,\n          loadingAccountError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingAccountError: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getAccounts();\n  }\n\n  /** Lifecycle method, which is called when the component was updated */\n  componentDidUpdate(prevProps) {\n    // reload accounts if shown state changed. Occures if the CustomerListEntrys ExpansionPanel was expanded\n    // if ((this.props.show !== prevProps.show)) {\n    //   this.getAccounts();\n    // }\n  }\n\n  /** Adds an account for the current customer */\n  addAccount = () => {\n    BankAPI.getAPI().addAccountForCustomer(this.props.customer.getID()).then(accountBO => {\n      // console.log(accountBO)\n      this.setState({  // Set new state when AccountBOs have been fetched\n        accounts: [...this.state.accounts, accountBO],\n        loadingInProgress: false, // loading indicator \n        addingAccountError: null\n      })\n    }).catch(e =>\n      this.setState({ // Reset state with error from catch \n        accounts: [],\n        loadingInProgress: false,\n        addingAccountError: e\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      addingAccountError: null\n    });\n  }\n\n  /** Handles onAccountDelete events from an AccountListEntry  */\n  deleteAccountHandler = (deletedAccount) => {\n    // console.log(deletedAccount.getID());\n    this.setState({\n      accounts: this.state.accounts.filter(account => account.getID() !== deletedAccount.getID())\n    })\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer } = this.props;\n    // Use the states customer\n    const { accounts, loadingInProgress, loadingAccountError, addingAccountError } = this.state;\n\n    // console.log(this.props);\n    return (\n      <div className={classes.root}>\n        <List className={classes.accountList}>\n          {\n            accounts.map(account => <AccountListEntry key={account.getID()} customer={customer} account={account} onAccountDeleted={this.deleteAccountHandler}\n              show={this.props.show} />)\n          }\n          <ListItem>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={loadingAccountError} contextErrorMsg={`List of accounts for customer ${customer.getID()} could not be loaded.`} onReload={this.getAccounts} />\n            <ContextErrorMessage error={addingAccountError} contextErrorMsg={`Account for customer ${customer.getID()} could not be added.`} onReload={this.addAccount} />\n          </ListItem>\n        </List>\n        <Button className={classes.addAccountButton} variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addAccount}>\n          Add Account\n        </Button>\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  accountList: {\n    marginBottom: theme.spacing(2),\n  },\n  addAccountButton: {\n    position: 'absolute',\n    right: theme.spacing(3),\n    bottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nAccountList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO of this AccountList */\n  customer: PropTypes.object.isRequired,\n  /** If true, accounts are (re)loaded */\n  show: PropTypes.bool.isRequired\n}\n\nexport default withStyles(styles)(AccountList);\n"]},"metadata":{},"sourceType":"module"}