{"ast":null,"code":"import _toConsumableArray from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";import _classCallCheck from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import React,{Component}from'react';import{withStyles,Button,TextField,InputAdornment,IconButton,Grid,Typography}from'@material-ui/core';import AddIcon from'@material-ui/icons/Add';import ClearIcon from'@material-ui/icons/Clear';import{withRouter}from'react-router-dom';import{BankAPI}from'../api';import ContextErrorMessage from'./dialogs/ContextErrorMessage';import LoadingProgress from'./dialogs/LoadingProgress';import CustomerForm from'./dialogs/CustomerForm';import CustomerListEntry from'./CustomerListEntry';/**\n * Controlls a list of CustomerListEntrys to create a accordion for each customer.  \n * \n * @see See [CustomerListEntry](#customerlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var CustomerList=/*#__PURE__*/function(_Component){_inherits(CustomerList,_Component);var _super=_createSuper(CustomerList);function CustomerList(props){var _this;_classCallCheck(this,CustomerList);_this=_super.call(this,props);// console.log(props);\n_this.getCustomers=function(){BankAPI.getAPI().getCustomers().then(function(customerBOs){return _this.setState({// Set new state when CustomerBOs have been fetched\ncustomers:customerBOs,filteredCustomers:_toConsumableArray(customerBOs),// store a copy\nloadingInProgress:false,// disable loading indicator \nerror:null});}).catch(function(e){return _this.setState({// Reset state with error from catch \ncustomers:[],loadingInProgress:false,// disable loading indicator \nerror:e});});// set loading to true\n_this.setState({loadingInProgress:true,error:null});};_this.onExpandedStateChange=function(customer){// console.log(customerID);\n// Set expandend customer entry to null by default\nvar newID=null;// If same customer entry is clicked, collapse it else expand a new one\nif(customer.getID()!==_this.state.expandedCustomerID){// Expand the customer entry with customerID\nnewID=customer.getID();}// console.log(newID);\n_this.setState({expandedCustomerID:newID});};_this.customerDeleted=function(customer){var newCustomrList=_this.state.customers.filter(function(customerFromState){return customerFromState.getID()!==customer.getID();});_this.setState({customers:newCustomrList,filteredCustomers:_toConsumableArray(newCustomrList),showCustomerForm:false});};_this.addCustomerButtonClicked=function(event){// Do not toggle the expanded state\nevent.stopPropagation();//Show the CustmerForm\n_this.setState({showCustomerForm:true});};_this.customerFormClosed=function(customer){// customer is not null and therefore created\nif(customer){var newCustomrList=[].concat(_toConsumableArray(_this.state.customers),[customer]);_this.setState({customers:newCustomrList,filteredCustomers:_toConsumableArray(newCustomrList),showCustomerForm:false});}else{_this.setState({showCustomerForm:false});}};_this.filterFieldValueChange=function(event){var value=event.target.value.toLowerCase();_this.setState({filteredCustomers:_this.state.customers.filter(function(customer){var firstNameContainsValue=customer.getFirstName().toLowerCase().includes(value);var lastNameContainsValue=customer.getLastName().toLowerCase().includes(value);return firstNameContainsValue||lastNameContainsValue;}),customerFilter:value});};_this.clearFilterFieldButtonClicked=function(){// Reset the filter\n_this.setState({filteredCustomers:_toConsumableArray(_this.state.customers),customerFilter:''});};var expandedID=null;if(_this.props.location.expandCustomer){expandedID=_this.props.location.expandCustomer.getID();}// Init an empty state\n_this.state={customers:[],filteredCustomers:[],customerFilter:'',error:null,loadingInProgress:false,expandedCustomerID:expandedID,showCustomerForm:false};return _this;}/** Fetches all CustomerBOs from the backend */_createClass(CustomerList,[{key:\"componentDidMount\",value:/** Lifecycle method, which is called when the component gets inserted into the browsers DOM */function componentDidMount(){this.getCustomers();}/** \n   * Handles onExpandedStateChange events from the CustomerListEntry component. Toggels the expanded state of \n   * the CustomerListEntry of the given CustomerBO.\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be toggeled\n   */},{key:\"render\",value:/** Renders the component */function render(){var _this2=this;var classes=this.props.classes;var _this$state=this.state,filteredCustomers=_this$state.filteredCustomers,customerFilter=_this$state.customerFilter,expandedCustomerID=_this$state.expandedCustomerID,loadingInProgress=_this$state.loadingInProgress,error=_this$state.error,showCustomerForm=_this$state.showCustomerForm;return/*#__PURE__*/_jsxs(\"div\",{className:classes.root,children:[/*#__PURE__*/_jsxs(Grid,{className:classes.customerFilter,container:true,spacing:1,justify:\"flex-start\",alignItems:\"center\",children:[/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Typography,{children:\"Filter customer list by name:\"})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:4,children:/*#__PURE__*/_jsx(TextField,{autoFocus:true,fullWidth:true,id:\"customerFilter\",type:\"text\",value:customerFilter,onChange:this.filterFieldValueChange,InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(IconButton,{onClick:this.clearFilterFieldButtonClicked,children:/*#__PURE__*/_jsx(ClearIcon,{})})})}})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:true}),/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(Button,{variant:\"contained\",color:\"primary\",startIcon:/*#__PURE__*/_jsx(AddIcon,{}),onClick:this.addCustomerButtonClicked,children:\"Add Customer\"})})]}),// Show the list of CustomerListEntry components\n// Do not use strict comparison, since expandedCustomerID maybe a string if given from the URL parameters\nfilteredCustomers.map(function(customer){return/*#__PURE__*/_jsx(CustomerListEntry,{customer:customer,expandedState:expandedCustomerID===customer.getID(),onExpandedStateChange:_this2.onExpandedStateChange,onCustomerDeleted:_this2.customerDeleted},customer.getID());}),/*#__PURE__*/_jsx(LoadingProgress,{show:loadingInProgress}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:error,contextErrorMsg:\"The list of customers could not be loaded.\",onReload:this.getCustomers}),/*#__PURE__*/_jsx(CustomerForm,{show:showCustomerForm,onClose:this.customerFormClosed})]});}}]);return CustomerList;}(Component);/** Component specific styles */var styles=function styles(theme){return{root:{width:'100%'},customerFilter:{marginTop:theme.spacing(2),marginBottom:theme.spacing(1)}};};/** PropTypes */export default withRouter(withStyles(styles)(CustomerList));","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/CustomerList.js"],"names":["React","Component","withStyles","Button","TextField","InputAdornment","IconButton","Grid","Typography","AddIcon","ClearIcon","withRouter","BankAPI","ContextErrorMessage","LoadingProgress","CustomerForm","CustomerListEntry","CustomerList","props","getCustomers","getAPI","then","customerBOs","setState","customers","filteredCustomers","loadingInProgress","error","catch","e","onExpandedStateChange","customer","newID","getID","state","expandedCustomerID","customerDeleted","newCustomrList","filter","customerFromState","showCustomerForm","addCustomerButtonClicked","event","stopPropagation","customerFormClosed","filterFieldValueChange","value","target","toLowerCase","firstNameContainsValue","getFirstName","includes","lastNameContainsValue","getLastName","customerFilter","clearFilterFieldButtonClicked","expandedID","location","expandCustomer","classes","root","endAdornment","map","styles","theme","width","marginTop","spacing","marginBottom"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { withRouter } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport CustomerForm from './dialogs/CustomerForm';\nimport CustomerListEntry from './CustomerListEntry';\n\n/**\n * Controlls a list of CustomerListEntrys to create a accordion for each customer.  \n * \n * @see See [CustomerListEntry](#customerlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // console.log(props);\n    let expandedID = null;\n\n    if (this.props.location.expandCustomer) {\n      expandedID = this.props.location.expandCustomer.getID();\n    }\n\n    // Init an empty state\n    this.state = {\n      customers: [],\n      filteredCustomers: [],\n      customerFilter: '',\n      error: null,\n      loadingInProgress: false,\n      expandedCustomerID: expandedID,\n      showCustomerForm: false\n    };\n  }\n\n  /** Fetches all CustomerBOs from the backend */\n  getCustomers = () => {\n    BankAPI.getAPI().getCustomers()\n      .then(customerBOs =>\n        this.setState({               // Set new state when CustomerBOs have been fetched\n          customers: customerBOs,\n          filteredCustomers: [...customerBOs], // store a copy\n          loadingInProgress: false,   // disable loading indicator \n          error: null\n        })).catch(e =>\n          this.setState({             // Reset state with error from catch \n            customers: [],\n            loadingInProgress: false, // disable loading indicator \n            error: e\n          })\n        );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getCustomers();\n  }\n\n  /** \n   * Handles onExpandedStateChange events from the CustomerListEntry component. Toggels the expanded state of \n   * the CustomerListEntry of the given CustomerBO.\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be toggeled\n   */\n  onExpandedStateChange = customer => {\n    // console.log(customerID);\n    // Set expandend customer entry to null by default\n    let newID = null;\n\n    // If same customer entry is clicked, collapse it else expand a new one\n    if (customer.getID() !== this.state.expandedCustomerID) {\n      // Expand the customer entry with customerID\n      newID = customer.getID();\n    }\n    // console.log(newID);\n    this.setState({\n      expandedCustomerID: newID,\n    });\n  }\n\n  /** \n   * Handles onCustomerDeleted events from the CustomerListEntry component\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be deleted\n   */\n  customerDeleted = customer => {\n    const newCustomrList = this.state.customers.filter(customerFromState => customerFromState.getID() !== customer.getID());\n    this.setState({\n      customers: newCustomrList,\n      filteredCustomers: [...newCustomrList],\n      showCustomerForm: false\n    });\n  }\n\n  /** Handles the onClick event of the add customer button */\n  addCustomerButtonClicked = event => {\n    // Do not toggle the expanded state\n    event.stopPropagation();\n    //Show the CustmerForm\n    this.setState({\n      showCustomerForm: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  customerFormClosed = customer => {\n    // customer is not null and therefore created\n    if (customer) {\n      const newCustomrList = [...this.state.customers, customer];\n      this.setState({\n        customers: newCustomrList,\n        filteredCustomers: [...newCustomrList],\n        showCustomerForm: false\n      });\n    } else {\n      this.setState({\n        showCustomerForm: false\n      });\n    }\n  }\n\n  /** Handels onChange events of the customer filter text field */\n  filterFieldValueChange = event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n      filteredCustomers: this.state.customers.filter(customer => {\n        let firstNameContainsValue = customer.getFirstName().toLowerCase().includes(value);\n        let lastNameContainsValue = customer.getLastName().toLowerCase().includes(value);\n        return firstNameContainsValue || lastNameContainsValue;\n      }),\n      customerFilter: value\n    });\n  }\n\n  /** Handles the onClose event of the clear filter button */\n  clearFilterFieldButtonClicked = () => {\n    // Reset the filter\n    this.setState({\n      filteredCustomers: [...this.state.customers],\n      customerFilter: ''\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const { filteredCustomers, customerFilter, expandedCustomerID, loadingInProgress, error, showCustomerForm } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid className={classes.customerFilter} container spacing={1} justify='flex-start' alignItems='center'>\n          <Grid item>\n            <Typography>\n              Filter customer list by name:\n              </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              autoFocus\n              fullWidth\n              id='customerFilter'\n              type='text'\n              value={customerFilter}\n              onChange={this.filterFieldValueChange}\n              InputProps={{\n                endAdornment: <InputAdornment position='end'>\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>,\n              }}\n            />\n          </Grid>\n          <Grid item xs />\n          <Grid item>\n            <Button variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addCustomerButtonClicked}>\n              Add Customer\n          </Button>\n          </Grid>\n        </Grid>\n        { \n          // Show the list of CustomerListEntry components\n          // Do not use strict comparison, since expandedCustomerID maybe a string if given from the URL parameters\n          filteredCustomers.map(customer =>\n            <CustomerListEntry key={customer.getID()} customer={customer} expandedState={expandedCustomerID === customer.getID()}\n              onExpandedStateChange={this.onExpandedStateChange}\n              onCustomerDeleted={this.customerDeleted}\n            />)\n        }\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of customers could not be loaded.`} onReload={this.getCustomers} />\n        <CustomerForm show={showCustomerForm} onClose={this.customerFormClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  customerFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nCustomerList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(CustomerList));"]},"metadata":{},"sourceType":"module"}