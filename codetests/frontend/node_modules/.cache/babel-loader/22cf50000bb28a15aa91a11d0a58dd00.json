{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/CustomerList.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear';\nimport { withRouter } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport CustomerForm from './dialogs/CustomerForm';\nimport CustomerListEntry from './CustomerListEntry';\n/**\n * Controlls a list of CustomerListEntrys to create a accordion for each customer.  \n * \n * @see See [CustomerListEntry](#customerlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CustomerList extends Component {\n  constructor(props) {\n    super(props); // console.log(props);\n\n    this.getCustomers = () => {\n      BankAPI.getAPI().getCustomers().then(customerBOs => this.setState({\n        // Set new state when CustomerBOs have been fetched\n        customers: customerBOs,\n        filteredCustomers: [...customerBOs],\n        // store a copy\n        loadingInProgress: false,\n        // disable loading indicator \n        error: null\n      })).catch(e => this.setState({\n        // Reset state with error from catch \n        customers: [],\n        loadingInProgress: false,\n        // disable loading indicator \n        error: e\n      })); // set loading to true\n\n      this.setState({\n        loadingInProgress: true,\n        error: null\n      });\n    };\n\n    this.onExpandedStateChange = customer => {\n      // console.log(customerID);\n      // Set expandend customer entry to null by default\n      let newID = null; // If same customer entry is clicked, collapse it else expand a new one\n\n      if (customer.getID() !== this.state.expandedCustomerID) {\n        // Expand the customer entry with customerID\n        newID = customer.getID();\n      } // console.log(newID);\n\n\n      this.setState({\n        expandedCustomerID: newID\n      });\n    };\n\n    this.customerDeleted = customer => {\n      const newCustomrList = this.state.customers.filter(customerFromState => customerFromState.getID() !== customer.getID());\n      this.setState({\n        customers: newCustomrList,\n        filteredCustomers: [...newCustomrList],\n        showCustomerForm: false\n      });\n    };\n\n    this.addCustomerButtonClicked = event => {\n      // Do not toggle the expanded state\n      event.stopPropagation(); //Show the CustmerForm\n\n      this.setState({\n        showCustomerForm: true\n      });\n    };\n\n    this.customerFormClosed = customer => {\n      // customer is not null and therefore created\n      if (customer) {\n        const newCustomrList = [...this.state.customers, customer];\n        this.setState({\n          customers: newCustomrList,\n          filteredCustomers: [...newCustomrList],\n          showCustomerForm: false\n        });\n      } else {\n        this.setState({\n          showCustomerForm: false\n        });\n      }\n    };\n\n    this.filterFieldValueChange = event => {\n      const value = event.target.value.toLowerCase();\n      this.setState({\n        filteredCustomers: this.state.customers.filter(customer => {\n          let firstNameContainsValue = customer.getFirstName().toLowerCase().includes(value);\n          let lastNameContainsValue = customer.getLastName().toLowerCase().includes(value);\n          return firstNameContainsValue || lastNameContainsValue;\n        }),\n        customerFilter: value\n      });\n    };\n\n    this.clearFilterFieldButtonClicked = () => {\n      // Reset the filter\n      this.setState({\n        filteredCustomers: [...this.state.customers],\n        customerFilter: ''\n      });\n    };\n\n    let expandedID = null;\n\n    if (this.props.location.expandCustomer) {\n      expandedID = this.props.location.expandCustomer.getID();\n    } // Init an empty state\n\n\n    this.state = {\n      customers: [],\n      filteredCustomers: [],\n      customerFilter: '',\n      error: null,\n      loadingInProgress: false,\n      expandedCustomerID: expandedID,\n      showCustomerForm: false\n    };\n  }\n  /** Fetches all CustomerBOs from the backend */\n\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getCustomers();\n  }\n  /** \n   * Handles onExpandedStateChange events from the CustomerListEntry component. Toggels the expanded state of \n   * the CustomerListEntry of the given CustomerBO.\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be toggeled\n   */\n\n\n  /** Renders the component */\n  render() {\n    const {\n      classes\n    } = this.props;\n    const {\n      filteredCustomers,\n      customerFilter,\n      expandedCustomerID,\n      loadingInProgress,\n      error,\n      showCustomerForm\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        className: classes.customerFilter,\n        container: true,\n        spacing: 1,\n        justify: \"flex-start\",\n        alignItems: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Typography, {\n            children: \"Filter customer list by name:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 167,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: 4,\n          children: /*#__PURE__*/_jsxDEV(TextField, {\n            autoFocus: true,\n            fullWidth: true,\n            id: \"customerFilter\",\n            type: \"text\",\n            value: customerFilter,\n            onChange: this.filterFieldValueChange,\n            InputProps: {\n              endAdornment: /*#__PURE__*/_jsxDEV(InputAdornment, {\n                position: \"end\",\n                children: /*#__PURE__*/_jsxDEV(IconButton, {\n                  onClick: this.clearFilterFieldButtonClicked,\n                  children: /*#__PURE__*/_jsxDEV(ClearIcon, {}, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 182,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 181,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 180,\n                columnNumber: 31\n              }, this)\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 172,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          xs: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Grid, {\n          item: true,\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"contained\",\n            color: \"primary\",\n            startIcon: /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 68\n            }, this),\n            onClick: this.addCustomerButtonClicked,\n            children: \"Add Customer\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 190,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), // Show the list of CustomerListEntry components\n      // Do not use strict comparison, since expandedCustomerID maybe a string if given from the URL parameters\n      filteredCustomers.map(customer => /*#__PURE__*/_jsxDEV(CustomerListEntry, {\n        customer: customer,\n        expandedState: expandedCustomerID === customer.getID(),\n        onExpandedStateChange: this.onExpandedStateChange,\n        onCustomerDeleted: this.customerDeleted\n      }, customer.getID(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this)), /*#__PURE__*/_jsxDEV(LoadingProgress, {\n        show: loadingInProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n        error: error,\n        contextErrorMsg: `The list of customers could not be loaded.`,\n        onReload: this.getCustomers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CustomerForm, {\n        show: showCustomerForm,\n        onClose: this.customerFormClosed\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%'\n  },\n  customerFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1)\n  }\n});\n/** PropTypes */\n\n\nCustomerList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** @ignore */\n  location: PropTypes.object.isRequired\n};\nexport default withRouter(withStyles(styles)(CustomerList));","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/CustomerList.js"],"names":["React","Component","PropTypes","withStyles","Button","TextField","InputAdornment","IconButton","Grid","Typography","AddIcon","ClearIcon","withRouter","BankAPI","ContextErrorMessage","LoadingProgress","CustomerForm","CustomerListEntry","CustomerList","constructor","props","getCustomers","getAPI","then","customerBOs","setState","customers","filteredCustomers","loadingInProgress","error","catch","e","onExpandedStateChange","customer","newID","getID","state","expandedCustomerID","customerDeleted","newCustomrList","filter","customerFromState","showCustomerForm","addCustomerButtonClicked","event","stopPropagation","customerFormClosed","filterFieldValueChange","value","target","toLowerCase","firstNameContainsValue","getFirstName","includes","lastNameContainsValue","getLastName","customerFilter","clearFilterFieldButtonClicked","expandedID","location","expandCustomer","componentDidMount","render","classes","root","endAdornment","map","styles","theme","width","marginTop","spacing","marginBottom","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, TextField, InputAdornment, IconButton, Grid, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport ClearIcon from '@material-ui/icons/Clear'\nimport { withRouter } from 'react-router-dom';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\nimport CustomerForm from './dialogs/CustomerForm';\nimport CustomerListEntry from './CustomerListEntry';\n\n/**\n * Controlls a list of CustomerListEntrys to create a accordion for each customer.  \n * \n * @see See [CustomerListEntry](#customerlistentry)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerList extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // console.log(props);\n    let expandedID = null;\n\n    if (this.props.location.expandCustomer) {\n      expandedID = this.props.location.expandCustomer.getID();\n    }\n\n    // Init an empty state\n    this.state = {\n      customers: [],\n      filteredCustomers: [],\n      customerFilter: '',\n      error: null,\n      loadingInProgress: false,\n      expandedCustomerID: expandedID,\n      showCustomerForm: false\n    };\n  }\n\n  /** Fetches all CustomerBOs from the backend */\n  getCustomers = () => {\n    BankAPI.getAPI().getCustomers()\n      .then(customerBOs =>\n        this.setState({               // Set new state when CustomerBOs have been fetched\n          customers: customerBOs,\n          filteredCustomers: [...customerBOs], // store a copy\n          loadingInProgress: false,   // disable loading indicator \n          error: null\n        })).catch(e =>\n          this.setState({             // Reset state with error from catch \n            customers: [],\n            loadingInProgress: false, // disable loading indicator \n            error: e\n          })\n        );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      error: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getCustomers();\n  }\n\n  /** \n   * Handles onExpandedStateChange events from the CustomerListEntry component. Toggels the expanded state of \n   * the CustomerListEntry of the given CustomerBO.\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be toggeled\n   */\n  onExpandedStateChange = customer => {\n    // console.log(customerID);\n    // Set expandend customer entry to null by default\n    let newID = null;\n\n    // If same customer entry is clicked, collapse it else expand a new one\n    if (customer.getID() !== this.state.expandedCustomerID) {\n      // Expand the customer entry with customerID\n      newID = customer.getID();\n    }\n    // console.log(newID);\n    this.setState({\n      expandedCustomerID: newID,\n    });\n  }\n\n  /** \n   * Handles onCustomerDeleted events from the CustomerListEntry component\n   * \n   * @param {customer} CustomerBO of the CustomerListEntry to be deleted\n   */\n  customerDeleted = customer => {\n    const newCustomrList = this.state.customers.filter(customerFromState => customerFromState.getID() !== customer.getID());\n    this.setState({\n      customers: newCustomrList,\n      filteredCustomers: [...newCustomrList],\n      showCustomerForm: false\n    });\n  }\n\n  /** Handles the onClick event of the add customer button */\n  addCustomerButtonClicked = event => {\n    // Do not toggle the expanded state\n    event.stopPropagation();\n    //Show the CustmerForm\n    this.setState({\n      showCustomerForm: true\n    });\n  }\n\n  /** Handles the onClose event of the CustomerForm */\n  customerFormClosed = customer => {\n    // customer is not null and therefore created\n    if (customer) {\n      const newCustomrList = [...this.state.customers, customer];\n      this.setState({\n        customers: newCustomrList,\n        filteredCustomers: [...newCustomrList],\n        showCustomerForm: false\n      });\n    } else {\n      this.setState({\n        showCustomerForm: false\n      });\n    }\n  }\n\n  /** Handels onChange events of the customer filter text field */\n  filterFieldValueChange = event => {\n    const value = event.target.value.toLowerCase();\n    this.setState({\n      filteredCustomers: this.state.customers.filter(customer => {\n        let firstNameContainsValue = customer.getFirstName().toLowerCase().includes(value);\n        let lastNameContainsValue = customer.getLastName().toLowerCase().includes(value);\n        return firstNameContainsValue || lastNameContainsValue;\n      }),\n      customerFilter: value\n    });\n  }\n\n  /** Handles the onClose event of the clear filter button */\n  clearFilterFieldButtonClicked = () => {\n    // Reset the filter\n    this.setState({\n      filteredCustomers: [...this.state.customers],\n      customerFilter: ''\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    const { filteredCustomers, customerFilter, expandedCustomerID, loadingInProgress, error, showCustomerForm } = this.state;\n\n    return (\n      <div className={classes.root}>\n        <Grid className={classes.customerFilter} container spacing={1} justify='flex-start' alignItems='center'>\n          <Grid item>\n            <Typography>\n              Filter customer list by name:\n              </Typography>\n          </Grid>\n          <Grid item xs={4}>\n            <TextField\n              autoFocus\n              fullWidth\n              id='customerFilter'\n              type='text'\n              value={customerFilter}\n              onChange={this.filterFieldValueChange}\n              InputProps={{\n                endAdornment: <InputAdornment position='end'>\n                  <IconButton onClick={this.clearFilterFieldButtonClicked}>\n                    <ClearIcon />\n                  </IconButton>\n                </InputAdornment>,\n              }}\n            />\n          </Grid>\n          <Grid item xs />\n          <Grid item>\n            <Button variant='contained' color='primary' startIcon={<AddIcon />} onClick={this.addCustomerButtonClicked}>\n              Add Customer\n          </Button>\n          </Grid>\n        </Grid>\n        { \n          // Show the list of CustomerListEntry components\n          // Do not use strict comparison, since expandedCustomerID maybe a string if given from the URL parameters\n          filteredCustomers.map(customer =>\n            <CustomerListEntry key={customer.getID()} customer={customer} expandedState={expandedCustomerID === customer.getID()}\n              onExpandedStateChange={this.onExpandedStateChange}\n              onCustomerDeleted={this.customerDeleted}\n            />)\n        }\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={error} contextErrorMsg={`The list of customers could not be loaded.`} onReload={this.getCustomers} />\n        <CustomerForm show={showCustomerForm} onClose={this.customerFormClosed} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n  },\n  customerFilter: {\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(1),\n  }\n});\n\n/** PropTypes */\nCustomerList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  location: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(CustomerList));"]},"metadata":{},"sourceType":"module"}