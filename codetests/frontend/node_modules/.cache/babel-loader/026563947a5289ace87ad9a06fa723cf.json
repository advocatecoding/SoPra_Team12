{"ast":null,"code":"import _classCallCheck from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _assertThisInitialized from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";import _inherits from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _classPrivateFieldLooseBase from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";import _classPrivateFieldLooseKey from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";import React,{Component}from'react';import{withStyles,Typography,TableContainer,Table,TableHead,TableCell,Paper,TableRow,TableBody,Link,Grid}from'@material-ui/core';import ArrowBackIcon from'@material-ui/icons/ArrowBack';import{Link as RouterLink}from'react-router-dom';import{withRouter,Redirect}from'react-router';import{BankAPI}from'../api';import ContextErrorMessage from'./dialogs/ContextErrorMessage';import LoadingProgress from'./dialogs/LoadingProgress';/**\n * Querys lists of credit and debit TransactionBOs for an account of a customer from the backend.\n * The customers CustomerBO and AccountBO is recieved in the this.props.location.owner object as passed\n * by the AccountListEntry component through the React Router Link. \n * \n * @see See [AccountListEntry](#accountlistentry)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var _myAccount=/*#__PURE__*/_classPrivateFieldLooseKey(\"myAccount\");var TransactionList=/*#__PURE__*/function(_Component){_inherits(TransactionList,_Component);var _super=_createSuper(TransactionList);function TransactionList(props){var _this;_classCallCheck(this,TransactionList);_this=_super.call(this,props);// Store the underlying AccountBO given from the calling link of the RouterLink of React Router\nObject.defineProperty(_assertThisInitialized(_this),_myAccount,{writable:true,value:null});_this.getTransactions=function(){var account=_this.props.location.owner.account;BankAPI.getAPI().getCreditsForAccount(account.getID()).then(function(creditTransactionBOs){BankAPI.getAPI().getDebitsForAccount(account.getID()).then(function(debitTransactionBOs){var transactions=creditTransactionBOs.concat(debitTransactionBOs);// Sorts the transactions by ascending ID, since the ID can serve as a timestamp. \n// A higher ID indicates a newer transaction.\ntransactions.sort(_this.transactionComparator);// set final state\n_this.setState({transactions:transactions,transactionsLoadingInProgress:false,debitsLoadingError:null});}).catch(function(e){return _this.setState({transactions:[],debitsLoadingError:e,transactionsLoadingInProgress:false});});// set inter state\n_this.setState({creditsLoadingError:null});}).catch(function(e){return _this.setState({transactions:[],transactionsLoadingInProgress:false,creditsLoadingError:e});});// set loading to true\n_this.setState({transactionsLoadingInProgress:true,creditsLoadingError:null,debitsLoadingError:null});};_classPrivateFieldLooseBase(_assertThisInitialized(_this),_myAccount)[_myAccount]=_this.props.location.owner.account;// Init an empty state\n_this.state={transactions:[],transactionsLoadingInProgress:false,creditsLoadingError:null,debitsLoadingError:null};return _this;}/**\n   * Returns the underlying AccountBO given from the calling link of the RouterLink of React Router\n   */_createClass(TransactionList,[{key:\"getAccount\",value:function getAccount(){return _classPrivateFieldLooseBase(this,_myAccount)[_myAccount];}/**\n   * Compares two TransactioBOs to sort them by their id field. Sorts the lowest id first. \n   * The ID is used as replacement a timestamp.\n   * \n   * Returns -1 if a < b\n   * Returns 1 if a > b\n   * Returns 0 if a = b\n   * \n   * @param {TransactionBO} transactionA \n   * @param {TransactionBO} transactionB \n   */},{key:\"transactionComparator\",value:function transactionComparator(transactionA,transactionB){var result=0;if(transactionA.getID()<transactionB.getID()){result=-1;}if(transactionA.getID()>transactionB.getID()){result=1;}return result;}/** \n   * Fetches credit and debit TransactionBOs from the backend. The two operations are chained. \n   * Credit and debit transactions are marked with the transaction type and then concatinated into one array \n   * of transactions. This array is then sorted with the transactionComparator function. \n   */},{key:\"componentDidMount\",value:/** Lifecycle method, which is called when the component gets inserted into the browsers DOM */function componentDidMount(){// load only if the owner object is given\nif(this.props.location.owner){this.getTransactions();}}/** Render a single row in the transaction table */},{key:\"renderTransactionRow\",value:function renderTransactionRow(transaction,balance){// For accessibility, the first column is set to be a <th> element, with a scope of 'row'. \n// This enables screen readers to identify a cell's value by it's row and column name.\nvar currencyFormatter=BankAPI.getAPI().getCurrencyFormatter();return/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{align:\"center\",component:\"th\",scope:\"row\",children:transaction.getID()}),/*#__PURE__*/_jsx(TableCell,{align:\"center\",children:transaction.getSourceAccount()}),/*#__PURE__*/_jsx(TableCell,{align:\"center\",children:transaction.getTargetAccount()}),// Its a credit if this account is the target of the transaction\nthis.getAccount().getID()===transaction.getTargetAccount()?/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:currencyFormatter.format(transaction.getAmount())}),/*#__PURE__*/_jsx(TableCell,{align:\"right\"})]}):/*#__PURE__*/_jsxs(React.Fragment,{children:[/*#__PURE__*/_jsx(TableCell,{align:\"left\"}),/*#__PURE__*/_jsx(TableCell,{align:\"left\",children:currencyFormatter.format(transaction.getAmount())})]}),/*#__PURE__*/_jsx(TableCell,{align:\"center\",children:currencyFormatter.format(balance)})]},transaction.getID());}/** Render the body of the table with all transactions */},{key:\"renderTransactions\",value:function renderTransactions(){var _this2=this;var balance=0;return this.state.transactions.map(function(transaction){if(_this2.getAccount().getID()===transaction.getTargetAccount()){// Its a credit, since this account is the target of the transaction\nbalance+=transaction.getAmount();}else{balance-=transaction.getAmount();}return _this2.renderTransactionRow(transaction,balance);});}/** Render the transaction table  */},{key:\"renderTransactionTable\",value:function renderTransactionTable(){var _this$state=this.state,transactionsLoadingInProgress=_this$state.transactionsLoadingInProgress,creditsLoadingError=_this$state.creditsLoadingError,debitsLoadingError=_this$state.debitsLoadingError;if(!transactionsLoadingInProgress&&!creditsLoadingError&&!debitsLoadingError){return/*#__PURE__*/_jsxs(TableContainer,{component:Paper,children:[/*#__PURE__*/_jsx(Typography,{className:this.props.classes.tableHeader,children:\"List of transactions:\"}),/*#__PURE__*/_jsxs(Table,{children:[/*#__PURE__*/_jsx(TableHead,{children:/*#__PURE__*/_jsxs(TableRow,{children:[/*#__PURE__*/_jsx(TableCell,{align:\"center\",children:\"ID\"}),/*#__PURE__*/_jsx(TableCell,{align:\"center\",children:\"Source account\"}),/*#__PURE__*/_jsx(TableCell,{align:\"center\",children:\"Target account\"}),/*#__PURE__*/_jsx(TableCell,{align:\"right\",children:\"Credit\"}),/*#__PURE__*/_jsx(TableCell,{align:\"left\",children:\"Debit\"}),/*#__PURE__*/_jsx(TableCell,{align:\"center\",children:\"Balance\"})]})}),/*#__PURE__*/_jsx(TableBody,{children:this.renderTransactions()})]})]});}}/** Renders the component */},{key:\"render\",value:function render(){var classes=this.props.classes;var owner=null;if(this.props.location.owner){// owner object exists\nowner=this.props.location.owner;}else{// owner object does not exist, we are called directly by route URL \n// or the page has been refreshed -> put the user back to start page\nreturn/*#__PURE__*/_jsx(Redirect,{to:\"/\"});}var _owner=owner,customer=_owner.customer,account=_owner.account;var _this$state2=this.state,transactionsLoadingInProgress=_this$state2.transactionsLoadingInProgress,creditsLoadingError=_this$state2.creditsLoadingError,debitsLoadingError=_this$state2.debitsLoadingError;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Typography,{component:\"div\",className:classes.subNav,children:/*#__PURE__*/_jsx(Link,{component:RouterLink,to:{pathname:'/customers',expandCustomer:customer},children:/*#__PURE__*/_jsxs(Grid,{container:true,spacing:1,justify:\"flex-start\",alignItems:\"stretch\",children:[/*#__PURE__*/_jsx(Grid,{item:true,children:/*#__PURE__*/_jsx(ArrowBackIcon,{})}),/*#__PURE__*/_jsx(Grid,{item:true,children:\"Back to customer list\"})]})})}),/*#__PURE__*/_jsxs(Paper,{className:classes.root,children:[/*#__PURE__*/_jsx(Typography,{variant:\"h6\",children:\"Account\"}),/*#__PURE__*/_jsxs(Typography,{className:classes.accountEntry,children:[\"ID: \",account.getID()]}),/*#__PURE__*/_jsxs(Typography,{children:[\"Customer: \",customer.getLastName(),\", \",customer.getFirstName()]})]}),this.renderTransactionTable(),/*#__PURE__*/_jsx(LoadingProgress,{show:transactionsLoadingInProgress}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:creditsLoadingError,contextErrorMsg:\"The credits of account \".concat(this.accountID,\" could not be loaded.\"),onReload:this.getTransactions}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:debitsLoadingError,contextErrorMsg:\"The debits of account \".concat(this.accountID,\" could not be loaded.\"),onReload:this.getTransactions})]});}}]);return TransactionList;}(Component);/** Component specific styles */var styles=function styles(theme){return{root:{width:'100%',padding:theme.spacing(1)},subNav:{marginTop:theme.spacing(1),marginBottom:theme.spacing(1)},tableHeader:{marginLeft:theme.spacing(1),marginTop:theme.spacing(2)}};};/** PropTypes */export default withRouter(withStyles(styles)(TransactionList));","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/TransactionList.js"],"names":["React","Component","withStyles","Typography","TableContainer","Table","TableHead","TableCell","Paper","TableRow","TableBody","Link","Grid","ArrowBackIcon","RouterLink","withRouter","Redirect","BankAPI","ContextErrorMessage","LoadingProgress","TransactionList","props","getTransactions","account","location","owner","getAPI","getCreditsForAccount","getID","then","creditTransactionBOs","getDebitsForAccount","debitTransactionBOs","transactions","concat","sort","transactionComparator","setState","transactionsLoadingInProgress","debitsLoadingError","catch","e","creditsLoadingError","state","transactionA","transactionB","result","transaction","balance","currencyFormatter","getCurrencyFormatter","getSourceAccount","getTargetAccount","getAccount","format","getAmount","map","renderTransactionRow","classes","tableHeader","renderTransactions","customer","subNav","pathname","expandCustomer","root","accountEntry","getLastName","getFirstName","renderTransactionTable","accountID","styles","theme","width","padding","spacing","marginTop","marginBottom","marginLeft"],"mappings":"65BAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CAEA,OAASC,UAAT,CAAqBC,UAArB,CAAiCC,cAAjC,CAAiDC,KAAjD,CAAwDC,SAAxD,CAAmEC,SAAnE,CAA8EC,KAA9E,CAAqFC,QAArF,CAA+FC,SAA/F,CAA0GC,IAA1G,CAAgHC,IAAhH,KAA4H,mBAA5H,CACA,MAAOC,CAAAA,aAAP,KAA0B,8BAA1B,CACA,OAASF,IAAI,GAAIG,CAAAA,UAAjB,KAAmC,kBAAnC,CACA,OAASC,UAAT,CAAqBC,QAArB,KAAqC,cAArC,CACA,OAASC,OAAT,KAAwB,QAAxB,CACA,MAAOC,CAAAA,mBAAP,KAAgC,+BAAhC,CACA,MAAOC,CAAAA,eAAP,KAA4B,2BAA5B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,G,+JACMC,CAAAA,e,kHAIJ,yBAAYC,KAAZ,CAAmB,iDACjB,uBAAMA,KAAN,EAEA;AAHiB,oFAFN,IAEM,SAoDnBC,eApDmB,CAoDD,UAAM,CACtB,GAAQC,CAAAA,OAAR,CAAoB,MAAKF,KAAL,CAAWG,QAAX,CAAoBC,KAAxC,CAAQF,OAAR,CAEAN,OAAO,CAACS,MAAR,GAAiBC,oBAAjB,CAAsCJ,OAAO,CAACK,KAAR,EAAtC,EACGC,IADH,CACQ,SAAAC,oBAAoB,CAAI,CAC5Bb,OAAO,CAACS,MAAR,GAAiBK,mBAAjB,CAAqCR,OAAO,CAACK,KAAR,EAArC,EAAsDC,IAAtD,CAA2D,SAAAG,mBAAmB,CAAI,CAChF,GAAIC,CAAAA,YAAY,CAAGH,oBAAoB,CAACI,MAArB,CAA4BF,mBAA5B,CAAnB,CAEA;AACA;AACAC,YAAY,CAACE,IAAb,CAAkB,MAAKC,qBAAvB,EAEA;AACA,MAAKC,QAAL,CAAc,CACZJ,YAAY,CAAEA,YADF,CAEZK,6BAA6B,CAAE,KAFnB,CAGZC,kBAAkB,CAAE,IAHR,CAAd,EAKD,CAbD,EAaGC,KAbH,CAaS,SAAAC,CAAC,QAAI,OAAKJ,QAAL,CAAc,CAC1BJ,YAAY,CAAE,EADY,CAE1BM,kBAAkB,CAAEE,CAFM,CAG1BH,6BAA6B,CAAE,KAHL,CAAd,CAAJ,EAbV,EAmBA;AACA,MAAKD,QAAL,CAAc,CACZK,mBAAmB,CAAE,IADT,CAAd,EAGD,CAzBH,EAyBKF,KAzBL,CAyBW,SAAAC,CAAC,QACR,OAAKJ,QAAL,CAAc,CACZJ,YAAY,CAAE,EADF,CAEZK,6BAA6B,CAAE,KAFnB,CAGZI,mBAAmB,CAAED,CAHT,CAAd,CADQ,EAzBZ,EAiCA;AACA,MAAKJ,QAAL,CAAc,CACZC,6BAA6B,CAAE,IADnB,CAEZI,mBAAmB,CAAE,IAFT,CAGZH,kBAAkB,CAAE,IAHR,CAAd,EAKD,CA9FkB,CAIjB,kFAAkB,MAAKlB,KAAL,CAAWG,QAAX,CAAoBC,KAApB,CAA0BF,OAA5C,CAEA;AACA,MAAKoB,KAAL,CAAa,CACXV,YAAY,CAAE,EADH,CAEXK,6BAA6B,CAAE,KAFpB,CAGXI,mBAAmB,CAAE,IAHV,CAIXH,kBAAkB,CAAE,IAJT,CAAb,CAPiB,aAalB,CAGD;AACF;AACA,K,sDACE,qBAAa,CACX,mCAAO,IAAP,yBACD,CAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,K,qCACE,+BAAsBK,YAAtB,CAAoCC,YAApC,CAAkD,CAChD,GAAIC,CAAAA,MAAM,CAAG,CAAb,CAEA,GAAIF,YAAY,CAAChB,KAAb,GAAuBiB,YAAY,CAACjB,KAAb,EAA3B,CAAiD,CAC/CkB,MAAM,CAAG,CAAC,CAAV,CACD,CACD,GAAIF,YAAY,CAAChB,KAAb,GAAuBiB,YAAY,CAACjB,KAAb,EAA3B,CAAiD,CAC/CkB,MAAM,CAAG,CAAT,CACD,CAED,MAAOA,CAAAA,MAAP,CACD,CAED;AACF;AACA;AACA;AACA,K,iCA6CE,+FACA,4BAAoB,CAClB;AACA,GAAI,KAAKzB,KAAL,CAAWG,QAAX,CAAoBC,KAAxB,CAA+B,CAC7B,KAAKH,eAAL,GACD,CACF,CAED,mD,oCACA,8BAAqByB,WAArB,CAAkCC,OAAlC,CAA2C,CACzC;AACA;AAEA,GAAIC,CAAAA,iBAAiB,CAAGhC,OAAO,CAACS,MAAR,GAAiBwB,oBAAjB,EAAxB,CAEA,mBACE,MAAC,QAAD,yBACE,KAAC,SAAD,EAAW,KAAK,CAAC,QAAjB,CAA0B,SAAS,CAAC,IAApC,CAAyC,KAAK,CAAC,KAA/C,UACGH,WAAW,CAACnB,KAAZ,EADH,EADF,cAIE,KAAC,SAAD,EAAW,KAAK,CAAC,QAAjB,UAA2BmB,WAAW,CAACI,gBAAZ,EAA3B,EAJF,cAKE,KAAC,SAAD,EAAW,KAAK,CAAC,QAAjB,UAA2BJ,WAAW,CAACK,gBAAZ,EAA3B,EALF,CAQI;AACA,KAAKC,UAAL,GAAkBzB,KAAlB,KAA8BmB,WAAW,CAACK,gBAAZ,EAA9B,cACE,MAAC,KAAD,CAAO,QAAP,yBACE,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,UAA0BH,iBAAiB,CAACK,MAAlB,CAAyBP,WAAW,CAACQ,SAAZ,EAAzB,CAA1B,EADF,cAEE,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,EAFF,GADF,cAME,MAAC,KAAD,CAAO,QAAP,yBACE,KAAC,SAAD,EAAW,KAAK,CAAC,MAAjB,EADF,cAEE,KAAC,SAAD,EAAW,KAAK,CAAC,MAAjB,UAAyBN,iBAAiB,CAACK,MAAlB,CAAyBP,WAAW,CAACQ,SAAZ,EAAzB,CAAzB,EAFF,GAfN,cAoBE,KAAC,SAAD,EAAW,KAAK,CAAC,QAAjB,UAA2BN,iBAAiB,CAACK,MAAlB,CAAyBN,OAAzB,CAA3B,EApBF,GAAeD,WAAW,CAACnB,KAAZ,EAAf,CADF,CAwBD,CAED,yD,kCACA,6BAAqB,iBACnB,GAAIoB,CAAAA,OAAO,CAAG,CAAd,CAEA,MAAO,MAAKL,KAAL,CAAWV,YAAX,CAAwBuB,GAAxB,CAA4B,SAAAT,WAAW,CAAI,CAChD,GAAI,MAAI,CAACM,UAAL,GAAkBzB,KAAlB,KAA8BmB,WAAW,CAACK,gBAAZ,EAAlC,CAAkE,CAChE;AACAJ,OAAO,EAAID,WAAW,CAACQ,SAAZ,EAAX,CACD,CAHD,IAGO,CACLP,OAAO,EAAID,WAAW,CAACQ,SAAZ,EAAX,CACD,CACD,MAAO,CAAA,MAAI,CAACE,oBAAL,CAA0BV,WAA1B,CAAuCC,OAAvC,CAAP,CACD,CARM,CAAP,CASD,CAED,oC,sCACA,iCAAyB,CACvB,gBAAmF,KAAKL,KAAxF,CAAQL,6BAAR,aAAQA,6BAAR,CAAuCI,mBAAvC,aAAuCA,mBAAvC,CAA4DH,kBAA5D,aAA4DA,kBAA5D,CAEA,GAAI,CAACD,6BAAD,EAAkC,CAACI,mBAAnC,EAA0D,CAACH,kBAA/D,CAAmF,CACjF,mBACE,MAAC,cAAD,EAAgB,SAAS,CAAE/B,KAA3B,wBACE,KAAC,UAAD,EAAY,SAAS,CAAE,KAAKa,KAAL,CAAWqC,OAAX,CAAmBC,WAA1C,mCADF,cAIE,MAAC,KAAD,yBACE,KAAC,SAAD,wBACE,MAAC,QAAD,yBACE,KAAC,SAAD,EAAW,KAAK,CAAC,QAAjB,gBADF,cAEE,KAAC,SAAD,EAAW,KAAK,CAAC,QAAjB,4BAFF,cAGE,KAAC,SAAD,EAAW,KAAK,CAAC,QAAjB,4BAHF,cAIE,KAAC,SAAD,EAAW,KAAK,CAAC,OAAjB,oBAJF,cAKE,KAAC,SAAD,EAAW,KAAK,CAAC,MAAjB,mBALF,cAME,KAAC,SAAD,EAAW,KAAK,CAAC,QAAjB,qBANF,GADF,EADF,cAWE,KAAC,SAAD,WACG,KAAKC,kBAAL,EADH,EAXF,GAJF,GADF,CAqBD,CACF,CAED,4B,sBACA,iBAAS,CACP,GAAQF,CAAAA,OAAR,CAAoB,KAAKrC,KAAzB,CAAQqC,OAAR,CACA,GAAIjC,CAAAA,KAAK,CAAG,IAAZ,CACA,GAAI,KAAKJ,KAAL,CAAWG,QAAX,CAAoBC,KAAxB,CAA+B,CAC7B;AACAA,KAAK,CAAG,KAAKJ,KAAL,CAAWG,QAAX,CAAoBC,KAA5B,CACD,CAHD,IAGO,CACL;AACA;AACA,mBAAQ,KAAC,QAAD,EAAU,EAAE,CAAC,GAAb,EAAR,CACD,CAED,WAA8BA,KAA9B,CAAQoC,QAAR,QAAQA,QAAR,CAAkBtC,OAAlB,QAAkBA,OAAlB,CACA,iBAAmF,KAAKoB,KAAxF,CAAQL,6BAAR,cAAQA,6BAAR,CAAuCI,mBAAvC,cAAuCA,mBAAvC,CAA4DH,kBAA5D,cAA4DA,kBAA5D,CAEA,mBACE,oCACE,KAAC,UAAD,EAAY,SAAS,CAAC,KAAtB,CAA4B,SAAS,CAAEmB,OAAO,CAACI,MAA/C,uBACE,KAAC,IAAD,EAAM,SAAS,CAAEhD,UAAjB,CAA6B,EAAE,CAAE,CAC/BiD,QAAQ,CAAE,YADqB,CAE/BC,cAAc,CAAEH,QAFe,CAAjC,uBAIE,MAAC,IAAD,EAAM,SAAS,KAAf,CAAgB,OAAO,CAAE,CAAzB,CAA4B,OAAO,CAAC,YAApC,CAAiD,UAAU,CAAC,SAA5D,wBACE,KAAC,IAAD,EAAM,IAAI,KAAV,uBACE,KAAC,aAAD,IADF,EADF,cAIE,KAAC,IAAD,EAAM,IAAI,KAAV,mCAJF,GAJF,EADF,EADF,cAiBE,MAAC,KAAD,EAAO,SAAS,CAAEH,OAAO,CAACO,IAA1B,wBACE,KAAC,UAAD,EAAY,OAAO,CAAC,IAApB,qBADF,cAIE,MAAC,UAAD,EAAY,SAAS,CAAEP,OAAO,CAACQ,YAA/B,kBACO3C,OAAO,CAACK,KAAR,EADP,GAJF,cAOE,MAAC,UAAD,yBACaiC,QAAQ,CAACM,WAAT,EADb,MACuCN,QAAQ,CAACO,YAAT,EADvC,GAPF,GAjBF,CA6BG,KAAKC,sBAAL,EA7BH,cA+BE,KAAC,eAAD,EAAiB,IAAI,CAAE/B,6BAAvB,EA/BF,cAgCE,KAAC,mBAAD,EAAqB,KAAK,CAAEI,mBAA5B,CAAiD,eAAe,kCAA4B,KAAK4B,SAAjC,yBAAhE,CAAmI,QAAQ,CAAE,KAAKhD,eAAlJ,EAhCF,cAiCE,KAAC,mBAAD,EAAqB,KAAK,CAAEiB,kBAA5B,CAAgD,eAAe,iCAA2B,KAAK+B,SAAhC,yBAA/D,CAAiI,QAAQ,CAAE,KAAKhD,eAAhJ,EAjCF,GADF,CAqCD,C,6BA9O2BrB,S,EAiP9B,gCACA,GAAMsE,CAAAA,MAAM,CAAG,QAATA,CAAAA,MAAS,CAAAC,KAAK,QAAK,CACvBP,IAAI,CAAE,CACJQ,KAAK,CAAE,MADH,CAEJC,OAAO,CAAEF,KAAK,CAACG,OAAN,CAAc,CAAd,CAFL,CADiB,CAKvBb,MAAM,CAAE,CACNc,SAAS,CAAEJ,KAAK,CAACG,OAAN,CAAc,CAAd,CADL,CAENE,YAAY,CAAEL,KAAK,CAACG,OAAN,CAAc,CAAd,CAFR,CALe,CASvBhB,WAAW,CAAE,CACXmB,UAAU,CAAEN,KAAK,CAACG,OAAN,CAAc,CAAd,CADD,CAEXC,SAAS,CAAEJ,KAAK,CAACG,OAAN,CAAc,CAAd,CAFA,CATU,CAAL,EAApB,CAeA,gBAQA,cAAe5D,CAAAA,UAAU,CAACb,UAAU,CAACqE,MAAD,CAAV,CAAmBnD,eAAnB,CAAD,CAAzB","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { withRouter, Redirect } from 'react-router';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Querys lists of credit and debit TransactionBOs for an account of a customer from the backend.\n * The customers CustomerBO and AccountBO is recieved in the this.props.location.owner object as passed\n * by the AccountListEntry component through the React Router Link. \n * \n * @see See [AccountListEntry](#accountlistentry)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass TransactionList extends Component {\n\n  #myAccount = null;\n\n  constructor(props) {\n    super(props);\n\n    // Store the underlying AccountBO given from the calling link of the RouterLink of React Router\n    this.#myAccount = this.props.location.owner.account;\n\n    // Init an empty state\n    this.state = {\n      transactions: [],\n      transactionsLoadingInProgress: false,\n      creditsLoadingError: null,\n      debitsLoadingError: null,\n    };\n  }\n\n \n  /**\n   * Returns the underlying AccountBO given from the calling link of the RouterLink of React Router\n   */\n  getAccount() {\n    return this.#myAccount;\n  }\n\n  /**\n   * Compares two TransactioBOs to sort them by their id field. Sorts the lowest id first. \n   * The ID is used as replacement a timestamp.\n   * \n   * Returns -1 if a < b\n   * Returns 1 if a > b\n   * Returns 0 if a = b\n   * \n   * @param {TransactionBO} transactionA \n   * @param {TransactionBO} transactionB \n   */\n  transactionComparator(transactionA, transactionB) {\n    let result = 0;\n\n    if (transactionA.getID() < transactionB.getID()) {\n      result = -1;\n    }\n    if (transactionA.getID() > transactionB.getID()) {\n      result = 1;\n    }\n\n    return result;\n  }\n\n  /** \n   * Fetches credit and debit TransactionBOs from the backend. The two operations are chained. \n   * Credit and debit transactions are marked with the transaction type and then concatinated into one array \n   * of transactions. This array is then sorted with the transactionComparator function. \n   */\n  getTransactions = () => {\n    const { account } = this.props.location.owner;\n\n    BankAPI.getAPI().getCreditsForAccount(account.getID())\n      .then(creditTransactionBOs => {\n        BankAPI.getAPI().getDebitsForAccount(account.getID()).then(debitTransactionBOs => {\n          let transactions = creditTransactionBOs.concat(debitTransactionBOs);\n\n          // Sorts the transactions by ascending ID, since the ID can serve as a timestamp. \n          // A higher ID indicates a newer transaction.\n          transactions.sort(this.transactionComparator);\n\n          // set final state\n          this.setState({\n            transactions: transactions,\n            transactionsLoadingInProgress: false,\n            debitsLoadingError: null\n          })\n        }).catch(e => this.setState({\n          transactions: [],\n          debitsLoadingError: e,\n          transactionsLoadingInProgress: false,\n        }));\n\n        // set inter state\n        this.setState({\n          creditsLoadingError: null,\n        })\n      }).catch(e =>\n        this.setState({\n          transactions: [],\n          transactionsLoadingInProgress: false,\n          creditsLoadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      transactionsLoadingInProgress: true,\n      creditsLoadingError: null,\n      debitsLoadingError: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load only if the owner object is given\n    if (this.props.location.owner) {\n      this.getTransactions();\n    }\n  }\n\n  /** Render a single row in the transaction table */\n  renderTransactionRow(transaction, balance) {\n    // For accessibility, the first column is set to be a <th> element, with a scope of 'row'. \n    // This enables screen readers to identify a cell's value by it's row and column name.\n\n    let currencyFormatter = BankAPI.getAPI().getCurrencyFormatter();\n\n    return (\n      <TableRow key={transaction.getID()}>\n        <TableCell align='center' component='th' scope='row'>\n          {transaction.getID()}\n        </TableCell>\n        <TableCell align='center'>{transaction.getSourceAccount()}</TableCell>\n        <TableCell align='center'>{transaction.getTargetAccount()}</TableCell>\n\n        {\n          // Its a credit if this account is the target of the transaction\n          this.getAccount().getID() === transaction.getTargetAccount() ?\n            <React.Fragment>\n              <TableCell align='right'>{currencyFormatter.format(transaction.getAmount())}</TableCell>\n              <TableCell align='right'>{}</TableCell>\n            </React.Fragment>\n            :\n            <React.Fragment>\n              <TableCell align='left'>{}</TableCell>\n              <TableCell align='left'>{currencyFormatter.format(transaction.getAmount())}</TableCell>\n            </React.Fragment>\n        }\n        <TableCell align='center'>{currencyFormatter.format(balance)}</TableCell>\n      </TableRow>\n    );\n  }\n\n  /** Render the body of the table with all transactions */\n  renderTransactions() {\n    let balance = 0;\n\n    return this.state.transactions.map(transaction => {\n      if (this.getAccount().getID() === transaction.getTargetAccount()) {\n        // Its a credit, since this account is the target of the transaction\n        balance += transaction.getAmount();\n      } else {\n        balance -= transaction.getAmount();\n      }\n      return this.renderTransactionRow(transaction, balance);\n    });\n  }\n\n  /** Render the transaction table  */\n  renderTransactionTable() {\n    const { transactionsLoadingInProgress, creditsLoadingError, debitsLoadingError } = this.state;\n\n    if (!transactionsLoadingInProgress && !creditsLoadingError && !debitsLoadingError) {\n      return (\n        <TableContainer component={Paper}>\n          <Typography className={this.props.classes.tableHeader}>\n            List of transactions:\n          </Typography>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align='center'>ID</TableCell>\n                <TableCell align='center'>Source account</TableCell>\n                <TableCell align='center'>Target account</TableCell>\n                <TableCell align='right'>Credit</TableCell>\n                <TableCell align='left'>Debit</TableCell>\n                <TableCell align='center'>Balance</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderTransactions()}\n            </TableBody>\n          </Table>\n        </TableContainer>);\n    }\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    let owner = null;\n    if (this.props.location.owner) {\n      // owner object exists\n      owner = this.props.location.owner\n    } else {\n      // owner object does not exist, we are called directly by route URL \n      // or the page has been refreshed -> put the user back to start page\n      return (<Redirect to='/' />);\n    }\n\n    const { customer, account } = owner;\n    const { transactionsLoadingInProgress, creditsLoadingError, debitsLoadingError } = this.state;\n\n    return (\n      <div>\n        <Typography component='div' className={classes.subNav}>\n          <Link component={RouterLink} to={{\n            pathname: '/customers',\n            expandCustomer: customer\n          }}>\n            <Grid container spacing={1} justify='flex-start' alignItems='stretch'>\n              <Grid item>\n                <ArrowBackIcon />\n              </Grid>\n              <Grid item>\n                Back to customer list\n              </Grid>\n            </Grid>\n          </Link>\n        </Typography>\n\n        <Paper className={classes.root}>\n          <Typography variant='h6'>\n            Account\n          </Typography>\n          <Typography className={classes.accountEntry}>\n            ID: {account.getID()}\n          </Typography>\n          <Typography>\n            Customer: {customer.getLastName()}, {customer.getFirstName()}\n          </Typography>\n        </Paper>\n\n        {this.renderTransactionTable()}\n\n        <LoadingProgress show={transactionsLoadingInProgress} />\n        <ContextErrorMessage error={creditsLoadingError} contextErrorMsg={`The credits of account ${this.accountID} could not be loaded.`} onReload={this.getTransactions} />\n        <ContextErrorMessage error={debitsLoadingError} contextErrorMsg={`The debits of account ${this.accountID} could not be loaded.`} onReload={this.getTransactions} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1),\n  },\n  subNav: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  tableHeader: {\n    marginLeft: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  }\n});\n\n/** PropTypes */\nTransactionList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  match: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(TransactionList));"]},"metadata":{},"sourceType":"module"}