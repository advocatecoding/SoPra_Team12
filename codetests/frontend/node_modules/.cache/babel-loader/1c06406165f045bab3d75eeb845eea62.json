{"ast":null,"code":"import _classCallCheck from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _classPrivateFieldLooseBase from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";import _classPrivateFieldLooseKey from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";import CustomerBO from'./CustomerBO';import TransactionBO from'./TransactionBO';import AccountBO from'./AccountBO';/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */var _api=/*#__PURE__*/_classPrivateFieldLooseKey(\"api\");var _bankServerBaseURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"bankServerBaseURL\");var _currencyFormatter=/*#__PURE__*/_classPrivateFieldLooseKey(\"currencyFormatter\");var _currency=/*#__PURE__*/_classPrivateFieldLooseKey(\"currency\");var _getCustomersURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"getCustomersURL\");var _addCustomerURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"addCustomerURL\");var _getCustomerURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"getCustomerURL\");var _updateCustomerURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"updateCustomerURL\");var _deleteCustomerURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"deleteCustomerURL\");var _searchCustomerURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"searchCustomerURL\");var _getAllAccountsURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"getAllAccountsURL\");var _getAccountsForCustomerURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"getAccountsForCustomerURL\");var _addAccountsForCustomerURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"addAccountsForCustomerURL\");var _getBalanceForAccountURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"getBalanceForAccountURL\");var _deleteAccountIdURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"deleteAccountIdURL\");var _getCreditsForAccountIdURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"getCreditsForAccountIdURL\");var _getDebitsForAccountIdURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"getDebitsForAccountIdURL\");var _addTransactionURL=/*#__PURE__*/_classPrivateFieldLooseKey(\"addTransactionURL\");var _fetchAdvanced=/*#__PURE__*/_classPrivateFieldLooseKey(\"fetchAdvanced\");var BankAPI=/*#__PURE__*/function(){function BankAPI(){var _this=this;_classCallCheck(this,BankAPI);Object.defineProperty(this,_bankServerBaseURL,{writable:true,value:'/bank'});Object.defineProperty(this,_currencyFormatter,{writable:true,value:new Intl.NumberFormat('de-DE',{style:'currency',currency:'EUR'})});Object.defineProperty(this,_currency,{writable:true,value:'€'});Object.defineProperty(this,_getCustomersURL,{writable:true,value:function value(){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/customers\");}});Object.defineProperty(this,_addCustomerURL,{writable:true,value:function value(){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/customers\");}});Object.defineProperty(this,_getCustomerURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/customers/\").concat(id);}});Object.defineProperty(this,_updateCustomerURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/customers/\").concat(id);}});Object.defineProperty(this,_deleteCustomerURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/customers/\").concat(id);}});Object.defineProperty(this,_searchCustomerURL,{writable:true,value:function value(customerName){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/customers-by-name/\").concat(customerName);}});Object.defineProperty(this,_getAllAccountsURL,{writable:true,value:function value(){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/accounts\");}});Object.defineProperty(this,_getAccountsForCustomerURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/customers/\").concat(id,\"/accounts\");}});Object.defineProperty(this,_addAccountsForCustomerURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/customers/\").concat(id,\"/accounts\");}});Object.defineProperty(this,_getBalanceForAccountURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/accounts/\").concat(id,\"/balance\");}});Object.defineProperty(this,_deleteAccountIdURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/accounts/\").concat(id);}});Object.defineProperty(this,_getCreditsForAccountIdURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/account/\").concat(id,\"/credits\");}});Object.defineProperty(this,_getDebitsForAccountIdURL,{writable:true,value:function value(id){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/account/\").concat(id,\"/debits\");}});Object.defineProperty(this,_addTransactionURL,{writable:true,value:function value(){return\"\".concat(_classPrivateFieldLooseBase(_this,_bankServerBaseURL)[_bankServerBaseURL],\"/transactions\");}});Object.defineProperty(this,_fetchAdvanced,{writable:true,value:function value(url,init){return fetch(url,init).then(function(res){// The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \nif(!res.ok){throw Error(\"\".concat(res.status,\" \").concat(res.statusText));}return res.json();});}});}_createClass(BankAPI,[{key:\"getCurrencyFormatter\",value:/**\n   * Returns a formatter to format currencys of the transactions\n   * \n   * @public\n   */function getCurrencyFormatter(){return _classPrivateFieldLooseBase(this,_currencyFormatter)[_currencyFormatter];}/**\n   * Returns the code for the currency\n   * \n   * @public \n   */},{key:\"getCurrency\",value:function getCurrency(){return _classPrivateFieldLooseBase(this,_currency)[_currency];}/**\n   * Returns a Promise, which resolves to an Array of CustomerBOs\n   * \n   * @public\n   */},{key:\"getCustomers\",value:function getCustomers(){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_getCustomersURL)[_getCustomersURL]()).then(function(responseJSON){var customerBOs=CustomerBO.fromJSON(responseJSON);// console.info(customerBOs);\nreturn new Promise(function(resolve){resolve(customerBOs);});});}/**\n   * Returns a Promise, which resolves to a CustomerBO\n   * \n   * @param {Number} customerID to be retrieved\n   * @public\n   */},{key:\"getCustomer\",value:function getCustomer(customerID){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_getCustomerURL)[_getCustomerURL](customerID)).then(function(responseJSON){// We always get an array of CustomerBOs.fromJSON, but only need one object\nvar responseCustomerBO=CustomerBO.fromJSON(responseJSON)[0];// console.info(responseCustomerBO);\nreturn new Promise(function(resolve){resolve(responseCustomerBO);});});}/**\n   * Adds a customer and returns a Promise, which resolves to a new CustomerBO object with the \n   * firstName and lastName of the parameter customerBO object.\n   * \n   * @param {CustomerBO} customerBO to be added. The ID of the new customer is set by the backend\n   * @public\n   */},{key:\"addCustomer\",value:function addCustomer(customerBO){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_addCustomerURL)[_addCustomerURL](),{method:'POST',headers:{'Accept':'application/json, text/plain','Content-type':'application/json'},body:JSON.stringify(customerBO)}).then(function(responseJSON){// We always get an array of CustomerBOs.fromJSON, but only need one object\nvar responseCustomerBO=CustomerBO.fromJSON(responseJSON)[0];// console.info(accountBOs);\nreturn new Promise(function(resolve){resolve(responseCustomerBO);});});}/**\n   * Updates a customer and returns a Promise, which resolves to a CustomerBO.\n   * \n   * @param {CustomerBO} customerBO to be updated\n   * @public\n   */},{key:\"updateCustomer\",value:function updateCustomer(customerBO){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_updateCustomerURL)[_updateCustomerURL](customerBO.getID()),{method:'PUT',headers:{'Accept':'application/json, text/plain','Content-type':'application/json'},body:JSON.stringify(customerBO)}).then(function(responseJSON){// We always get an array of CustomerBOs.fromJSON\nvar responseCustomerBO=CustomerBO.fromJSON(responseJSON)[0];// console.info(accountBOs);\nreturn new Promise(function(resolve){resolve(responseCustomerBO);});});}/**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */},{key:\"deleteCustomer\",value:function deleteCustomer(customerID){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_deleteCustomerURL)[_deleteCustomerURL](customerID),{method:'DELETE'}).then(function(responseJSON){// We always get an array of CustomerBOs.fromJSON\nvar responseCustomerBO=CustomerBO.fromJSON(responseJSON)[0];// console.info(accountBOs);\nreturn new Promise(function(resolve){resolve(responseCustomerBO);});});}/**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */},{key:\"searchCustomer\",value:function searchCustomer(customerName){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_searchCustomerURL)[_searchCustomerURL](customerName)).then(function(responseJSON){var customerBOs=CustomerBO.fromJSON(responseJSON);// console.info(customerBOs);\nreturn new Promise(function(resolve){resolve(customerBOs);});});}/**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */},{key:\"getAllAccounts\",value:function getAllAccounts(){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_getAllAccountsURL)[_getAllAccountsURL]()).then(function(responseJSON){var accountBOs=AccountBO.fromJSON(responseJSON);// console.info(accountBOs);\nreturn new Promise(function(resolve){resolve(accountBOs);});});}/**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */},{key:\"getAccountsForCustomer\",value:function getAccountsForCustomer(customerID){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_getAccountsForCustomerURL)[_getAccountsForCustomerURL](customerID)).then(function(responseJSON){var accountBOs=AccountBO.fromJSON(responseJSON);// console.info(accountBOs);\nreturn new Promise(function(resolve){resolve(accountBOs);});});}/**\n   * Deletes the given account and returns a Promise, which resolves to an AccountBO\n   * \n   * @param accountID to be deleted\n   * @public\n   */},{key:\"deleteAccount\",value:function deleteAccount(accountID){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_deleteAccountIdURL)[_deleteAccountIdURL](accountID),{method:'DELETE'}).then(function(responseJSON){// We always get an array of AccountBO.fromJSON, but only need one object\nvar accountBOs=AccountBO.fromJSON(responseJSON)[0];// console.info(accountBOs);\nreturn new Promise(function(resolve){resolve(accountBOs);});});}/**\n   * Returns a Promise, which resolves to an AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be added to\n   * @public\n   */},{key:\"addAccountForCustomer\",value:function addAccountForCustomer(customerID){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_addAccountsForCustomerURL)[_addAccountsForCustomerURL](customerID),{method:'POST'}).then(function(responseJSON){// We always get an array of AccountBO.fromJSON, but only need one object\nvar accountBO=AccountBO.fromJSON(responseJSON)[0];// console.info(accountBO);\nreturn new Promise(function(resolve){// We expect only one new account\nresolve(accountBO);});});}/**\n   * Returns a Promise, which resolves to a balance\n   * \n   * @param {Number} accountID for which the balance should be retrieved\n   * @public\n   */},{key:\"getBalanceOfAccount\",value:function getBalanceOfAccount(accountBO){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_getBalanceForAccountURL)[_getBalanceForAccountURL](accountBO)).then(function(responseJSON){// console.log(responseJSON)\nreturn new Promise(function(resolve){resolve(responseJSON);});});}/**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the credit transactions should be retrieved\n   * @public\n   */},{key:\"getCreditsForAccount\",value:function getCreditsForAccount(accountID){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_getCreditsForAccountIdURL)[_getCreditsForAccountIdURL](accountID)).then(function(responseJSON){var transactionBOs=TransactionBO.fromJSON(responseJSON);// console.info(transactionBOs);\nreturn new Promise(function(resolve){resolve(transactionBOs);});});}/**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the debit transactions should be retrieved\n   * @public\n   */},{key:\"getDebitsForAccount\",value:function getDebitsForAccount(accountID){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_getDebitsForAccountIdURL)[_getDebitsForAccountIdURL](accountID)).then(function(responseJSON){var transactionBOs=TransactionBO.fromJSON(responseJSON);// console.info(transactionBOs);\nreturn new Promise(function(resolve){resolve(transactionBOs);});});}/**\n   * Returns a Promise, which resolves to the new TransactionBO\n   * \n   * @param {TransactionBO} transaction object \n   * @public\n   */},{key:\"addTransaction\",value:function addTransaction(transaction){return _classPrivateFieldLooseBase(this,_fetchAdvanced)[_fetchAdvanced](_classPrivateFieldLooseBase(this,_addTransactionURL)[_addTransactionURL](),{method:'POST',headers:{'Accept':'application/json, text/plain','Content-type':'application/json'},body:JSON.stringify(transaction)}).then(function(responseJSON){// We always get an array of TransactionBO.fromJSON, but only need one object\nvar tansactionBO=TransactionBO.fromJSON(responseJSON)[0];// console.info(accountBO);\nreturn new Promise(function(resolve){// We expect only one new account\nresolve(tansactionBO);});});}}],[{key:\"getAPI\",value:/** \n   * Get the Singelton instance \n   * \n   * @public\n   */function getAPI(){if(_classPrivateFieldLooseBase(this,_api)[_api]==null){_classPrivateFieldLooseBase(this,_api)[_api]=new BankAPI();}return _classPrivateFieldLooseBase(this,_api)[_api];}/**\n   *  Returns a Promise which resolves to a json object. \n   *  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n   *  fetchAdvanced throws an Error also an server status errors\n   */}]);return BankAPI;}();Object.defineProperty(BankAPI,_api,{writable:true,value:null});export{BankAPI as default};","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/api/BankAPI.js"],"names":["CustomerBO","TransactionBO","AccountBO","BankAPI","Intl","NumberFormat","style","currency","id","customerName","url","init","fetch","then","res","ok","Error","status","statusText","json","responseJSON","customerBOs","fromJSON","Promise","resolve","customerID","responseCustomerBO","customerBO","method","headers","body","JSON","stringify","getID","accountBOs","accountID","accountBO","transactionBOs","transaction","tansactionBO"],"mappings":"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","sourcesContent":["import CustomerBO from './CustomerBO';\nimport TransactionBO from './TransactionBO';\nimport AccountBO from './AccountBO';\n\n/**\n * Abstracts the REST interface of the Python backend with convenient access methods.\n * The class is implemented as a singleton. \n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nexport default class BankAPI {\n\n  // Singelton instance\n  static #api = null;\n\n\n  // Local Python backend\n  #bankServerBaseURL = '/bank';\n\n  // Local http-fake-backend \n  //#bankServerBaseURL = '/api/bank';\n\n  #currencyFormatter = new Intl.NumberFormat('de-DE', {\n    style: 'currency',\n    currency: 'EUR'\n  });\n\n  #currency = '€';\n\n  // Customer related\n  #getCustomersURL = () => `${this.#bankServerBaseURL}/customers`;\n  #addCustomerURL = () => `${this.#bankServerBaseURL}/customers`;\n  #getCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #updateCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #deleteCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}`;\n  #searchCustomerURL = (customerName) => `${this.#bankServerBaseURL}/customers-by-name/${customerName}`;\n\n\n  // Account related\n  #getAllAccountsURL = () => `${this.#bankServerBaseURL}/accounts`;\n  #getAccountsForCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}/accounts`;\n  #addAccountsForCustomerURL = (id) => `${this.#bankServerBaseURL}/customers/${id}/accounts`;\n  #getBalanceForAccountURL = (id) => `${this.#bankServerBaseURL}/accounts/${id}/balance`;\n  #deleteAccountIdURL = (id) => `${this.#bankServerBaseURL}/accounts/${id}`;\n\n  // Transaction related\n  #getCreditsForAccountIdURL = (id) => `${this.#bankServerBaseURL}/account/${id}/credits`;\n  #getDebitsForAccountIdURL = (id) => `${this.#bankServerBaseURL}/account/${id}/debits`;\n  #addTransactionURL = () => `${this.#bankServerBaseURL}/transactions`;\n\n  /** \n   * Get the Singelton instance \n   * \n   * @public\n   */\n  static getAPI() {\n    if (this.#api == null) {\n      this.#api = new BankAPI();\n    }\n    return this.#api;\n  }\n\n  /**\n   *  Returns a Promise which resolves to a json object. \n   *  The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n   *  fetchAdvanced throws an Error also an server status errors\n   */\n  #fetchAdvanced = (url, init) => fetch(url, init)\n    .then(res => {\n      // The Promise returned from fetch() won’t reject on HTTP error status even if the response is an HTTP 404 or 500. \n      if (!res.ok) {\n        throw Error(`${res.status} ${res.statusText}`);\n      }\n      return res.json();\n    }\n    )\n\n  /**\n   * Returns a formatter to format currencys of the transactions\n   * \n   * @public\n   */\n  getCurrencyFormatter() {\n    return this.#currencyFormatter;\n  }\n\n  /**\n   * Returns the code for the currency\n   * \n   * @public \n   */\n  getCurrency() {\n    return this.#currency;\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of CustomerBOs\n   * \n   * @public\n   */\n  getCustomers() {\n    return this.#fetchAdvanced(this.#getCustomersURL()).then((responseJSON) => {\n      let customerBOs = CustomerBO.fromJSON(responseJSON);\n      // console.info(customerBOs);\n      return new Promise(function (resolve) {\n        resolve(customerBOs);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to a CustomerBO\n   * \n   * @param {Number} customerID to be retrieved\n   * @public\n   */\n  getCustomer(customerID) {\n    return this.#fetchAdvanced(this.#getCustomerURL(customerID)).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON, but only need one object\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(responseCustomerBO);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Adds a customer and returns a Promise, which resolves to a new CustomerBO object with the \n   * firstName and lastName of the parameter customerBO object.\n   * \n   * @param {CustomerBO} customerBO to be added. The ID of the new customer is set by the backend\n   * @public\n   */\n  addCustomer(customerBO) {\n    return this.#fetchAdvanced(this.#addCustomerURL(), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(customerBO)\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON, but only need one object\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Updates a customer and returns a Promise, which resolves to a CustomerBO.\n   * \n   * @param {CustomerBO} customerBO to be updated\n   * @public\n   */\n  updateCustomer(customerBO) {\n    return this.#fetchAdvanced(this.#updateCustomerURL(customerBO.getID()), {\n      method: 'PUT',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(customerBO)\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */\n  deleteCustomer(customerID) {\n    return this.#fetchAdvanced(this.#deleteCustomerURL(customerID), {\n      method: 'DELETE'\n    }).then((responseJSON) => {\n      // We always get an array of CustomerBOs.fromJSON\n      let responseCustomerBO = CustomerBO.fromJSON(responseJSON)[0];\n      // console.info(accountBOs);\n      return new Promise(function (resolve) {\n        resolve(responseCustomerBO);\n      })\n    })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID to be deleted\n   * @public\n   */\n  searchCustomer(customerName) {\n    return this.#fetchAdvanced(this.#searchCustomerURL(customerName)).then((responseJSON) => {\n      let customerBOs = CustomerBO.fromJSON(responseJSON);\n      // console.info(customerBOs);\n      return new Promise(function (resolve) {\n        resolve(customerBOs);\n      })\n    })\n  }\n\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */\n  getAllAccounts() {\n    return this.#fetchAdvanced(this.#getAllAccountsURL())\n      .then((responseJSON) => {\n        let accountBOs = AccountBO.fromJSON(responseJSON);\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n\n  /**\n   * Returns a Promise, which resolves to an Array of AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be retrieved\n   * @public\n   */\n  getAccountsForCustomer(customerID) {\n    return this.#fetchAdvanced(this.#getAccountsForCustomerURL(customerID))\n      .then((responseJSON) => {\n        let accountBOs = AccountBO.fromJSON(responseJSON);\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n  /**\n   * Deletes the given account and returns a Promise, which resolves to an AccountBO\n   * \n   * @param accountID to be deleted\n   * @public\n   */\n  deleteAccount(accountID) {\n    return this.#fetchAdvanced(this.#deleteAccountIdURL(accountID), {\n      method: 'DELETE'\n    })\n      .then((responseJSON) => {\n        // We always get an array of AccountBO.fromJSON, but only need one object\n        let accountBOs = AccountBO.fromJSON(responseJSON)[0];\n        // console.info(accountBOs);\n        return new Promise(function (resolve) {\n          resolve(accountBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an AccountBOs\n   * \n   * @param {Number} customerID for which the the accounts should be added to\n   * @public\n   */\n  addAccountForCustomer(customerID) {\n    return this.#fetchAdvanced(this.#addAccountsForCustomerURL(customerID), {\n      method: 'POST'\n    })\n      .then((responseJSON) => {\n        // We always get an array of AccountBO.fromJSON, but only need one object\n        let accountBO = AccountBO.fromJSON(responseJSON)[0];\n        // console.info(accountBO);\n        return new Promise(function (resolve) {\n          // We expect only one new account\n          resolve(accountBO);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to a balance\n   * \n   * @param {Number} accountID for which the balance should be retrieved\n   * @public\n   */\n  getBalanceOfAccount(accountBO) {\n    return this.#fetchAdvanced(this.#getBalanceForAccountURL(accountBO))\n      .then(responseJSON => {\n        // console.log(responseJSON)\n        return new Promise(function (resolve) {\n          resolve(responseJSON);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the credit transactions should be retrieved\n   * @public\n   */\n  getCreditsForAccount(accountID) {\n    return this.#fetchAdvanced(this.#getCreditsForAccountIdURL(accountID))\n      .then(responseJSON => {\n        let transactionBOs = TransactionBO.fromJSON(responseJSON);\n        // console.info(transactionBOs);\n        return new Promise(function (resolve) {\n          resolve(transactionBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to an Array of TransactionBOs\n   * \n   * @param {Number} accountID for which the debit transactions should be retrieved\n   * @public\n   */\n  getDebitsForAccount(accountID) {\n    return this.#fetchAdvanced(this.#getDebitsForAccountIdURL(accountID))\n      .then(responseJSON => {\n        let transactionBOs = TransactionBO.fromJSON(responseJSON);\n        // console.info(transactionBOs);\n        return new Promise(function (resolve) {\n          resolve(transactionBOs);\n        })\n      })\n  }\n\n  /**\n   * Returns a Promise, which resolves to the new TransactionBO\n   * \n   * @param {TransactionBO} transaction object \n   * @public\n   */\n  addTransaction(transaction) {\n    return this.#fetchAdvanced(this.#addTransactionURL(), {\n      method: 'POST',\n      headers: {\n        'Accept': 'application/json, text/plain',\n        'Content-type': 'application/json',\n      },\n      body: JSON.stringify(transaction)\n    }).then((responseJSON) => {\n      // We always get an array of TransactionBO.fromJSON, but only need one object\n      let tansactionBO = TransactionBO.fromJSON(responseJSON)[0];\n      // console.info(accountBO);\n      return new Promise(function (resolve) {\n        // We expect only one new account\n        resolve(tansactionBO);\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"module"}