{"ast":null,"code":"import _defineProperty from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";import _createForOfIteratorHelper from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";import _asyncToGenerator from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";import _classCallCheck from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";import _createClass from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createClass.js\";import _inherits from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/inherits.js\";import _createSuper from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/createSuper.js\";import _regeneratorRuntime from\"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/regenerator/index.js\";import React,{Component}from'react';import{withStyles,Button,IconButton,Dialog,DialogContent,DialogTitle,TextField,Typography,InputAdornment,MenuItem,DialogActions,Grid}from'@material-ui/core';import CloseIcon from'@material-ui/icons/Close';import SearchIcon from'@material-ui/icons/Search';import{BankAPI,TransactionBO}from'../../api';import ContextErrorMessage from'./ContextErrorMessage';import LoadingProgress from'./LoadingProgress';/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var MoneyTransferDialog=/*#__PURE__*/function(_Component){_inherits(MoneyTransferDialog,_Component);var _super=_createSuper(MoneyTransferDialog);function MoneyTransferDialog(props){var _this;_classCallCheck(this,MoneyTransferDialog);_this=_super.call(this,props);// Init the state\n_this.initialState={// TextField values\ncustomerName:'',transferAmount:'',// search state is null\ntargetCustomers:[],// The selected CustomerBO\nselectedCustomer:null,// Selected accountBO in the accounts array\nselectedAccount:null,// TextField validation errors\ntransferAmountValidationFailed:false,transferAmountFieldEdited:false,// Network states\nloadingInProgress:false,customerSearchError:null,transactionError:null};_this.searchCustomer=/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var customerName,customers,_iterator,_step,customer,accounts,selectedCustomer,selectedAccount;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:customerName=_this.state.customerName;if(!(customerName.length>0)){_context.next=38;break;}_context.prev=2;// set loading to true\n_this.setState({targetCustomers:[],// Set empty array\nselectedCustomer:null,// the initial customer\nloadingInProgress:true,// show loading indicator\ncustomerSearchError:null// disable error message\n});// Load customers first\n_context.next=6;return BankAPI.getAPI().searchCustomer(customerName);case 6:customers=_context.sent;// load accounts of each customers step by step and inject the acounts into the CustomerBO\n_iterator=_createForOfIteratorHelper(customers);_context.prev=8;_iterator.s();case 10:if((_step=_iterator.n()).done){_context.next=18;break;}customer=_step.value;_context.next=14;return BankAPI.getAPI().getAccountsForCustomer(customer.getID());case 14:accounts=_context.sent;// Call sucessfull \ncustomer.accounts=accounts;case 16:_context.next=10;break;case 18:_context.next=23;break;case 20:_context.prev=20;_context.t0=_context[\"catch\"](8);_iterator.e(_context.t0);case 23:_context.prev=23;_iterator.f();return _context.finish(23);case 26:// Init the selections \nselectedCustomer=null;selectedAccount=null;if(customers.length>0){selectedCustomer=customers[0];}if(selectedCustomer.accounts.length>0){selectedAccount=selectedCustomer.accounts[0];}// Set the final state\n_this.setState({targetCustomers:customers,selectedCustomer:selectedCustomer,// the initially selected customer\nselectedAccount:selectedAccount,// the initially selected account\nloadingInProgress:false,// disable loading indicator \ncustomerSearchError:null// no error message\n});_context.next=36;break;case 33:_context.prev=33;_context.t1=_context[\"catch\"](2);_this.setState({targetCustomers:[],// Set empty array\nselectedCustomer:null,loadingInProgress:false,// disable loading indicator \ncustomerSearchError:_context.t1// show error message\n});case 36:_context.next=39;break;case 38:_this.setState({customerNotFound:true});case 39:case\"end\":return _context.stop();}}},_callee,null,[[2,33],[8,20,23,26]]);}));_this.transferMoney=function(){var account=_this.props.account;var _this$state=_this.state,selectedAccount=_this$state.selectedAccount,transferAmount=_this$state.transferAmount;var amount=transferAmount.replace(/,/g,'.');var transaction=new TransactionBO(account.getID(),selectedAccount.getID(),amount);BankAPI.getAPI().addTransaction(transaction).then(function(transaction){_this.setState({loadingInProgress:false,// disable loading indicator \ntransactionError:null// show error message\n});_this.handleClose(transaction);}).catch(function(e){_this.setState({loadingInProgress:false,// disable loading indicator \ntransactionError:e// show error message\n});});_this.setState({loadingInProgress:true,// disable loading indicator \ntransactionError:null// show error message\n});};_this.handleClose=function(transaction){// Reset the state\n_this.setState(_this.initialState);_this.props.onClose(transaction);};_this.textFieldValueChange=function(event){var val=event.target.value;// Validate the amount field\nif(event.target.id==='transferAmount'){var result=false;var amount=val.replace(/,/g,'.');if(amount.length===0){// length must not be 0\nresult=true;}if(isNaN(amount)){// Its not a numer in the text field\nresult=true;}_this.setState({transferAmountValidationFailed:result,transferAmountFieldEdited:true});}_this.setState(_defineProperty({},event.target.id,val));};_this.customerSelectionChange=function(event){var customer=event.target.value;var selectedAccount=null;if(customer.accounts.length>0){selectedAccount=customer.accounts[0];}_this.setState({selectedCustomer:customer,selectedAccount:selectedAccount});};_this.accountSelectionChange=function(event){var selectedAccount=event.target.value;_this.setState({selectedAccount:selectedAccount});};_this.state=_this.initialState;return _this;}/** Searches for customers with a customerName and loads the corresponding accounts */_createClass(MoneyTransferDialog,[{key:\"render\",value:/** Renders the component */function render(){var _this$props=this.props,classes=_this$props.classes,show=_this$props.show,customer=_this$props.customer,account=_this$props.account;var _this$state2=this.state,customerName=_this$state2.customerName,targetCustomers=_this$state2.targetCustomers,selectedCustomer=_this$state2.selectedCustomer,customerNotFound=_this$state2.customerNotFound,selectedAccount=_this$state2.selectedAccount,loadingInProgress=_this$state2.loadingInProgress,transferAmountValidationFailed=_this$state2.transferAmountValidationFailed,transferAmountFieldEdited=_this$state2.transferAmountFieldEdited,customerSearchError=_this$state2.customerSearchError,transactionError=_this$state2.transactionError;return show?/*#__PURE__*/_jsxs(Dialog,{open:show,onClose:this.handleClose,maxWidth:\"md\",children:[/*#__PURE__*/_jsxs(DialogTitle,{id:\"form-dialog-title\",children:[\"Transfer money\",/*#__PURE__*/_jsx(IconButton,{className:classes.closeButton,onClick:this.handleClose,children:/*#__PURE__*/_jsx(CloseIcon,{})})]}),/*#__PURE__*/_jsxs(DialogContent,{children:[/*#__PURE__*/_jsxs(Grid,{container:true,spacing:1,children:[/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",children:[\"From customer: \",customer.getLastName(),\", \",customer.getFirstName()]})}),/*#__PURE__*/_jsx(Grid,{item:true,xs:6,children:/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",children:[\"Account: \",account.getID()]})})]}),/*#__PURE__*/_jsxs(Typography,{variant:\"body1\",children:[/*#__PURE__*/_jsx(\"br\",{}),\"to customer:\"]}),/*#__PURE__*/_jsxs(\"form\",{noValidate:true,autoComplete:\"off\",children:[// show a search text field if there are no searchedCustomer yet\ntargetCustomers.length===0?/*#__PURE__*/_jsx(TextField,{autoFocus:true,fullWidth:true,margin:\"normal\",type:\"text\",required:true,id:\"customerName\",label:\"Customer name:\",onChange:this.textFieldValueChange,onBlur:this.searchCustomer,error:customerNotFound,helperText:customerNotFound?'No customers with the given name have been found':' ',InputProps:{endAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"end\",children:/*#__PURE__*/_jsx(IconButton,{onClick:this.searchCustomer,children:/*#__PURE__*/_jsx(SearchIcon,{})})})}}):/*#__PURE__*/ // Show a selection of targetCustomers, if there are any. Provide no search button. \n_jsx(TextField,{select:true,autoFocus:true,fullWidth:true,margin:\"normal\",type:\"text\",required:true,id:\"customerName\",label:\"Customer name:\",value:selectedCustomer,onChange:this.customerSelectionChange,children:this.state.targetCustomers.map(function(customer){return/*#__PURE__*/_jsxs(MenuItem,{value:customer,children:[customer.getLastName(),\", \",customer.getFirstName()]},customer.getID());})}),// Render the account select field\nselectedAccount?/*#__PURE__*/_jsx(TextField,{select:true,fullWidth:true,margin:\"normal\",type:\"text\",required:true,id:\"account\",label:\"Target account:\",value:selectedAccount,onChange:this.accountSelectionChange,children:selectedCustomer.accounts.map(function(account){return/*#__PURE__*/_jsx(MenuItem,{value:account,children:account.getID()},account.getID());})}):/*#__PURE__*/_jsx(TextField,{select:true,fullWidth:true,margin:\"normal\",type:\"text\",required:true,id:\"account\",label:\"Target account:\",value:0,onChange:this.accountSelectionChange,children:/*#__PURE__*/_jsx(MenuItem,{value:0,children:\"No accounts found\"})}),/*#__PURE__*/_jsx(TextField,{fullWidth:true,margin:\"normal\",type:\"text\",required:true,id:\"transferAmount\",label:\"Amount:\",onChange:this.textFieldValueChange,error:transferAmountValidationFailed,helperText:transferAmountValidationFailed?'The amount must be a number':' ',InputProps:{startAdornment:/*#__PURE__*/_jsx(InputAdornment,{position:\"start\",children:BankAPI.getAPI().getCurrency()})}})]}),/*#__PURE__*/_jsx(LoadingProgress,{show:loadingInProgress}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:customerSearchError,contextErrorMsg:\"Customer \".concat(customerName,\" could not be searched.\"),onReload:this.searchCustomer}),/*#__PURE__*/_jsx(ContextErrorMessage,{error:transactionError,contextErrorMsg:\"Transaction could not be executed.\",onReload:this.transferMoney})]}),/*#__PURE__*/_jsxs(DialogActions,{children:[/*#__PURE__*/_jsx(Button,{onClick:this.handleClose,color:\"secondary\",children:\"Cancel\"}),/*#__PURE__*/_jsx(Button,{disabled:!selectedCustomer||!selectedAccount||!transferAmountFieldEdited||transferAmountValidationFailed,variant:\"contained\",color:\"primary\",onClick:this.transferMoney,children:\"Transfer\"})]})]}):null;}}]);return MoneyTransferDialog;}(Component);/** Component specific styles */var styles=function styles(theme){return{closeButton:{position:'absolute',right:theme.spacing(1),top:theme.spacing(1),color:theme.palette.grey[500]}};};/** PropTypes */export default withStyles(styles)(MoneyTransferDialog);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/dialogs/MoneyTransferDialog.js"],"names":["React","Component","withStyles","Button","IconButton","Dialog","DialogContent","DialogTitle","TextField","Typography","InputAdornment","MenuItem","DialogActions","Grid","CloseIcon","SearchIcon","BankAPI","TransactionBO","ContextErrorMessage","LoadingProgress","MoneyTransferDialog","props","initialState","customerName","transferAmount","targetCustomers","selectedCustomer","selectedAccount","transferAmountValidationFailed","transferAmountFieldEdited","loadingInProgress","customerSearchError","transactionError","searchCustomer","state","length","setState","getAPI","customers","customer","getAccountsForCustomer","getID","accounts","customerNotFound","transferMoney","account","amount","replace","transaction","addTransaction","then","handleClose","catch","e","onClose","textFieldValueChange","event","val","target","value","id","result","isNaN","customerSelectionChange","accountSelectionChange","classes","show","closeButton","getLastName","getFirstName","endAdornment","map","startAdornment","getCurrency","styles","theme","position","right","spacing","top","color","palette","grey"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogContent, DialogTitle, TextField, Typography, InputAdornment, MenuItem, DialogActions, Grid } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { BankAPI, TransactionBO } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n\n/**\n * Shows a modal form dialog for a CustomerBO in prop customer. If the customer is set, the dialog is configured \n * as an edit dialog and the text fields of the form are filled from the given CustomerBO object. \n * If the customer is null, the dialog is configured as a new customer dialog and the textfields are empty.\n * In dependency of the edit/new state, the respective backend calls are made to update or create a customer. \n * After that, the function of the onClose prop is called with the created/update CustomerBO object as parameter.  \n * When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * @see See Material-UIs [TextField](https://material-ui.com/components/text-fields//)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass MoneyTransferDialog extends Component {\n\n  initialState = {\n    // TextField values\n    customerName: '',\n    transferAmount: '',\n    // search state is null\n    targetCustomers: [],\n    // The selected CustomerBO\n    selectedCustomer: null,\n    // Selected accountBO in the accounts array\n    selectedAccount: null,\n    // TextField validation errors\n    transferAmountValidationFailed: false,\n    transferAmountFieldEdited: false,\n    // Network states\n    loadingInProgress: false,\n    customerSearchError: null,\n    transactionError: null\n  };\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = this.initialState;\n  }\n\n  /** Searches for customers with a customerName and loads the corresponding accounts */\n  searchCustomer = async () => {\n    const { customerName } = this.state;\n    if (customerName.length > 0) {\n      try {\n        // set loading to true\n        this.setState({\n          targetCustomers: [],              // Set empty array\n          selectedCustomer: null,               // the initial customer\n          loadingInProgress: true,              // show loading indicator\n          customerSearchError: null             // disable error message\n        });\n\n        // Load customers first\n        const customers = await BankAPI.getAPI().searchCustomer(customerName);\n\n        // load accounts of each customers step by step and inject the acounts into the CustomerBO\n        for (const customer of customers) {\n          // Load account for each found customer\n          let accounts = await BankAPI.getAPI().getAccountsForCustomer(customer.getID());\n          // Call sucessfull \n          customer.accounts = accounts;\n        }\n\n        // Init the selections \n        let selectedCustomer = null;\n        let selectedAccount = null;\n\n        if (customers.length > 0) {\n          selectedCustomer = customers[0];\n        }\n\n        if (selectedCustomer.accounts.length > 0) {\n          selectedAccount = selectedCustomer.accounts[0];\n        }\n\n        // Set the final state\n        this.setState({\n          targetCustomers: customers,\n          selectedCustomer: selectedCustomer, // the initially selected customer\n          selectedAccount: selectedAccount,   // the initially selected account\n          loadingInProgress: false,           // disable loading indicator \n          customerSearchError: null           // no error message\n        });\n      } catch (e) {\n        this.setState({\n          targetCustomers: [],              // Set empty array\n          selectedCustomer: null,\n          loadingInProgress: false,           // disable loading indicator \n          customerSearchError: e              // show error message\n        });\n      }\n    } else {\n      this.setState({\n        customerNotFound: true\n      });\n    }\n  }\n\n  /** Executes the requested transfer transaction */\n  transferMoney = () => {\n    const { account } = this.props;\n    const { selectedAccount, transferAmount } = this.state;\n    let amount = transferAmount.replace(/,/g, '.');\n\n    const transaction = new TransactionBO(account.getID(), selectedAccount.getID(), amount);\n\n    BankAPI.getAPI().addTransaction(transaction).then(transaction => {\n      this.setState({\n        loadingInProgress: false,        // disable loading indicator \n        transactionError: null             // show error message\n      });\n      this.handleClose(transaction);\n    }).catch(e => {\n      this.setState({\n        loadingInProgress: false,        // disable loading indicator \n        transactionError: e              // show error message\n      });\n    });\n    this.setState({\n      loadingInProgress: true,        // disable loading indicator \n      transactionError: null          // show error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = (transaction) => {\n    // Reset the state\n    this.setState(this.initialState);\n    this.props.onClose(transaction);\n  }\n\n  /** Handles value changes of the forms textfields and validates the transferAmout field */\n  textFieldValueChange = (event) => {\n    const val = event.target.value;\n    // Validate the amount field\n    if (event.target.id === 'transferAmount') {\n      let result = false;\n      let amount = val.replace(/,/g, '.');\n      if (amount.length === 0) {\n        // length must not be 0\n        result = true;\n      }\n      if (isNaN(amount)) {\n        // Its not a numer in the text field\n        result = true;\n      }\n      this.setState({\n        transferAmountValidationFailed: result,\n        transferAmountFieldEdited: true\n      });\n    }\n    this.setState({\n      [event.target.id]: val\n    });\n  }\n\n  /** Handles value changes of the customer select textfield */\n  customerSelectionChange = (event) => {\n    let customer = event.target.value;\n    let selectedAccount = null;\n\n    if (customer.accounts.length > 0) {\n      selectedAccount = customer.accounts[0]\n    }\n\n    this.setState({\n      selectedCustomer: customer,\n      selectedAccount: selectedAccount,\n    });\n  }\n\n  /** Handles value changes of the customer select textfield */\n  accountSelectionChange = (event) => {\n    let selectedAccount = event.target.value;\n    this.setState({\n      selectedAccount: selectedAccount\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, show, customer, account } = this.props;\n    const { customerName, targetCustomers, selectedCustomer, customerNotFound, selectedAccount, loadingInProgress,\n      transferAmountValidationFailed, transferAmountFieldEdited, customerSearchError, transactionError } = this.state;\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose} maxWidth='md'>\n          <DialogTitle id='form-dialog-title'>Transfer money\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <Grid container spacing={1}>\n              <Grid item xs={6}>\n                <Typography variant='body1'>\n                  From customer: {customer.getLastName()}, {customer.getFirstName()}\n                </Typography>\n              </Grid>\n              <Grid item xs={6}>\n                <Typography variant='body1'>\n                  Account: {account.getID()}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Typography variant='body1'>\n              <br/>\n              to customer:\n            </Typography>\n\n            <form noValidate autoComplete='off'>\n              {\n                // show a search text field if there are no searchedCustomer yet\n                (targetCustomers.length === 0) ?\n                  <TextField autoFocus fullWidth margin='normal' type='text' required id='customerName' label='Customer name:'\n                    onChange={this.textFieldValueChange}\n                    onBlur={this.searchCustomer}\n                    error={customerNotFound}\n                    helperText={customerNotFound ? 'No customers with the given name have been found' : ' '}\n                    InputProps={{\n                      endAdornment: <InputAdornment position='end'>\n                        <IconButton onClick={this.searchCustomer}>\n                          <SearchIcon />\n                        </IconButton>\n                      </InputAdornment>,\n                    }} />\n                  :\n                  // Show a selection of targetCustomers, if there are any. Provide no search button. \n                  <TextField select autoFocus fullWidth margin='normal' type='text' required id='customerName' label='Customer name:'\n                    value={selectedCustomer}\n                    onChange={this.customerSelectionChange}>\n                    {\n                      this.state.targetCustomers.map((customer) => (\n                        <MenuItem key={customer.getID()} value={customer}>\n                          {customer.getLastName()}, {customer.getFirstName()}\n                        </MenuItem>\n                      ))\n                    }\n                  </TextField>\n              }\n              {\n                // Render the account select field\n                selectedAccount ?\n                  <TextField select fullWidth margin='normal' type='text' required id='account' label='Target account:'\n                    value={selectedAccount}\n                    onChange={this.accountSelectionChange}>\n                    {\n                      selectedCustomer.accounts.map((account) => (\n                        <MenuItem key={account.getID()} value={account}>\n                          {account.getID()}\n                        </MenuItem>\n                      ))\n                    }\n                  </TextField>\n                  :\n                  <TextField select fullWidth margin='normal' type='text' required id='account' label='Target account:'\n                    value={0}\n                    onChange={this.accountSelectionChange}>\n                    <MenuItem value={0}>\n                      No accounts found\n                  </MenuItem>\n                  </TextField>\n              }\n\n              <TextField fullWidth margin='normal' type='text' required id='transferAmount' label='Amount:'\n                onChange={this.textFieldValueChange}\n                error={transferAmountValidationFailed}\n                helperText={transferAmountValidationFailed ? 'The amount must be a number' : ' '}\n                InputProps={{\n                  startAdornment: <InputAdornment position='start'>{BankAPI.getAPI().getCurrency()}\n                  </InputAdornment>,\n                }}\n              />\n            </form>\n            <LoadingProgress show={loadingInProgress} />\n            <ContextErrorMessage error={customerSearchError} contextErrorMsg={`Customer ${customerName} could not be searched.`} onReload={this.searchCustomer} />\n            <ContextErrorMessage error={transactionError} contextErrorMsg={`Transaction could not be executed.`} onReload={this.transferMoney} />\n\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            <Button disabled={!selectedCustomer || !selectedAccount || !transferAmountFieldEdited || transferAmountValidationFailed} variant='contained' color='primary' onClick={this.transferMoney}>\n              Transfer\n            </Button>\n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nMoneyTransferDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO for whom to transfer */\n  customer: PropTypes.object.isRequired,\n  /** The AccountBO from which to transfer */\n  account: PropTypes.object.isRequired,\n  /** If true, the form is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the performed TransactionBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(TransactionBO transaction);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(MoneyTransferDialog);\n\n"]},"metadata":{},"sourceType":"module"}