{"ast":null,"code":"import _classPrivateFieldLooseBase from \"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseBase.js\";\nimport _classPrivateFieldLooseKey from \"/Users/macbookpro/Desktop/Bank/frontend/node_modules/@babel/runtime/helpers/esm/classPrivateFieldLooseKey.js\";\nvar _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/TransactionList.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { withRouter, Redirect } from 'react-router';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n/**\n * Querys lists of credit and debit TransactionBOs for an account of a customer from the backend.\n * The customers CustomerBO and AccountBO is recieved in the this.props.location.owner object as passed\n * by the AccountListEntry component through the React Router Link. \n * \n * @see See [AccountListEntry](#accountlistentry)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _myAccount = /*#__PURE__*/_classPrivateFieldLooseKey(\"myAccount\");\n\nclass TransactionList extends Component {\n  constructor(props) {\n    super(props); // Store the underlying AccountBO given from the calling link of the RouterLink of React Router\n\n    Object.defineProperty(this, _myAccount, {\n      writable: true,\n      value: null\n    });\n\n    this.getTransactions = () => {\n      const {\n        account\n      } = this.props.location.owner;\n      BankAPI.getAPI().getCreditsForAccount(account.getID()).then(creditTransactionBOs => {\n        BankAPI.getAPI().getDebitsForAccount(account.getID()).then(debitTransactionBOs => {\n          let transactions = creditTransactionBOs.concat(debitTransactionBOs); // Sorts the transactions by ascending ID, since the ID can serve as a timestamp. \n          // A higher ID indicates a newer transaction.\n\n          transactions.sort(this.transactionComparator); // set final state\n\n          this.setState({\n            transactions: transactions,\n            transactionsLoadingInProgress: false,\n            debitsLoadingError: null\n          });\n        }).catch(e => this.setState({\n          transactions: [],\n          debitsLoadingError: e,\n          transactionsLoadingInProgress: false\n        })); // set inter state\n\n        this.setState({\n          creditsLoadingError: null\n        });\n      }).catch(e => this.setState({\n        transactions: [],\n        transactionsLoadingInProgress: false,\n        creditsLoadingError: e\n      })); // set loading to true\n\n      this.setState({\n        transactionsLoadingInProgress: true,\n        creditsLoadingError: null,\n        debitsLoadingError: null\n      });\n    };\n\n    _classPrivateFieldLooseBase(this, _myAccount)[_myAccount] = this.props.location.owner.account; // Init an empty state\n\n    this.state = {\n      transactions: [],\n      transactionsLoadingInProgress: false,\n      creditsLoadingError: null,\n      debitsLoadingError: null\n    };\n  }\n  /**\n   * Returns the underlying AccountBO given from the calling link of the RouterLink of React Router\n   */\n\n\n  getAccount() {\n    return _classPrivateFieldLooseBase(this, _myAccount)[_myAccount];\n  }\n  /**\n   * Compares two TransactioBOs to sort them by their id field. Sorts the lowest id first. \n   * The ID is used as replacement a timestamp.\n   * \n   * Returns -1 if a < b\n   * Returns 1 if a > b\n   * Returns 0 if a = b\n   * \n   * @param {TransactionBO} transactionA \n   * @param {TransactionBO} transactionB \n   */\n\n\n  transactionComparator(transactionA, transactionB) {\n    let result = 0;\n\n    if (transactionA.getID() < transactionB.getID()) {\n      result = -1;\n    }\n\n    if (transactionA.getID() > transactionB.getID()) {\n      result = 1;\n    }\n\n    return result;\n  }\n  /** \n   * Fetches credit and debit TransactionBOs from the backend. The two operations are chained. \n   * Credit and debit transactions are marked with the transaction type and then concatinated into one array \n   * of transactions. This array is then sorted with the transactionComparator function. \n   */\n\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load only if the owner object is given\n    if (this.props.location.owner) {\n      this.getTransactions();\n    }\n  }\n  /** Render a single row in the transaction table */\n\n\n  renderTransactionRow(transaction, balance) {\n    // For accessibility, the first column is set to be a <th> element, with a scope of 'row'. \n    // This enables screen readers to identify a cell's value by it's row and column name.\n    let currencyFormatter = BankAPI.getAPI().getCurrencyFormatter();\n    return /*#__PURE__*/_jsxDEV(TableRow, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"center\",\n        component: \"th\",\n        scope: \"row\",\n        children: transaction.getID()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"center\",\n        children: transaction.getSourceAccount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"center\",\n        children: transaction.getTargetAccount()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), // Its a credit if this account is the target of the transaction\n      this.getAccount().getID() === transaction.getTargetAccount() ? /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          align: \"right\",\n          children: currencyFormatter.format(transaction.getAmount())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          align: \"right\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 13\n      }, this) : /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: [/*#__PURE__*/_jsxDEV(TableCell, {\n          align: \"left\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n          align: \"left\",\n          children: currencyFormatter.format(transaction.getAmount())\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n        align: \"center\",\n        children: currencyFormatter.format(balance)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, transaction.getID(), true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, this);\n  }\n  /** Render the body of the table with all transactions */\n\n\n  renderTransactions() {\n    let balance = 0;\n    return this.state.transactions.map(transaction => {\n      if (this.getAccount().getID() === transaction.getTargetAccount()) {\n        // Its a credit, since this account is the target of the transaction\n        balance += transaction.getAmount();\n      } else {\n        balance -= transaction.getAmount();\n      }\n\n      return this.renderTransactionRow(transaction, balance);\n    });\n  }\n  /** Render the transaction table  */\n\n\n  renderTransactionTable() {\n    const {\n      transactionsLoadingInProgress,\n      creditsLoadingError,\n      debitsLoadingError\n    } = this.state;\n\n    if (!transactionsLoadingInProgress && !creditsLoadingError && !debitsLoadingError) {\n      return /*#__PURE__*/_jsxDEV(TableContainer, {\n        component: Paper,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          className: this.props.classes.tableHeader,\n          children: \"List of transactions:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Table, {\n          children: [/*#__PURE__*/_jsxDEV(TableHead, {\n            children: /*#__PURE__*/_jsxDEV(TableRow, {\n              children: [/*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: \"ID\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 191,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: \"Source account\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 192,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: \"Target account\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 193,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"right\",\n                children: \"Credit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 194,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"left\",\n                children: \"Debit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 195,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(TableCell, {\n                align: \"center\",\n                children: \"Balance\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 196,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 190,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 189,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n            children: this.renderTransactions()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 188,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 9\n      }, this);\n    }\n  }\n  /** Renders the component */\n\n\n  render() {\n    const {\n      classes\n    } = this.props;\n    let owner = null;\n\n    if (this.props.location.owner) {\n      // owner object exists\n      owner = this.props.location.owner;\n    } else {\n      // owner object does not exist, we are called directly by route URL \n      // or the page has been refreshed -> put the user back to start page\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 15\n      }, this);\n    }\n\n    const {\n      customer,\n      account\n    } = owner;\n    const {\n      transactionsLoadingInProgress,\n      creditsLoadingError,\n      debitsLoadingError\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        component: \"div\",\n        className: classes.subNav,\n        children: /*#__PURE__*/_jsxDEV(Link, {\n          component: RouterLink,\n          to: {\n            pathname: '/customers',\n            expandCustomer: customer\n          },\n          children: /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            spacing: 1,\n            justify: \"flex-start\",\n            alignItems: \"stretch\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: /*#__PURE__*/_jsxDEV(ArrowBackIcon, {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 232,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 231,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              children: \"Back to customer list\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 234,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 226,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Paper, {\n        className: classes.root,\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \"Account\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          className: classes.accountEntry,\n          children: [\"ID: \", account.getID()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          children: [\"Customer: \", customer.getLastName(), \", \", customer.getFirstName()]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this), this.renderTransactionTable(), /*#__PURE__*/_jsxDEV(LoadingProgress, {\n        show: transactionsLoadingInProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n        error: creditsLoadingError,\n        contextErrorMsg: `The credits of account ${this.accountID} could not be loaded.`,\n        onReload: this.getTransactions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n        error: debitsLoadingError,\n        contextErrorMsg: `The debits of account ${this.accountID} could not be loaded.`,\n        onReload: this.getTransactions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 224,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1)\n  },\n  subNav: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1)\n  },\n  tableHeader: {\n    marginLeft: theme.spacing(1),\n    marginTop: theme.spacing(2)\n  }\n});\n/** PropTypes */\n\n\nTransactionList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** @ignore */\n  match: PropTypes.object.isRequired\n};\nexport default withRouter(withStyles(styles)(TransactionList));","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/TransactionList.js"],"names":["React","Component","PropTypes","withStyles","Typography","TableContainer","Table","TableHead","TableCell","Paper","TableRow","TableBody","Link","Grid","ArrowBackIcon","RouterLink","withRouter","Redirect","BankAPI","ContextErrorMessage","LoadingProgress","TransactionList","constructor","props","getTransactions","account","location","owner","getAPI","getCreditsForAccount","getID","then","creditTransactionBOs","getDebitsForAccount","debitTransactionBOs","transactions","concat","sort","transactionComparator","setState","transactionsLoadingInProgress","debitsLoadingError","catch","e","creditsLoadingError","state","getAccount","transactionA","transactionB","result","componentDidMount","renderTransactionRow","transaction","balance","currencyFormatter","getCurrencyFormatter","getSourceAccount","getTargetAccount","format","getAmount","renderTransactions","map","renderTransactionTable","classes","tableHeader","render","customer","subNav","pathname","expandCustomer","root","accountEntry","getLastName","getFirstName","accountID","styles","theme","width","padding","spacing","marginTop","marginBottom","marginLeft","propTypes","object","isRequired","match"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, TableContainer, Table, TableHead, TableCell, Paper, TableRow, TableBody, Link, Grid } from '@material-ui/core';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { withRouter, Redirect } from 'react-router';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Querys lists of credit and debit TransactionBOs for an account of a customer from the backend.\n * The customers CustomerBO and AccountBO is recieved in the this.props.location.owner object as passed\n * by the AccountListEntry component through the React Router Link. \n * \n * @see See [AccountListEntry](#accountlistentry)\n * @see See React Router [ReactRouter](https://reacttraining.com/react-router/web/guides/quick-start)\n * @see See React Router [Link](https://reacttraining.com/react-router/web/api/Link)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass TransactionList extends Component {\n\n  #myAccount = null;\n\n  constructor(props) {\n    super(props);\n\n    // Store the underlying AccountBO given from the calling link of the RouterLink of React Router\n    this.#myAccount = this.props.location.owner.account;\n\n    // Init an empty state\n    this.state = {\n      transactions: [],\n      transactionsLoadingInProgress: false,\n      creditsLoadingError: null,\n      debitsLoadingError: null,\n    };\n  }\n\n \n  /**\n   * Returns the underlying AccountBO given from the calling link of the RouterLink of React Router\n   */\n  getAccount() {\n    return this.#myAccount;\n  }\n\n  /**\n   * Compares two TransactioBOs to sort them by their id field. Sorts the lowest id first. \n   * The ID is used as replacement a timestamp.\n   * \n   * Returns -1 if a < b\n   * Returns 1 if a > b\n   * Returns 0 if a = b\n   * \n   * @param {TransactionBO} transactionA \n   * @param {TransactionBO} transactionB \n   */\n  transactionComparator(transactionA, transactionB) {\n    let result = 0;\n\n    if (transactionA.getID() < transactionB.getID()) {\n      result = -1;\n    }\n    if (transactionA.getID() > transactionB.getID()) {\n      result = 1;\n    }\n\n    return result;\n  }\n\n  /** \n   * Fetches credit and debit TransactionBOs from the backend. The two operations are chained. \n   * Credit and debit transactions are marked with the transaction type and then concatinated into one array \n   * of transactions. This array is then sorted with the transactionComparator function. \n   */\n  getTransactions = () => {\n    const { account } = this.props.location.owner;\n\n    BankAPI.getAPI().getCreditsForAccount(account.getID())\n      .then(creditTransactionBOs => {\n        BankAPI.getAPI().getDebitsForAccount(account.getID()).then(debitTransactionBOs => {\n          let transactions = creditTransactionBOs.concat(debitTransactionBOs);\n\n          // Sorts the transactions by ascending ID, since the ID can serve as a timestamp. \n          // A higher ID indicates a newer transaction.\n          transactions.sort(this.transactionComparator);\n\n          // set final state\n          this.setState({\n            transactions: transactions,\n            transactionsLoadingInProgress: false,\n            debitsLoadingError: null\n          })\n        }).catch(e => this.setState({\n          transactions: [],\n          debitsLoadingError: e,\n          transactionsLoadingInProgress: false,\n        }));\n\n        // set inter state\n        this.setState({\n          creditsLoadingError: null,\n        })\n      }).catch(e =>\n        this.setState({\n          transactions: [],\n          transactionsLoadingInProgress: false,\n          creditsLoadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      transactionsLoadingInProgress: true,\n      creditsLoadingError: null,\n      debitsLoadingError: null\n    });\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    // load only if the owner object is given\n    if (this.props.location.owner) {\n      this.getTransactions();\n    }\n  }\n\n  /** Render a single row in the transaction table */\n  renderTransactionRow(transaction, balance) {\n    // For accessibility, the first column is set to be a <th> element, with a scope of 'row'. \n    // This enables screen readers to identify a cell's value by it's row and column name.\n\n    let currencyFormatter = BankAPI.getAPI().getCurrencyFormatter();\n\n    return (\n      <TableRow key={transaction.getID()}>\n        <TableCell align='center' component='th' scope='row'>\n          {transaction.getID()}\n        </TableCell>\n        <TableCell align='center'>{transaction.getSourceAccount()}</TableCell>\n        <TableCell align='center'>{transaction.getTargetAccount()}</TableCell>\n\n        {\n          // Its a credit if this account is the target of the transaction\n          this.getAccount().getID() === transaction.getTargetAccount() ?\n            <React.Fragment>\n              <TableCell align='right'>{currencyFormatter.format(transaction.getAmount())}</TableCell>\n              <TableCell align='right'>{}</TableCell>\n            </React.Fragment>\n            :\n            <React.Fragment>\n              <TableCell align='left'>{}</TableCell>\n              <TableCell align='left'>{currencyFormatter.format(transaction.getAmount())}</TableCell>\n            </React.Fragment>\n        }\n        <TableCell align='center'>{currencyFormatter.format(balance)}</TableCell>\n      </TableRow>\n    );\n  }\n\n  /** Render the body of the table with all transactions */\n  renderTransactions() {\n    let balance = 0;\n\n    return this.state.transactions.map(transaction => {\n      if (this.getAccount().getID() === transaction.getTargetAccount()) {\n        // Its a credit, since this account is the target of the transaction\n        balance += transaction.getAmount();\n      } else {\n        balance -= transaction.getAmount();\n      }\n      return this.renderTransactionRow(transaction, balance);\n    });\n  }\n\n  /** Render the transaction table  */\n  renderTransactionTable() {\n    const { transactionsLoadingInProgress, creditsLoadingError, debitsLoadingError } = this.state;\n\n    if (!transactionsLoadingInProgress && !creditsLoadingError && !debitsLoadingError) {\n      return (\n        <TableContainer component={Paper}>\n          <Typography className={this.props.classes.tableHeader}>\n            List of transactions:\n          </Typography>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell align='center'>ID</TableCell>\n                <TableCell align='center'>Source account</TableCell>\n                <TableCell align='center'>Target account</TableCell>\n                <TableCell align='right'>Credit</TableCell>\n                <TableCell align='left'>Debit</TableCell>\n                <TableCell align='center'>Balance</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.renderTransactions()}\n            </TableBody>\n          </Table>\n        </TableContainer>);\n    }\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes } = this.props;\n    let owner = null;\n    if (this.props.location.owner) {\n      // owner object exists\n      owner = this.props.location.owner\n    } else {\n      // owner object does not exist, we are called directly by route URL \n      // or the page has been refreshed -> put the user back to start page\n      return (<Redirect to='/' />);\n    }\n\n    const { customer, account } = owner;\n    const { transactionsLoadingInProgress, creditsLoadingError, debitsLoadingError } = this.state;\n\n    return (\n      <div>\n        <Typography component='div' className={classes.subNav}>\n          <Link component={RouterLink} to={{\n            pathname: '/customers',\n            expandCustomer: customer\n          }}>\n            <Grid container spacing={1} justify='flex-start' alignItems='stretch'>\n              <Grid item>\n                <ArrowBackIcon />\n              </Grid>\n              <Grid item>\n                Back to customer list\n              </Grid>\n            </Grid>\n          </Link>\n        </Typography>\n\n        <Paper className={classes.root}>\n          <Typography variant='h6'>\n            Account\n          </Typography>\n          <Typography className={classes.accountEntry}>\n            ID: {account.getID()}\n          </Typography>\n          <Typography>\n            Customer: {customer.getLastName()}, {customer.getFirstName()}\n          </Typography>\n        </Paper>\n\n        {this.renderTransactionTable()}\n\n        <LoadingProgress show={transactionsLoadingInProgress} />\n        <ContextErrorMessage error={creditsLoadingError} contextErrorMsg={`The credits of account ${this.accountID} could not be loaded.`} onReload={this.getTransactions} />\n        <ContextErrorMessage error={debitsLoadingError} contextErrorMsg={`The debits of account ${this.accountID} could not be loaded.`} onReload={this.getTransactions} />\n      </div>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1),\n  },\n  subNav: {\n    marginTop: theme.spacing(1),\n    marginBottom: theme.spacing(1),\n  },\n  tableHeader: {\n    marginLeft: theme.spacing(1),\n    marginTop: theme.spacing(2),\n  }\n});\n\n/** PropTypes */\nTransactionList.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** @ignore */\n  match: PropTypes.object.isRequired,\n}\n\nexport default withRouter(withStyles(styles)(TransactionList));"]},"metadata":{},"sourceType":"module"}