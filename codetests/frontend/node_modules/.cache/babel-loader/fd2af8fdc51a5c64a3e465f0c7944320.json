{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/dialogs/CustomerDeleteDialog.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n/**\n * Shows a modal delete/cancle dialog, which asks for deleting a customer. The CustomerBO to be deleted must be given in prop customer. \n * In dependency of the user interaction (delete/cancel) the respective backendcall is made. After that, the function of the onClose prop \n * is called with the deleted CustomerBO object as parameter. When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass CustomerDeleteDialog extends Component {\n  constructor(props) {\n    super(props); // Init the state\n\n    this.deleteCustomer = () => {\n      BankAPI.getAPI().deleteCustomer(this.props.customer.getID()).then(customer => {\n        this.setState({\n          deletingInProgress: false,\n          // disable loading indicator  \n          deletingError: null // no error message\n\n        });\n        this.props.onClose(this.props.customer); // call the parent with the deleted customer\n      }).catch(e => this.setState({\n        deletingInProgress: false,\n        // disable loading indicator \n        deletingError: e // show error message\n\n      })); // set loading to true\n\n      this.setState({\n        deletingInProgress: true,\n        // show loading indicator\n        deletingError: null // disable error message\n\n      });\n    };\n\n    this.handleClose = () => {\n      // console.log(event);\n      this.props.onClose(null);\n    };\n\n    this.state = {\n      deletingInProgress: false,\n      deletingError: null\n    };\n  }\n  /** Delete the customer */\n\n\n  /** Renders the component */\n  render() {\n    const {\n      classes,\n      customer,\n      show\n    } = this.props;\n    const {\n      deletingInProgress,\n      deletingError\n    } = this.state;\n    return show ? /*#__PURE__*/_jsxDEV(Dialog, {\n      open: show,\n      onClose: this.handleClose,\n      children: [/*#__PURE__*/_jsxDEV(DialogTitle, {\n        id: \"delete-dialog-title\",\n        children: [\"Delete customer\", /*#__PURE__*/_jsxDEV(IconButton, {\n          className: classes.closeButton,\n          onClick: this.handleClose,\n          children: /*#__PURE__*/_jsxDEV(CloseIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogContent, {\n        children: [/*#__PURE__*/_jsxDEV(DialogContentText, {\n          children: [\"Really delete customer '\", customer.getFirstName(), \" \", customer.getLastName(), \"' (ID: \", customer.getID(), \")?\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(LoadingProgress, {\n          show: deletingInProgress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n          error: deletingError,\n          contextErrorMsg: `The customer '${customer.getFirstName()} ${customer.getLastName()}' (ID: ${customer.getID()}) could not be deleted.`,\n          onReload: this.deleteCustomer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(DialogActions, {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: this.handleClose,\n          color: \"secondary\",\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          variant: \"contained\",\n          onClick: this.deleteCustomer,\n          color: \"primary\",\n          children: \"Delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }, this) : null;\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  }\n});\n/** PropTypes */\n\n\nCustomerDeleteDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** The CustomerBO to be deleted */\n  customer: PropTypes.object.isRequired,\n\n  /** If true, the dialog is rendered */\n  show: PropTypes.bool.isRequired,\n\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired\n};\nexport default withStyles(styles)(CustomerDeleteDialog);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/dialogs/CustomerDeleteDialog.js"],"names":["React","Component","PropTypes","withStyles","Button","IconButton","Dialog","DialogTitle","DialogContent","DialogContentText","DialogActions","CloseIcon","BankAPI","ContextErrorMessage","LoadingProgress","CustomerDeleteDialog","constructor","props","deleteCustomer","getAPI","customer","getID","then","setState","deletingInProgress","deletingError","onClose","catch","e","handleClose","state","render","classes","show","closeButton","getFirstName","getLastName","styles","theme","position","right","spacing","top","color","palette","grey","propTypes","object","isRequired","bool","func"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Button, IconButton, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions } from '@material-ui/core';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { BankAPI } from '../../api';\nimport ContextErrorMessage from './ContextErrorMessage';\nimport LoadingProgress from './LoadingProgress';\n\n/**\n * Shows a modal delete/cancle dialog, which asks for deleting a customer. The CustomerBO to be deleted must be given in prop customer. \n * In dependency of the user interaction (delete/cancel) the respective backendcall is made. After that, the function of the onClose prop \n * is called with the deleted CustomerBO object as parameter. When the dialog is canceled, onClose is called with null.\n * \n * @see See Material-UIs [Dialog](https://material-ui.com/components/dialogs)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass CustomerDeleteDialog extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init the state\n    this.state = {\n      deletingInProgress: false,\n      deletingError: null\n    };\n  }\n\n  /** Delete the customer */\n  deleteCustomer = () => {\n    BankAPI.getAPI().deleteCustomer(this.props.customer.getID()).then(customer => {\n      this.setState({\n        deletingInProgress: false,              // disable loading indicator  \n        deletingError: null                     // no error message\n      });\n      this.props.onClose(this.props.customer);  // call the parent with the deleted customer\n    }).catch(e =>\n      this.setState({\n        deletingInProgress: false,              // disable loading indicator \n        deletingError: e                        // show error message\n      })\n    );\n\n    // set loading to true\n    this.setState({\n      deletingInProgress: true,                 // show loading indicator\n      deletingError: null                       // disable error message\n    });\n  }\n\n  /** Handles the close / cancel button click event */\n  handleClose = () => {\n    // console.log(event);\n    this.props.onClose(null);\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customer, show } = this.props;\n    const { deletingInProgress, deletingError } = this.state;\n\n    return (\n      show ?\n        <Dialog open={show} onClose={this.handleClose}>\n          <DialogTitle id='delete-dialog-title'>Delete customer\n            <IconButton className={classes.closeButton} onClick={this.handleClose}>\n              <CloseIcon />\n            </IconButton>\n          </DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Really delete customer '{customer.getFirstName()} {customer.getLastName()}' (ID: {customer.getID()})?\n            </DialogContentText>\n            <LoadingProgress show={deletingInProgress} />\n            <ContextErrorMessage error={deletingError} contextErrorMsg={`The customer '${customer.getFirstName()} ${customer.getLastName()}' (ID: ${customer.getID()}) could not be deleted.`}\n              onReload={this.deleteCustomer} />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose} color='secondary'>\n              Cancel\n            </Button>\n            <Button variant='contained' onClick={this.deleteCustomer} color='primary'>\n              Delete\n            </Button> \n          </DialogActions>\n        </Dialog>\n        : null\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500],\n  }\n});\n\n/** PropTypes */\nCustomerDeleteDialog.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The CustomerBO to be deleted */\n  customer: PropTypes.object.isRequired,\n  /** If true, the dialog is rendered */\n  show: PropTypes.bool.isRequired,\n  /**  \n   * Handler function which is called, when the dialog is closed.\n   * Sends the deleted CustomerBO as parameter or null, if cancel was pressed.\n   *  \n   * Signature: onClose(CustomerBO customer);\n   */\n  onClose: PropTypes.func.isRequired,\n}\n\nexport default withStyles(styles)(CustomerDeleteDialog);\n"]},"metadata":{},"sourceType":"module"}