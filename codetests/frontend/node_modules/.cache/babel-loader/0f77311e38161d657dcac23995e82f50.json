{"ast":null,"code":"var _jsxFileName = \"/Users/macbookpro/Desktop/Bank/frontend/src/components/AccountDetail.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Paper } from '@material-ui/core';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AccountDetail extends Component {\n  constructor(props) {\n    super(props); // Init state\n\n    this.getCustomer = () => {\n      BankAPI.getAPI().getCustomer(this.props.customerID).then(customer => this.setState({\n        customer: customer,\n        loadingInProgress: false,\n        loadingError: null\n      })).catch(e => this.setState({\n        // Reset state with error from catch \n        customer: null,\n        loadingInProgress: false,\n        loadingError: e\n      })); // set loading to true\n\n      this.setState({\n        loadingInProgress: true,\n        loadingError: null\n      });\n    };\n\n    this.state = {\n      customer: null,\n      loadingInProgress: false,\n      loadingError: null\n    };\n  }\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n\n\n  componentDidMount() {\n    this.getCustomer();\n  }\n  /** gets the balance for this account */\n\n\n  /** Renders the component */\n  render() {\n    const {\n      classes,\n      customerID,\n      accountID\n    } = this.props;\n    const {\n      customer,\n      loadingInProgress,\n      loadingError\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(Paper, {\n      variant: \"outlined\",\n      className: classes.root,\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"h6\",\n        children: \"Account\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        className: classes.accountEntry,\n        children: [\"ID: \", accountID]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), customer ? /*#__PURE__*/_jsxDEV(Typography, {\n        children: [\"Customer: \", customer.getLastName(), \", \", customer.getFirstName()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 13\n      }, this) : null, /*#__PURE__*/_jsxDEV(LoadingProgress, {\n        show: loadingInProgress\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContextErrorMessage, {\n        error: loadingError,\n        contextErrorMsg: `The data of customer id ${customerID} could not be loaded.`,\n        onReload: this.getCustomer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n/** Component specific styles */\n\n\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0\n  }\n});\n/** PropTypes */\n\n\nAccountDetail.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n\n  /** The customerID to be rendered */\n  customerID: PropTypes.string.isRequired,\n\n  /** The accountID to be rendered */\n  accountID: PropTypes.string.isRequired\n};\nexport default withStyles(styles)(AccountDetail);","map":{"version":3,"sources":["/Users/macbookpro/Desktop/Bank/frontend/src/components/AccountDetail.js"],"names":["React","Component","PropTypes","withStyles","Typography","Paper","BankAPI","ContextErrorMessage","LoadingProgress","AccountDetail","constructor","props","getCustomer","getAPI","customerID","then","customer","setState","loadingInProgress","loadingError","catch","e","state","componentDidMount","render","classes","accountID","root","accountEntry","getLastName","getFirstName","styles","theme","width","padding","spacing","marginTop","fontSize","typography","pxToRem","flexBasis","flexShrink","propTypes","object","isRequired","string"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles, Typography, Paper } from '@material-ui/core';\nimport { BankAPI } from '../api';\nimport ContextErrorMessage from './dialogs/ContextErrorMessage';\nimport LoadingProgress from './dialogs/LoadingProgress';\n\n/**\n * Renders a AccountBO object within a ListEntry and provides a delete button to delete it.\n * \n * @see See Material-UIs [Lists](https://material-ui.com/components/lists/)\n * @see See Material-UIs [ListItem](https://material-ui.com/api/list-item/)\n * \n * @author [Christoph Kunz](https://github.com/christophkunz)\n */\nclass AccountDetail extends Component {\n\n  constructor(props) {\n    super(props);\n\n    // Init state\n    this.state = {\n      customer: null,\n      loadingInProgress: false,\n      loadingError: null,\n    };\n  }\n\n  /** Lifecycle method, which is called when the component gets inserted into the browsers DOM */\n  componentDidMount() {\n    this.getCustomer();\n  }\n\n  /** gets the balance for this account */\n  getCustomer = () => {\n    BankAPI.getAPI().getCustomer(this.props.customerID).then(customer =>\n      this.setState({\n        customer: customer,\n        loadingInProgress: false,\n        loadingError: null\n      })).catch(e =>\n        this.setState({ // Reset state with error from catch \n          customer: null,\n          loadingInProgress: false,\n          loadingError: e\n        })\n      );\n\n    // set loading to true\n    this.setState({\n      loadingInProgress: true,\n      loadingError: null\n    });\n  }\n\n  /** Renders the component */\n  render() {\n    const { classes, customerID, accountID } = this.props;\n    const { customer, loadingInProgress, loadingError } = this.state;\n\n    return (\n      <Paper variant='outlined' className={classes.root}>\n\n        <Typography variant='h6'>\n          Account \n        </Typography>\n        <Typography className={classes.accountEntry}>\n          ID: {accountID}\n        </Typography>\n        {\n          customer ?\n            <Typography>\n              Customer: {customer.getLastName()}, {customer.getFirstName()}\n            </Typography>\n            : null\n        }\n        <LoadingProgress show={loadingInProgress} />\n        <ContextErrorMessage error={loadingError} contextErrorMsg={`The data of customer id ${customerID} could not be loaded.`} onReload={this.getCustomer} />\n      </Paper>\n    );\n  }\n}\n\n/** Component specific styles */\nconst styles = theme => ({\n  root: {\n    width: '100%',\n    padding: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  },\n  accountEntry: {\n    fontSize: theme.typography.pxToRem(15),\n    flexBasis: '33.33%',\n    flexShrink: 0,\n  }\n});\n\n/** PropTypes */\nAccountDetail.propTypes = {\n  /** @ignore */\n  classes: PropTypes.object.isRequired,\n  /** The customerID to be rendered */\n  customerID: PropTypes.string.isRequired,\n  /** The accountID to be rendered */\n  accountID: PropTypes.string.isRequired,\n}\n\nexport default withStyles(styles)(AccountDetail);\n"]},"metadata":{},"sourceType":"module"}